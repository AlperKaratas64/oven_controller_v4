
oven_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c68  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006d78  08006d78  00016d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071a4  080071a4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080071a4  080071a4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071a4  080071a4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a8  080071a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080071ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  200001e0  0800738c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800738c  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7c3  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8d  00000000  00000000  0002a9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0002c860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  0002d450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189f2  00000000  00000000  0002df38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d187  00000000  00000000  0004692a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c32b  00000000  00000000  00053ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfddc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004258  00000000  00000000  000dfe2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d60 	.word	0x08006d60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006d60 	.word	0x08006d60

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8000b2c:	201e      	movs	r0, #30
 8000b2e:	f000 fdef 	bl	8001710 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b38:	481c      	ldr	r0, [pc, #112]	; (8000bac <lcd_init+0x84>)
 8000b3a:	f001 fe66 	bl	800280a <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b44:	4819      	ldr	r0, [pc, #100]	; (8000bac <lcd_init+0x84>)
 8000b46:	f001 fe60 	bl	800280a <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b50:	4816      	ldr	r0, [pc, #88]	; (8000bac <lcd_init+0x84>)
 8000b52:	f001 fe5a 	bl	800280a <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5c:	4813      	ldr	r0, [pc, #76]	; (8000bac <lcd_init+0x84>)
 8000b5e:	f001 fe54 	bl	800280a <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b68:	4810      	ldr	r0, [pc, #64]	; (8000bac <lcd_init+0x84>)
 8000b6a:	f001 fe4e 	bl	800280a <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <lcd_init+0x84>)
 8000b76:	f001 fe48 	bl	800280a <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b80:	480a      	ldr	r0, [pc, #40]	; (8000bac <lcd_init+0x84>)
 8000b82:	f001 fe42 	bl	800280a <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28); //4-bit veri modunda çalışacağını ve 2 satır 5*8 karakter boyutu ayarını gönderir
 8000b86:	2128      	movs	r1, #40	; 0x28
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 f811 	bl	8000bb0 <lcd_write>
	lcd_write(0,0x0c); //ekranın görüntüyü açık, imleci kapalı ve imleç hareketini sağa kaydırma modunda ayarlar.
 8000b8e:	210c      	movs	r1, #12
 8000b90:	2000      	movs	r0, #0
 8000b92:	f000 f80d 	bl	8000bb0 <lcd_write>
	lcd_write(0,0x06); //otomatik sağa kaydırma
 8000b96:	2106      	movs	r1, #6
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 f809 	bl	8000bb0 <lcd_write>
	lcd_write(0,0x01); //ekranı temizler
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 f805 	bl	8000bb0 <lcd_write>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40010c00 	.word	0x40010c00

08000bb0 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	460a      	mov	r2, r1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f000 fda5 	bl	8001710 <HAL_Delay>
	if(type)
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d006      	beq.n	8000bda <lcd_write+0x2a>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd2:	485a      	ldr	r0, [pc, #360]	; (8000d3c <lcd_write+0x18c>)
 8000bd4:	f001 fe19 	bl	800280a <HAL_GPIO_WritePin>
 8000bd8:	e005      	b.n	8000be6 <lcd_write+0x36>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN); //1 ise hıgh 0 ise low
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be0:	4856      	ldr	r0, [pc, #344]	; (8000d3c <lcd_write+0x18c>)
 8000be2:	f001 fe12 	bl	800280a <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 8000be6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	da06      	bge.n	8000bfc <lcd_write+0x4c>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf4:	4851      	ldr	r0, [pc, #324]	; (8000d3c <lcd_write+0x18c>)
 8000bf6:	f001 fe08 	bl	800280a <HAL_GPIO_WritePin>
 8000bfa:	e005      	b.n	8000c08 <lcd_write+0x58>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c02:	484e      	ldr	r0, [pc, #312]	; (8000d3c <lcd_write+0x18c>)
 8000c04:	f001 fe01 	bl	800280a <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d006      	beq.n	8000c20 <lcd_write+0x70>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c18:	4848      	ldr	r0, [pc, #288]	; (8000d3c <lcd_write+0x18c>)
 8000c1a:	f001 fdf6 	bl	800280a <HAL_GPIO_WritePin>
 8000c1e:	e005      	b.n	8000c2c <lcd_write+0x7c>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c26:	4845      	ldr	r0, [pc, #276]	; (8000d3c <lcd_write+0x18c>)
 8000c28:	f001 fdef 	bl	800280a <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	f003 0320 	and.w	r3, r3, #32
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <lcd_write+0x94>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c3c:	483f      	ldr	r0, [pc, #252]	; (8000d3c <lcd_write+0x18c>)
 8000c3e:	f001 fde4 	bl	800280a <HAL_GPIO_WritePin>
 8000c42:	e005      	b.n	8000c50 <lcd_write+0xa0>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4a:	483c      	ldr	r0, [pc, #240]	; (8000d3c <lcd_write+0x18c>)
 8000c4c:	f001 fddd 	bl	800280a <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 8000c50:	79bb      	ldrb	r3, [r7, #6]
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <lcd_write+0xb8>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	4836      	ldr	r0, [pc, #216]	; (8000d3c <lcd_write+0x18c>)
 8000c62:	f001 fdd2 	bl	800280a <HAL_GPIO_WritePin>
 8000c66:	e005      	b.n	8000c74 <lcd_write+0xc4>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6e:	4833      	ldr	r0, [pc, #204]	; (8000d3c <lcd_write+0x18c>)
 8000c70:	f001 fdcb 	bl	800280a <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7a:	4830      	ldr	r0, [pc, #192]	; (8000d3c <lcd_write+0x18c>)
 8000c7c:	f001 fdc5 	bl	800280a <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c86:	482d      	ldr	r0, [pc, #180]	; (8000d3c <lcd_write+0x18c>)
 8000c88:	f001 fdbf 	bl	800280a <HAL_GPIO_WritePin>
	

	//Düşük Nibble Gönder
	if(data&0x08)
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d006      	beq.n	8000ca4 <lcd_write+0xf4>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9c:	4827      	ldr	r0, [pc, #156]	; (8000d3c <lcd_write+0x18c>)
 8000c9e:	f001 fdb4 	bl	800280a <HAL_GPIO_WritePin>
 8000ca2:	e005      	b.n	8000cb0 <lcd_write+0x100>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000caa:	4824      	ldr	r0, [pc, #144]	; (8000d3c <lcd_write+0x18c>)
 8000cac:	f001 fdad 	bl	800280a <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d006      	beq.n	8000cc8 <lcd_write+0x118>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc0:	481e      	ldr	r0, [pc, #120]	; (8000d3c <lcd_write+0x18c>)
 8000cc2:	f001 fda2 	bl	800280a <HAL_GPIO_WritePin>
 8000cc6:	e005      	b.n	8000cd4 <lcd_write+0x124>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cce:	481b      	ldr	r0, [pc, #108]	; (8000d3c <lcd_write+0x18c>)
 8000cd0:	f001 fd9b 	bl	800280a <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <lcd_write+0x13c>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce4:	4815      	ldr	r0, [pc, #84]	; (8000d3c <lcd_write+0x18c>)
 8000ce6:	f001 fd90 	bl	800280a <HAL_GPIO_WritePin>
 8000cea:	e005      	b.n	8000cf8 <lcd_write+0x148>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf2:	4812      	ldr	r0, [pc, #72]	; (8000d3c <lcd_write+0x18c>)
 8000cf4:	f001 fd89 	bl	800280a <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d006      	beq.n	8000d10 <lcd_write+0x160>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000d02:	2201      	movs	r2, #1
 8000d04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <lcd_write+0x18c>)
 8000d0a:	f001 fd7e 	bl	800280a <HAL_GPIO_WritePin>
 8000d0e:	e005      	b.n	8000d1c <lcd_write+0x16c>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d16:	4809      	ldr	r0, [pc, #36]	; (8000d3c <lcd_write+0x18c>)
 8000d18:	f001 fd77 	bl	800280a <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <lcd_write+0x18c>)
 8000d24:	f001 fd71 	bl	800280a <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <lcd_write+0x18c>)
 8000d30:	f001 fd6b 	bl	800280a <HAL_GPIO_WritePin>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40010c00 	.word	0x40010c00

08000d40 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	603a      	str	r2, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	71bb      	strb	r3, [r7, #6]
	//İmleç Konumunu Ayarla
	#ifdef LCD16xN	//LCD16x2 veya LCD16x4 için
	switch(x)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d836      	bhi.n	8000dc4 <lcd_puts+0x84>
 8000d56:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <lcd_puts+0x1c>)
 8000d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5c:	08000d6d 	.word	0x08000d6d
 8000d60:	08000d7d 	.word	0x08000d7d
 8000d64:	08000d8d 	.word	0x08000d8d
 8000d68:	08000d9d 	.word	0x08000d9d
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	3b80      	subs	r3, #128	; 0x80
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff ff1b 	bl	8000bb0 <lcd_write>
			break;
 8000d7a:	e017      	b.n	8000dac <lcd_puts+0x6c>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	3b40      	subs	r3, #64	; 0x40
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	4619      	mov	r1, r3
 8000d84:	2000      	movs	r0, #0
 8000d86:	f7ff ff13 	bl	8000bb0 <lcd_write>
			break;
 8000d8a:	e00f      	b.n	8000dac <lcd_puts+0x6c>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	3b70      	subs	r3, #112	; 0x70
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4619      	mov	r1, r3
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff ff0b 	bl	8000bb0 <lcd_write>
			break;
 8000d9a:	e007      	b.n	8000dac <lcd_puts+0x6c>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	3b30      	subs	r3, #48	; 0x30
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	4619      	mov	r1, r3
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff ff03 	bl	8000bb0 <lcd_write>
			break;
 8000daa:	bf00      	nop
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 8000dac:	e00a      	b.n	8000dc4 <lcd_puts+0x84>
	{
		lcd_write(1,*string);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f993 3000 	ldrsb.w	r3, [r3]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4619      	mov	r1, r3
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff fef9 	bl	8000bb0 <lcd_write>
		string++;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	603b      	str	r3, [r7, #0]
	while(*string)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1ef      	bne.n	8000dae <lcd_puts+0x6e>
	}
}
 8000dce:	bf00      	nop
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dde:	f000 fc35 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de2:	f000 f88d 	bl	8000f00 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  // başlatma
  MX_GPIO_Init();
 8000de6:	f000 f9d9 	bl	800119c <MX_GPIO_Init>
  MX_DMA_Init();
 8000dea:	f000 f9b9 	bl	8001160 <MX_DMA_Init>
  MX_ADC1_Init();
 8000dee:	f000 f8d9 	bl	8000fa4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000df2:	f000 f915 	bl	8001020 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init(); // lcd hazirla
 8000df6:	f7ff fe97 	bl	8000b28 <lcd_init>
  {
      static unsigned int adc = 0; //ADC ile ölçülen değeri temsil eder
	  char mesaj[32]; // 32 karakterlik LCD ekranında görüntülenecek mesajları saklamak için kullanılır
	  static unsigned int pwm = 50; // sinyalinin yükseklik değerini temsil eder.

	  HAL_ADC_Start(&hadc1); //ADC dönüşümü için kullanır
 8000dfa:	4839      	ldr	r0, [pc, #228]	; (8000ee0 <main+0x108>)
 8000dfc:	f000 fd84 	bl	8001908 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100); //tamamlanmayı bekler
 8000e00:	2164      	movs	r1, #100	; 0x64
 8000e02:	4837      	ldr	r0, [pc, #220]	; (8000ee0 <main+0x108>)
 8000e04:	f000 fe5a 	bl	8001abc <HAL_ADC_PollForConversion>

	  adc = HAL_ADC_GetValue(&hadc1); //porttan okunan değeri adc değişkenine aktar
 8000e08:	4835      	ldr	r0, [pc, #212]	; (8000ee0 <main+0x108>)
 8000e0a:	f000 ff5d 	bl	8001cc8 <HAL_ADC_GetValue>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a34      	ldr	r2, [pc, #208]	; (8000ee4 <main+0x10c>)
 8000e12:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1); //adc işlemini durdur
 8000e14:	4832      	ldr	r0, [pc, #200]	; (8000ee0 <main+0x108>)
 8000e16:	f000 fe25 	bl	8001a64 <HAL_ADC_Stop>
      float adc_x = adc * 0.0232;  //0 ile 4095 arasında değer
 8000e1a:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <main+0x10c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fae0 	bl	80003e4 <__aeabi_ui2d>
 8000e24:	a32c      	add	r3, pc, #176	; (adr r3, 8000ed8 <main+0x100>)
 8000e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2a:	f7ff fb55 	bl	80004d8 <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fe27 	bl	8000a88 <__aeabi_d2f>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
	  sprintf(mesaj, "ADC =  %.2f",adc_x);// sistem değişkenlerini msg2 dizisine at
 8000e3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e40:	f7ff faf2 	bl	8000428 <__aeabi_f2d>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	1d38      	adds	r0, r7, #4
 8000e4a:	4927      	ldr	r1, [pc, #156]	; (8000ee8 <main+0x110>)
 8000e4c:	f003 fd0e 	bl	800486c <siprintf>
	  lcd_puts(0, 0, (int8_t*)mesaj ); //lcd ye ovendan okunan adc yi yaz
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	461a      	mov	r2, r3
 8000e54:	2100      	movs	r1, #0
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff ff72 	bl	8000d40 <lcd_puts>

	  sprintf(mesaj, "Pwm =  %4u",pwm); // sistem değişkenlerini mesaj dizisine at
 8000e5c:	4b23      	ldr	r3, [pc, #140]	; (8000eec <main+0x114>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4923      	ldr	r1, [pc, #140]	; (8000ef0 <main+0x118>)
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 fd01 	bl	800486c <siprintf>
	  lcd_puts(1, 0, (int8_t*)mesaj ); //lcd ye pwm değerini  yaz
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2001      	movs	r0, #1
 8000e72:	f7ff ff65 	bl	8000d40 <lcd_puts>

  	  TIM1->CCR1 = 100 - pwm; //timer 1 kaydedicisine okunan değeri yaz
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <main+0x114>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ef4 <main+0x11c>)
 8000e7c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000e80:	6353      	str	r3, [r2, #52]	; 0x34
  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // pwm sinyalini oluştur
 8000e82:	2100      	movs	r1, #0
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <main+0x120>)
 8000e86:	f002 fafd 	bl	8003484 <HAL_TIM_PWM_Start>

  	 if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_1) == 1 ) // artır butonunu basılıysa pwm i 10 arttır
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	481b      	ldr	r0, [pc, #108]	; (8000efc <main+0x124>)
 8000e8e:	f001 fca5 	bl	80027dc <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d10e      	bne.n	8000eb6 <main+0xde>
  	 {
  		pwm += 10, HAL_Delay(250);
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <main+0x114>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	330a      	adds	r3, #10
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <main+0x114>)
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	20fa      	movs	r0, #250	; 0xfa
 8000ea4:	f000 fc34 	bl	8001710 <HAL_Delay>
  		if (pwm > 100) pwm = 100;
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <main+0x114>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b64      	cmp	r3, #100	; 0x64
 8000eae:	d902      	bls.n	8000eb6 <main+0xde>
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <main+0x114>)
 8000eb2:	2264      	movs	r2, #100	; 0x64
 8000eb4:	601a      	str	r2, [r3, #0]
  	 }

  	if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_2) == 1 ) // azal butonunu basılıysa pwm i 10 azalt
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <main+0x124>)
 8000eba:	f001 fc8f 	bl	80027dc <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d19a      	bne.n	8000dfa <main+0x22>
  	{
  		pwm -= 10, HAL_Delay(250);
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <main+0x114>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3b0a      	subs	r3, #10
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <main+0x114>)
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	20fa      	movs	r0, #250	; 0xfa
 8000ed0:	f000 fc1e 	bl	8001710 <HAL_Delay>
  {
 8000ed4:	e791      	b.n	8000dfa <main+0x22>
 8000ed6:	bf00      	nop
 8000ed8:	a5119ce0 	.word	0xa5119ce0
 8000edc:	3f97c1bd 	.word	0x3f97c1bd
 8000ee0:	200001fc 	.word	0x200001fc
 8000ee4:	200002b8 	.word	0x200002b8
 8000ee8:	08006d78 	.word	0x08006d78
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	08006d84 	.word	0x08006d84
 8000ef4:	40012c00 	.word	0x40012c00
 8000ef8:	2000022c 	.word	0x2000022c
 8000efc:	40010c00 	.word	0x40010c00

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0a:	2228      	movs	r2, #40	; 0x28
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 f844 	bl	8003f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f30:	2302      	movs	r3, #2
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f34:	2301      	movs	r3, #1
 8000f36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f38:	2310      	movs	r3, #16
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fc79 	bl	800283c <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000f50:	f000 f97c 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	230f      	movs	r3, #15
 8000f56:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000f64:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fee5 	bl	8002d40 <HAL_RCC_ClockConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f7c:	f000 f966 	bl	800124c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f80:	2302      	movs	r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 f85c 	bl	8003048 <HAL_RCCEx_PeriphCLKConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f96:	f000 f959 	bl	800124c <Error_Handler>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3750      	adds	r7, #80	; 0x50
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_ADC1_Init+0x74>)
 8000fb6:	4a19      	ldr	r2, [pc, #100]	; (800101c <MX_ADC1_Init+0x78>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_ADC1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_ADC1_Init+0x74>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_ADC1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_ADC1_Init+0x74>)
 8000fce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_ADC1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_ADC1_Init+0x74>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <MX_ADC1_Init+0x74>)
 8000fe2:	f000 fbb9 	bl	8001758 <HAL_ADC_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fec:	f000 f92e 	bl	800124c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_ADC1_Init+0x74>)
 8001002:	f000 fe6d 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800100c:	f000 f91e 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200001fc 	.word	0x200001fc
 800101c:	40012400 	.word	0x40012400

08001020 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b096      	sub	sp, #88	; 0x58
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001026:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001034:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]
 800104e:	615a      	str	r2, [r3, #20]
 8001050:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2220      	movs	r2, #32
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f002 ff9f 	bl	8003f9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800105e:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <MX_TIM1_Init+0x138>)
 8001060:	4a3e      	ldr	r2, [pc, #248]	; (800115c <MX_TIM1_Init+0x13c>)
 8001062:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8001064:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <MX_TIM1_Init+0x138>)
 8001066:	2207      	movs	r2, #7
 8001068:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b3b      	ldr	r3, [pc, #236]	; (8001158 <MX_TIM1_Init+0x138>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001070:	4b39      	ldr	r3, [pc, #228]	; (8001158 <MX_TIM1_Init+0x138>)
 8001072:	2263      	movs	r2, #99	; 0x63
 8001074:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b38      	ldr	r3, [pc, #224]	; (8001158 <MX_TIM1_Init+0x138>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <MX_TIM1_Init+0x138>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b35      	ldr	r3, [pc, #212]	; (8001158 <MX_TIM1_Init+0x138>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001088:	4833      	ldr	r0, [pc, #204]	; (8001158 <MX_TIM1_Init+0x138>)
 800108a:	f002 f953 	bl	8003334 <HAL_TIM_Base_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001094:	f000 f8da 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800109e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010a2:	4619      	mov	r1, r3
 80010a4:	482c      	ldr	r0, [pc, #176]	; (8001158 <MX_TIM1_Init+0x138>)
 80010a6:	f002 fb47 	bl	8003738 <HAL_TIM_ConfigClockSource>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80010b0:	f000 f8cc 	bl	800124c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010b4:	4828      	ldr	r0, [pc, #160]	; (8001158 <MX_TIM1_Init+0x138>)
 80010b6:	f002 f98c 	bl	80033d2 <HAL_TIM_PWM_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80010c0:	f000 f8c4 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010d0:	4619      	mov	r1, r3
 80010d2:	4821      	ldr	r0, [pc, #132]	; (8001158 <MX_TIM1_Init+0x138>)
 80010d4:	f002 fe8e 	bl	8003df4 <HAL_TIMEx_MasterConfigSynchronization>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80010de:	f000 f8b5 	bl	800124c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e2:	2360      	movs	r3, #96	; 0x60
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	4814      	ldr	r0, [pc, #80]	; (8001158 <MX_TIM1_Init+0x138>)
 8001108:	f002 fa58 	bl	80035bc <HAL_TIM_PWM_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001112:	f000 f89b 	bl	800124c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <MX_TIM1_Init+0x138>)
 800113a:	f002 feb3 	bl	8003ea4 <HAL_TIMEx_ConfigBreakDeadTime>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001144:	f000 f882 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <MX_TIM1_Init+0x138>)
 800114a:	f000 f92d 	bl	80013a8 <HAL_TIM_MspPostInit>

}
 800114e:	bf00      	nop
 8001150:	3758      	adds	r7, #88	; 0x58
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000022c 	.word	0x2000022c
 800115c:	40012c00 	.word	0x40012c00

08001160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_DMA_Init+0x38>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <MX_DMA_Init+0x38>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6153      	str	r3, [r2, #20]
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_DMA_Init+0x38>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	200c      	movs	r0, #12
 8001184:	f001 f817 	bl	80021b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001188:	200c      	movs	r0, #12
 800118a:	f001 f830 	bl	80021ee <HAL_NVIC_EnableIRQ>

}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <MX_GPIO_Init+0xa8>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a23      	ldr	r2, [pc, #140]	; (8001244 <MX_GPIO_Init+0xa8>)
 80011b6:	f043 0320 	orr.w	r3, r3, #32
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <MX_GPIO_Init+0xa8>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <MX_GPIO_Init+0xa8>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <MX_GPIO_Init+0xa8>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_GPIO_Init+0xa8>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_GPIO_Init+0xa8>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <MX_GPIO_Init+0xa8>)
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_GPIO_Init+0xa8>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80011fe:	4812      	ldr	r0, [pc, #72]	; (8001248 <MX_GPIO_Init+0xac>)
 8001200:	f001 fb03 	bl	800280a <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001204:	2306      	movs	r3, #6
 8001206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <MX_GPIO_Init+0xac>)
 8001218:	f001 f964 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800121c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001220:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2302      	movs	r3, #2
 800122c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	4619      	mov	r1, r3
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_GPIO_Init+0xac>)
 8001236:	f001 f955 	bl	80024e4 <HAL_GPIO_Init>

}
 800123a:	bf00      	nop
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	40010c00 	.word	0x40010c00

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x8>
	...

08001258 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_MspInit+0x40>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <HAL_MspInit+0x40>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6193      	str	r3, [r2, #24]
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_MspInit+0x40>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_MspInit+0x40>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_MspInit+0x40>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	61d3      	str	r3, [r2, #28]
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_MspInit+0x40>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a14      	ldr	r2, [pc, #80]	; (8001308 <HAL_ADC_MspInit+0x6c>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d121      	bne.n	8001300 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <HAL_ADC_MspInit+0x70>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <HAL_ADC_MspInit+0x70>)
 80012c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_ADC_MspInit+0x70>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_ADC_MspInit+0x70>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <HAL_ADC_MspInit+0x70>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_ADC_MspInit+0x70>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ec:	2301      	movs	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f0:	2303      	movs	r3, #3
 80012f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <HAL_ADC_MspInit+0x74>)
 80012fc:	f001 f8f2 	bl	80024e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40012400 	.word	0x40012400
 800130c:	40021000 	.word	0x40021000
 8001310:	40010800 	.word	0x40010800

08001314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <HAL_TIM_Base_MspInit+0x84>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d133      	bne.n	800138e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_TIM_Base_MspInit+0x88>)
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <HAL_TIM_Base_MspInit+0x88>)
 800132c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001330:	6193      	str	r3, [r2, #24]
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_TIM_Base_MspInit+0x88>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_TIM_Base_MspInit+0x8c>)
 8001340:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <HAL_TIM_Base_MspInit+0x90>)
 8001342:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_TIM_Base_MspInit+0x8c>)
 8001346:	2210      	movs	r2, #16
 8001348:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_TIM_Base_MspInit+0x8c>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_TIM_Base_MspInit+0x8c>)
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_TIM_Base_MspInit+0x8c>)
 8001358:	f44f 7280 	mov.w	r2, #256	; 0x100
 800135c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <HAL_TIM_Base_MspInit+0x8c>)
 8001360:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001364:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_TIM_Base_MspInit+0x8c>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_TIM_Base_MspInit+0x8c>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <HAL_TIM_Base_MspInit+0x8c>)
 8001374:	f000 ff56 	bl	8002224 <HAL_DMA_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800137e:	f7ff ff65 	bl	800124c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_TIM_Base_MspInit+0x8c>)
 8001386:	625a      	str	r2, [r3, #36]	; 0x24
 8001388:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <HAL_TIM_Base_MspInit+0x8c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40012c00 	.word	0x40012c00
 800139c:	40021000 	.word	0x40021000
 80013a0:	20000274 	.word	0x20000274
 80013a4:	4002001c 	.word	0x4002001c

080013a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <HAL_TIM_MspPostInit+0x5c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d118      	bne.n	80013fa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_TIM_MspPostInit+0x60>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_TIM_MspPostInit+0x60>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_TIM_MspPostInit+0x60>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_TIM_MspPostInit+0x64>)
 80013f6:	f001 f875 	bl	80024e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40012c00 	.word	0x40012c00
 8001408:	40021000 	.word	0x40021000
 800140c:	40010800 	.word	0x40010800

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001456:	f000 f93f 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <DMA1_Channel2_IRQHandler+0x10>)
 8001466:	f000 ff37 	bl	80022d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000274 	.word	0x20000274

08001474 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return 1;
 8001478:	2301      	movs	r3, #1
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <_kill>:

int _kill(int pid, int sig)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800148c:	f002 fd5c 	bl	8003f48 <__errno>
 8001490:	4603      	mov	r3, r0
 8001492:	2216      	movs	r2, #22
 8001494:	601a      	str	r2, [r3, #0]
  return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <_exit>:

void _exit (int status)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014aa:	f04f 31ff 	mov.w	r1, #4294967295
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffe7 	bl	8001482 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014b4:	e7fe      	b.n	80014b4 <_exit+0x12>

080014b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	e00a      	b.n	80014de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014c8:	f3af 8000 	nop.w
 80014cc:	4601      	mov	r1, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	60ba      	str	r2, [r7, #8]
 80014d4:	b2ca      	uxtb	r2, r1
 80014d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3301      	adds	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbf0      	blt.n	80014c8 <_read+0x12>
  }

  return len;
 80014e6:	687b      	ldr	r3, [r7, #4]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e009      	b.n	8001516 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	60ba      	str	r2, [r7, #8]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3301      	adds	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	429a      	cmp	r2, r3
 800151c:	dbf1      	blt.n	8001502 <_write+0x12>
  }
  return len;
 800151e:	687b      	ldr	r3, [r7, #4]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_close>:

int _close(int file)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154e:	605a      	str	r2, [r3, #4]
  return 0;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <_isatty>:

int _isatty(int file)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f002 fcc6 	bl	8003f48 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20002800 	.word	0x20002800
 80015e8:	00000400 	.word	0x00000400
 80015ec:	200002bc 	.word	0x200002bc
 80015f0:	200002d8 	.word	0x200002d8

080015f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	; (8001638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	; (8001644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001626:	f7ff ffe5 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162a:	f002 fc93 	bl	8003f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162e:	f7ff fbd3 	bl	8000dd8 <main>
  bx lr
 8001632:	4770      	bx	lr
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800163c:	080071ac 	.word	0x080071ac
  ldr r2, =_sbss
 8001640:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001644:	200002d4 	.word	0x200002d4

08001648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC1_2_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_Init+0x28>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_Init+0x28>)
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 fd9f 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	200f      	movs	r0, #15
 8001664:	f000 f808 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff fdf6 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40022000 	.word	0x40022000

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fdb7 	bl	800220a <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 fd7f 	bl	80021b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000004 	.word	0x20000004
 80016d0:	2000000c 	.word	0x2000000c
 80016d4:	20000008 	.word	0x20000008

080016d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_IncTick+0x1c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_IncTick+0x20>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a03      	ldr	r2, [pc, #12]	; (80016f8 <HAL_IncTick+0x20>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	2000000c 	.word	0x2000000c
 80016f8:	200002c0 	.word	0x200002c0

080016fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b02      	ldr	r3, [pc, #8]	; (800170c <HAL_GetTick+0x10>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	200002c0 	.word	0x200002c0

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff fff0 	bl	80016fc <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffe0 	bl	80016fc <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000000c 	.word	0x2000000c

08001758 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0be      	b.n	80018f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fd80 	bl	800129c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fbf1 	bl	8001f84 <ADC_ConversionStop_Disable>
 80017a2:	4603      	mov	r3, r0
 80017a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 8099 	bne.w	80018e6 <HAL_ADC_Init+0x18e>
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f040 8095 	bne.w	80018e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017c4:	f023 0302 	bic.w	r3, r3, #2
 80017c8:	f043 0202 	orr.w	r2, r3, #2
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7b1b      	ldrb	r3, [r3, #12]
 80017de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017f0:	d003      	beq.n	80017fa <HAL_ADC_Init+0xa2>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d102      	bne.n	8001800 <HAL_ADC_Init+0xa8>
 80017fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fe:	e000      	b.n	8001802 <HAL_ADC_Init+0xaa>
 8001800:	2300      	movs	r3, #0
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7d1b      	ldrb	r3, [r3, #20]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d119      	bne.n	8001844 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7b1b      	ldrb	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	3b01      	subs	r3, #1
 800181e:	035a      	lsls	r2, r3, #13
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	e00b      	b.n	8001844 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	f043 0220 	orr.w	r2, r3, #32
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	f043 0201 	orr.w	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	430a      	orrs	r2, r1
 8001856:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	4b28      	ldr	r3, [pc, #160]	; (8001900 <HAL_ADC_Init+0x1a8>)
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	430b      	orrs	r3, r1
 800186a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001874:	d003      	beq.n	800187e <HAL_ADC_Init+0x126>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d104      	bne.n	8001888 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	3b01      	subs	r3, #1
 8001884:	051b      	lsls	r3, r3, #20
 8001886:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	430a      	orrs	r2, r1
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_ADC_Init+0x1ac>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d10b      	bne.n	80018c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	f023 0303 	bic.w	r3, r3, #3
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018c2:	e018      	b.n	80018f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	f023 0312 	bic.w	r3, r3, #18
 80018cc:	f043 0210 	orr.w	r2, r3, #16
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018e4:	e007      	b.n	80018f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	f043 0210 	orr.w	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	ffe1f7fd 	.word	0xffe1f7fd
 8001904:	ff1f0efe 	.word	0xff1f0efe

08001908 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_ADC_Start+0x1a>
 800191e:	2302      	movs	r3, #2
 8001920:	e098      	b.n	8001a54 <HAL_ADC_Start+0x14c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 fad0 	bl	8001ed0 <ADC_Enable>
 8001930:	4603      	mov	r3, r0
 8001932:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 8087 	bne.w	8001a4a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a41      	ldr	r2, [pc, #260]	; (8001a5c <HAL_ADC_Start+0x154>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d105      	bne.n	8001966 <HAL_ADC_Start+0x5e>
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_ADC_Start+0x158>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d115      	bne.n	8001992 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d026      	beq.n	80019ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001988:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001990:	e01d      	b.n	80019ce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a2f      	ldr	r2, [pc, #188]	; (8001a60 <HAL_ADC_Start+0x158>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d004      	beq.n	80019b2 <HAL_ADC_Start+0xaa>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2b      	ldr	r2, [pc, #172]	; (8001a5c <HAL_ADC_Start+0x154>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10d      	bne.n	80019ce <HAL_ADC_Start+0xc6>
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_ADC_Start+0x158>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d007      	beq.n	80019ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f023 0206 	bic.w	r2, r3, #6
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019e6:	e002      	b.n	80019ee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f06f 0202 	mvn.w	r2, #2
 80019fe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a0e:	d113      	bne.n	8001a38 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a14:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_ADC_Start+0x154>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d105      	bne.n	8001a26 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_ADC_Start+0x158>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d108      	bne.n	8001a38 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	e00c      	b.n	8001a52 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	e003      	b.n	8001a52 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40012800 	.word	0x40012800
 8001a60:	40012400 	.word	0x40012400

08001a64 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Stop+0x1a>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e01a      	b.n	8001ab4 <HAL_ADC_Stop+0x50>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 fa7c 	bl	8001f84 <ADC_ConversionStop_Disable>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ad2:	f7ff fe13 	bl	80016fc <HAL_GetTick>
 8001ad6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	f043 0220 	orr.w	r2, r3, #32
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0d3      	b.n	8001ca6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d131      	bne.n	8001b70 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d12a      	bne.n	8001b70 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b1a:	e021      	b.n	8001b60 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b22:	d01d      	beq.n	8001b60 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <HAL_ADC_PollForConversion+0x7e>
 8001b2a:	f7ff fde7 	bl	80016fc <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d212      	bcs.n	8001b60 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10b      	bne.n	8001b60 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	f043 0204 	orr.w	r2, r3, #4
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e0a2      	b.n	8001ca6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0d6      	beq.n	8001b1c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b6e:	e070      	b.n	8001c52 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b70:	4b4f      	ldr	r3, [pc, #316]	; (8001cb0 <HAL_ADC_PollForConversion+0x1f4>)
 8001b72:	681c      	ldr	r4, [r3, #0]
 8001b74:	2002      	movs	r0, #2
 8001b76:	f001 fb1d 	bl	80031b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6919      	ldr	r1, [r3, #16]
 8001b86:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <HAL_ADC_PollForConversion+0x1f8>)
 8001b88:	400b      	ands	r3, r1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d118      	bne.n	8001bc0 <HAL_ADC_PollForConversion+0x104>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68d9      	ldr	r1, [r3, #12]
 8001b94:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <HAL_ADC_PollForConversion+0x1fc>)
 8001b96:	400b      	ands	r3, r1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d111      	bne.n	8001bc0 <HAL_ADC_PollForConversion+0x104>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6919      	ldr	r1, [r3, #16]
 8001ba2:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <HAL_ADC_PollForConversion+0x200>)
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d108      	bne.n	8001bbc <HAL_ADC_PollForConversion+0x100>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68d9      	ldr	r1, [r3, #12]
 8001bb0:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <HAL_ADC_PollForConversion+0x204>)
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_ADC_PollForConversion+0x100>
 8001bb8:	2314      	movs	r3, #20
 8001bba:	e020      	b.n	8001bfe <HAL_ADC_PollForConversion+0x142>
 8001bbc:	2329      	movs	r3, #41	; 0x29
 8001bbe:	e01e      	b.n	8001bfe <HAL_ADC_PollForConversion+0x142>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6919      	ldr	r1, [r3, #16]
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <HAL_ADC_PollForConversion+0x200>)
 8001bc8:	400b      	ands	r3, r1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_ADC_PollForConversion+0x120>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68d9      	ldr	r1, [r3, #12]
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_ADC_PollForConversion+0x204>)
 8001bd6:	400b      	ands	r3, r1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00d      	beq.n	8001bf8 <HAL_ADC_PollForConversion+0x13c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6919      	ldr	r1, [r3, #16]
 8001be2:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <HAL_ADC_PollForConversion+0x208>)
 8001be4:	400b      	ands	r3, r1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d108      	bne.n	8001bfc <HAL_ADC_PollForConversion+0x140>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68d9      	ldr	r1, [r3, #12]
 8001bf0:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <HAL_ADC_PollForConversion+0x208>)
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_ADC_PollForConversion+0x140>
 8001bf8:	2354      	movs	r3, #84	; 0x54
 8001bfa:	e000      	b.n	8001bfe <HAL_ADC_PollForConversion+0x142>
 8001bfc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c04:	e021      	b.n	8001c4a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d01a      	beq.n	8001c44 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <HAL_ADC_PollForConversion+0x168>
 8001c14:	f7ff fd72 	bl	80016fc <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d20f      	bcs.n	8001c44 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d90b      	bls.n	8001c44 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	f043 0204 	orr.w	r2, r3, #4
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e030      	b.n	8001ca6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3301      	adds	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d8d9      	bhi.n	8001c06 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f06f 0212 	mvn.w	r2, #18
 8001c5a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c72:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c76:	d115      	bne.n	8001ca4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d111      	bne.n	8001ca4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd90      	pop	{r4, r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	24924924 	.word	0x24924924
 8001cb8:	00924924 	.word	0x00924924
 8001cbc:	12492492 	.word	0x12492492
 8001cc0:	00492492 	.word	0x00492492
 8001cc4:	00249249 	.word	0x00249249

08001cc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x20>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e0dc      	b.n	8001eba <HAL_ADC_ConfigChannel+0x1da>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b06      	cmp	r3, #6
 8001d0e:	d81c      	bhi.n	8001d4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b05      	subs	r3, #5
 8001d22:	221f      	movs	r2, #31
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	4019      	ands	r1, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	3b05      	subs	r3, #5
 8001d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	635a      	str	r2, [r3, #52]	; 0x34
 8001d48:	e03c      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b0c      	cmp	r3, #12
 8001d50:	d81c      	bhi.n	8001d8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	3b23      	subs	r3, #35	; 0x23
 8001d64:	221f      	movs	r2, #31
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	4019      	ands	r1, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b23      	subs	r3, #35	; 0x23
 8001d7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
 8001d8a:	e01b      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b41      	subs	r3, #65	; 0x41
 8001d9e:	221f      	movs	r2, #31
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	4019      	ands	r1, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	3b41      	subs	r3, #65	; 0x41
 8001db8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b09      	cmp	r3, #9
 8001dca:	d91c      	bls.n	8001e06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68d9      	ldr	r1, [r3, #12]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b1e      	subs	r3, #30
 8001dde:	2207      	movs	r2, #7
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4019      	ands	r1, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6898      	ldr	r0, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	3b1e      	subs	r3, #30
 8001df8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	e019      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6919      	ldr	r1, [r3, #16]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	2207      	movs	r2, #7
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4019      	ands	r1, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6898      	ldr	r0, [r3, #8]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d003      	beq.n	8001e4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e46:	2b11      	cmp	r3, #17
 8001e48:	d132      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ec4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d125      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d126      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d11a      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_ADC_ConfigChannel+0x1ec>)
 8001e80:	fba2 2303 	umull	r2, r3, r2, r3
 8001e84:	0c9a      	lsrs	r2, r3, #18
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e90:	e002      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f9      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x1b2>
 8001e9e:	e007      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	f043 0220 	orr.w	r2, r3, #32
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40012400 	.word	0x40012400
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	431bde83 	.word	0x431bde83

08001ed0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d040      	beq.n	8001f70 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <ADC_Enable+0xac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1f      	ldr	r2, [pc, #124]	; (8001f80 <ADC_Enable+0xb0>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	0c9b      	lsrs	r3, r3, #18
 8001f0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f0c:	e002      	b.n	8001f14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f1a:	f7ff fbef 	bl	80016fc <HAL_GetTick>
 8001f1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f20:	e01f      	b.n	8001f62 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f22:	f7ff fbeb 	bl	80016fc <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d918      	bls.n	8001f62 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d011      	beq.n	8001f62 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	f043 0210 	orr.w	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e007      	b.n	8001f72 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d1d8      	bne.n	8001f22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000004 	.word	0x20000004
 8001f80:	431bde83 	.word	0x431bde83

08001f84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d12e      	bne.n	8001ffc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fae:	f7ff fba5 	bl	80016fc <HAL_GetTick>
 8001fb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fb4:	e01b      	b.n	8001fee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fb6:	f7ff fba1 	bl	80016fc <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d914      	bls.n	8001fee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10d      	bne.n	8001fee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	f043 0210 	orr.w	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e007      	b.n	8001ffe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d0dc      	beq.n	8001fb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4906      	ldr	r1, [pc, #24]	; (80020a0 <__NVIC_EnableIRQ+0x34>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	e000e100 	.word	0xe000e100

080020a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db0a      	blt.n	80020ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	490c      	ldr	r1, [pc, #48]	; (80020f0 <__NVIC_SetPriority+0x4c>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	440b      	add	r3, r1
 80020c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020cc:	e00a      	b.n	80020e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4908      	ldr	r1, [pc, #32]	; (80020f4 <__NVIC_SetPriority+0x50>)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	3b04      	subs	r3, #4
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	440b      	add	r3, r1
 80020e2:	761a      	strb	r2, [r3, #24]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000e100 	.word	0xe000e100
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f1c3 0307 	rsb	r3, r3, #7
 8002112:	2b04      	cmp	r3, #4
 8002114:	bf28      	it	cs
 8002116:	2304      	movcs	r3, #4
 8002118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3304      	adds	r3, #4
 800211e:	2b06      	cmp	r3, #6
 8002120:	d902      	bls.n	8002128 <NVIC_EncodePriority+0x30>
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3b03      	subs	r3, #3
 8002126:	e000      	b.n	800212a <NVIC_EncodePriority+0x32>
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	401a      	ands	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43d9      	mvns	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	4313      	orrs	r3, r2
         );
}
 8002152:	4618      	mov	r0, r3
 8002154:	3724      	adds	r7, #36	; 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800216c:	d301      	bcc.n	8002172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216e:	2301      	movs	r3, #1
 8002170:	e00f      	b.n	8002192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <SysTick_Config+0x40>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217a:	210f      	movs	r1, #15
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f7ff ff90 	bl	80020a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <SysTick_Config+0x40>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <SysTick_Config+0x40>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff2d 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c8:	f7ff ff42 	bl	8002050 <__NVIC_GetPriorityGrouping>
 80021cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	6978      	ldr	r0, [r7, #20]
 80021d4:	f7ff ff90 	bl	80020f8 <NVIC_EncodePriority>
 80021d8:	4602      	mov	r2, r0
 80021da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff5f 	bl	80020a4 <__NVIC_SetPriority>
}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff35 	bl	800206c <__NVIC_EnableIRQ>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ffa2 	bl	800215c <SysTick_Config>
 8002218:	4603      	mov	r3, r0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e043      	b.n	80022c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <HAL_DMA_Init+0xa8>)
 8002242:	4413      	add	r3, r2
 8002244:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <HAL_DMA_Init+0xac>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	009a      	lsls	r2, r3, #2
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <HAL_DMA_Init+0xb0>)
 8002256:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800226e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002272:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800227c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	bffdfff8 	.word	0xbffdfff8
 80022d0:	cccccccd 	.word	0xcccccccd
 80022d4:	40020000 	.word	0x40020000

080022d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	2204      	movs	r2, #4
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d04f      	beq.n	80023a0 <HAL_DMA_IRQHandler+0xc8>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d04a      	beq.n	80023a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0204 	bic.w	r2, r2, #4
 8002326:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a66      	ldr	r2, [pc, #408]	; (80024c8 <HAL_DMA_IRQHandler+0x1f0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d029      	beq.n	8002386 <HAL_DMA_IRQHandler+0xae>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a65      	ldr	r2, [pc, #404]	; (80024cc <HAL_DMA_IRQHandler+0x1f4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d022      	beq.n	8002382 <HAL_DMA_IRQHandler+0xaa>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a63      	ldr	r2, [pc, #396]	; (80024d0 <HAL_DMA_IRQHandler+0x1f8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01a      	beq.n	800237c <HAL_DMA_IRQHandler+0xa4>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a62      	ldr	r2, [pc, #392]	; (80024d4 <HAL_DMA_IRQHandler+0x1fc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d012      	beq.n	8002376 <HAL_DMA_IRQHandler+0x9e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a60      	ldr	r2, [pc, #384]	; (80024d8 <HAL_DMA_IRQHandler+0x200>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00a      	beq.n	8002370 <HAL_DMA_IRQHandler+0x98>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a5f      	ldr	r2, [pc, #380]	; (80024dc <HAL_DMA_IRQHandler+0x204>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d102      	bne.n	800236a <HAL_DMA_IRQHandler+0x92>
 8002364:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002368:	e00e      	b.n	8002388 <HAL_DMA_IRQHandler+0xb0>
 800236a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800236e:	e00b      	b.n	8002388 <HAL_DMA_IRQHandler+0xb0>
 8002370:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002374:	e008      	b.n	8002388 <HAL_DMA_IRQHandler+0xb0>
 8002376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800237a:	e005      	b.n	8002388 <HAL_DMA_IRQHandler+0xb0>
 800237c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002380:	e002      	b.n	8002388 <HAL_DMA_IRQHandler+0xb0>
 8002382:	2340      	movs	r3, #64	; 0x40
 8002384:	e000      	b.n	8002388 <HAL_DMA_IRQHandler+0xb0>
 8002386:	2304      	movs	r3, #4
 8002388:	4a55      	ldr	r2, [pc, #340]	; (80024e0 <HAL_DMA_IRQHandler+0x208>)
 800238a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 8094 	beq.w	80024be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800239e:	e08e      	b.n	80024be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	2202      	movs	r2, #2
 80023a6:	409a      	lsls	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d056      	beq.n	800245e <HAL_DMA_IRQHandler+0x186>
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d051      	beq.n	800245e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 020a 	bic.w	r2, r2, #10
 80023d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a38      	ldr	r2, [pc, #224]	; (80024c8 <HAL_DMA_IRQHandler+0x1f0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d029      	beq.n	800243e <HAL_DMA_IRQHandler+0x166>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a37      	ldr	r2, [pc, #220]	; (80024cc <HAL_DMA_IRQHandler+0x1f4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d022      	beq.n	800243a <HAL_DMA_IRQHandler+0x162>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a35      	ldr	r2, [pc, #212]	; (80024d0 <HAL_DMA_IRQHandler+0x1f8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01a      	beq.n	8002434 <HAL_DMA_IRQHandler+0x15c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a34      	ldr	r2, [pc, #208]	; (80024d4 <HAL_DMA_IRQHandler+0x1fc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d012      	beq.n	800242e <HAL_DMA_IRQHandler+0x156>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a32      	ldr	r2, [pc, #200]	; (80024d8 <HAL_DMA_IRQHandler+0x200>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00a      	beq.n	8002428 <HAL_DMA_IRQHandler+0x150>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a31      	ldr	r2, [pc, #196]	; (80024dc <HAL_DMA_IRQHandler+0x204>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d102      	bne.n	8002422 <HAL_DMA_IRQHandler+0x14a>
 800241c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002420:	e00e      	b.n	8002440 <HAL_DMA_IRQHandler+0x168>
 8002422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002426:	e00b      	b.n	8002440 <HAL_DMA_IRQHandler+0x168>
 8002428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242c:	e008      	b.n	8002440 <HAL_DMA_IRQHandler+0x168>
 800242e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002432:	e005      	b.n	8002440 <HAL_DMA_IRQHandler+0x168>
 8002434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002438:	e002      	b.n	8002440 <HAL_DMA_IRQHandler+0x168>
 800243a:	2320      	movs	r3, #32
 800243c:	e000      	b.n	8002440 <HAL_DMA_IRQHandler+0x168>
 800243e:	2302      	movs	r3, #2
 8002440:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <HAL_DMA_IRQHandler+0x208>)
 8002442:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	2b00      	cmp	r3, #0
 8002452:	d034      	beq.n	80024be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800245c:	e02f      	b.n	80024be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2208      	movs	r2, #8
 8002464:	409a      	lsls	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d028      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x1e8>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d023      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 020e 	bic.w	r2, r2, #14
 8002486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f202 	lsl.w	r2, r1, r2
 8002496:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
    }
  }
  return;
 80024be:	bf00      	nop
 80024c0:	bf00      	nop
}
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40020008 	.word	0x40020008
 80024cc:	4002001c 	.word	0x4002001c
 80024d0:	40020030 	.word	0x40020030
 80024d4:	40020044 	.word	0x40020044
 80024d8:	40020058 	.word	0x40020058
 80024dc:	4002006c 	.word	0x4002006c
 80024e0:	40020000 	.word	0x40020000

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b08b      	sub	sp, #44	; 0x2c
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f6:	e161      	b.n	80027bc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024f8:	2201      	movs	r2, #1
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	429a      	cmp	r2, r3
 8002512:	f040 8150 	bne.w	80027b6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4a97      	ldr	r2, [pc, #604]	; (8002778 <HAL_GPIO_Init+0x294>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d05e      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 8002520:	4a95      	ldr	r2, [pc, #596]	; (8002778 <HAL_GPIO_Init+0x294>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d875      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 8002526:	4a95      	ldr	r2, [pc, #596]	; (800277c <HAL_GPIO_Init+0x298>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d058      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 800252c:	4a93      	ldr	r2, [pc, #588]	; (800277c <HAL_GPIO_Init+0x298>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d86f      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 8002532:	4a93      	ldr	r2, [pc, #588]	; (8002780 <HAL_GPIO_Init+0x29c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d052      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 8002538:	4a91      	ldr	r2, [pc, #580]	; (8002780 <HAL_GPIO_Init+0x29c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d869      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 800253e:	4a91      	ldr	r2, [pc, #580]	; (8002784 <HAL_GPIO_Init+0x2a0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d04c      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 8002544:	4a8f      	ldr	r2, [pc, #572]	; (8002784 <HAL_GPIO_Init+0x2a0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d863      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 800254a:	4a8f      	ldr	r2, [pc, #572]	; (8002788 <HAL_GPIO_Init+0x2a4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d046      	beq.n	80025de <HAL_GPIO_Init+0xfa>
 8002550:	4a8d      	ldr	r2, [pc, #564]	; (8002788 <HAL_GPIO_Init+0x2a4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d85d      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 8002556:	2b12      	cmp	r3, #18
 8002558:	d82a      	bhi.n	80025b0 <HAL_GPIO_Init+0xcc>
 800255a:	2b12      	cmp	r3, #18
 800255c:	d859      	bhi.n	8002612 <HAL_GPIO_Init+0x12e>
 800255e:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <HAL_GPIO_Init+0x80>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	080025df 	.word	0x080025df
 8002568:	080025b9 	.word	0x080025b9
 800256c:	080025cb 	.word	0x080025cb
 8002570:	0800260d 	.word	0x0800260d
 8002574:	08002613 	.word	0x08002613
 8002578:	08002613 	.word	0x08002613
 800257c:	08002613 	.word	0x08002613
 8002580:	08002613 	.word	0x08002613
 8002584:	08002613 	.word	0x08002613
 8002588:	08002613 	.word	0x08002613
 800258c:	08002613 	.word	0x08002613
 8002590:	08002613 	.word	0x08002613
 8002594:	08002613 	.word	0x08002613
 8002598:	08002613 	.word	0x08002613
 800259c:	08002613 	.word	0x08002613
 80025a0:	08002613 	.word	0x08002613
 80025a4:	08002613 	.word	0x08002613
 80025a8:	080025c1 	.word	0x080025c1
 80025ac:	080025d5 	.word	0x080025d5
 80025b0:	4a76      	ldr	r2, [pc, #472]	; (800278c <HAL_GPIO_Init+0x2a8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025b6:	e02c      	b.n	8002612 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	623b      	str	r3, [r7, #32]
          break;
 80025be:	e029      	b.n	8002614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	3304      	adds	r3, #4
 80025c6:	623b      	str	r3, [r7, #32]
          break;
 80025c8:	e024      	b.n	8002614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	3308      	adds	r3, #8
 80025d0:	623b      	str	r3, [r7, #32]
          break;
 80025d2:	e01f      	b.n	8002614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	330c      	adds	r3, #12
 80025da:	623b      	str	r3, [r7, #32]
          break;
 80025dc:	e01a      	b.n	8002614 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025e6:	2304      	movs	r3, #4
 80025e8:	623b      	str	r3, [r7, #32]
          break;
 80025ea:	e013      	b.n	8002614 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d105      	bne.n	8002600 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025f4:	2308      	movs	r3, #8
 80025f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	611a      	str	r2, [r3, #16]
          break;
 80025fe:	e009      	b.n	8002614 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002600:	2308      	movs	r3, #8
 8002602:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	615a      	str	r2, [r3, #20]
          break;
 800260a:	e003      	b.n	8002614 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800260c:	2300      	movs	r3, #0
 800260e:	623b      	str	r3, [r7, #32]
          break;
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x130>
          break;
 8002612:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2bff      	cmp	r3, #255	; 0xff
 8002618:	d801      	bhi.n	800261e <HAL_GPIO_Init+0x13a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	e001      	b.n	8002622 <HAL_GPIO_Init+0x13e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3304      	adds	r3, #4
 8002622:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2bff      	cmp	r3, #255	; 0xff
 8002628:	d802      	bhi.n	8002630 <HAL_GPIO_Init+0x14c>
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	e002      	b.n	8002636 <HAL_GPIO_Init+0x152>
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	3b08      	subs	r3, #8
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	210f      	movs	r1, #15
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	401a      	ands	r2, r3
 8002648:	6a39      	ldr	r1, [r7, #32]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	431a      	orrs	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80a9 	beq.w	80027b6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002664:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <HAL_GPIO_Init+0x2ac>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	4a49      	ldr	r2, [pc, #292]	; (8002790 <HAL_GPIO_Init+0x2ac>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6193      	str	r3, [r2, #24]
 8002670:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_GPIO_Init+0x2ac>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800267c:	4a45      	ldr	r2, [pc, #276]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002688:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	220f      	movs	r2, #15
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a3d      	ldr	r2, [pc, #244]	; (8002798 <HAL_GPIO_Init+0x2b4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00d      	beq.n	80026c4 <HAL_GPIO_Init+0x1e0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a3c      	ldr	r2, [pc, #240]	; (800279c <HAL_GPIO_Init+0x2b8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d007      	beq.n	80026c0 <HAL_GPIO_Init+0x1dc>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a3b      	ldr	r2, [pc, #236]	; (80027a0 <HAL_GPIO_Init+0x2bc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d101      	bne.n	80026bc <HAL_GPIO_Init+0x1d8>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e004      	b.n	80026c6 <HAL_GPIO_Init+0x1e2>
 80026bc:	2303      	movs	r3, #3
 80026be:	e002      	b.n	80026c6 <HAL_GPIO_Init+0x1e2>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_GPIO_Init+0x1e2>
 80026c4:	2300      	movs	r3, #0
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	f002 0203 	and.w	r2, r2, #3
 80026cc:	0092      	lsls	r2, r2, #2
 80026ce:	4093      	lsls	r3, r2
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026d6:	492f      	ldr	r1, [pc, #188]	; (8002794 <HAL_GPIO_Init+0x2b0>)
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3302      	adds	r3, #2
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026f0:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	492b      	ldr	r1, [pc, #172]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026fe:	4b29      	ldr	r3, [pc, #164]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	43db      	mvns	r3, r3
 8002706:	4927      	ldr	r1, [pc, #156]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 8002708:	4013      	ands	r3, r2
 800270a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002718:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	4921      	ldr	r1, [pc, #132]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002726:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	43db      	mvns	r3, r3
 800272e:	491d      	ldr	r1, [pc, #116]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 8002730:	4013      	ands	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002740:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	4917      	ldr	r1, [pc, #92]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	43db      	mvns	r3, r3
 8002756:	4913      	ldr	r1, [pc, #76]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 8002758:	4013      	ands	r3, r2
 800275a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01f      	beq.n	80027a8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	490d      	ldr	r1, [pc, #52]	; (80027a4 <HAL_GPIO_Init+0x2c0>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	60cb      	str	r3, [r1, #12]
 8002774:	e01f      	b.n	80027b6 <HAL_GPIO_Init+0x2d2>
 8002776:	bf00      	nop
 8002778:	10320000 	.word	0x10320000
 800277c:	10310000 	.word	0x10310000
 8002780:	10220000 	.word	0x10220000
 8002784:	10210000 	.word	0x10210000
 8002788:	10120000 	.word	0x10120000
 800278c:	10110000 	.word	0x10110000
 8002790:	40021000 	.word	0x40021000
 8002794:	40010000 	.word	0x40010000
 8002798:	40010800 	.word	0x40010800
 800279c:	40010c00 	.word	0x40010c00
 80027a0:	40011000 	.word	0x40011000
 80027a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_GPIO_Init+0x2f4>)
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	4909      	ldr	r1, [pc, #36]	; (80027d8 <HAL_GPIO_Init+0x2f4>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	3301      	adds	r3, #1
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	fa22 f303 	lsr.w	r3, r2, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f47f ae96 	bne.w	80024f8 <HAL_GPIO_Init+0x14>
  }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	372c      	adds	r7, #44	; 0x2c
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	40010400 	.word	0x40010400

080027dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	887b      	ldrh	r3, [r7, #2]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	e001      	b.n	80027fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	807b      	strh	r3, [r7, #2]
 8002816:	4613      	mov	r3, r2
 8002818:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800281a:	787b      	ldrb	r3, [r7, #1]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002820:	887a      	ldrh	r2, [r7, #2]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002826:	e003      	b.n	8002830 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	041a      	lsls	r2, r3, #16
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	611a      	str	r2, [r3, #16]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
	...

0800283c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e272      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8087 	beq.w	800296a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800285c:	4b92      	ldr	r3, [pc, #584]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b04      	cmp	r3, #4
 8002866:	d00c      	beq.n	8002882 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002868:	4b8f      	ldr	r3, [pc, #572]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d112      	bne.n	800289a <HAL_RCC_OscConfig+0x5e>
 8002874:	4b8c      	ldr	r3, [pc, #560]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002880:	d10b      	bne.n	800289a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002882:	4b89      	ldr	r3, [pc, #548]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d06c      	beq.n	8002968 <HAL_RCC_OscConfig+0x12c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d168      	bne.n	8002968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e24c      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x76>
 80028a4:	4b80      	ldr	r3, [pc, #512]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a7f      	ldr	r2, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e02e      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x98>
 80028ba:	4b7b      	ldr	r3, [pc, #492]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7a      	ldr	r2, [pc, #488]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b78      	ldr	r3, [pc, #480]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a77      	ldr	r2, [pc, #476]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e01d      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0xbc>
 80028de:	4b72      	ldr	r3, [pc, #456]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a71      	ldr	r2, [pc, #452]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b6f      	ldr	r3, [pc, #444]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a6e      	ldr	r2, [pc, #440]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0xd4>
 80028f8:	4b6b      	ldr	r3, [pc, #428]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6a      	ldr	r2, [pc, #424]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800290a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fe fef0 	bl	80016fc <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe feec 	bl	80016fc <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e200      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0xe4>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe fedc 	bl	80016fc <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7fe fed8 	bl	80016fc <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e1ec      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	4b53      	ldr	r3, [pc, #332]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x10c>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d063      	beq.n	8002a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002976:	4b4c      	ldr	r3, [pc, #304]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002982:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b08      	cmp	r3, #8
 800298c:	d11c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x18c>
 800298e:	4b46      	ldr	r3, [pc, #280]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d116      	bne.n	80029c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299a:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_RCC_OscConfig+0x176>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e1c0      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4939      	ldr	r1, [pc, #228]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	e03a      	b.n	8002a3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7fe fe91 	bl	80016fc <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029de:	f7fe fe8d 	bl	80016fc <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1a1      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4927      	ldr	r1, [pc, #156]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
 8002a10:	e015      	b.n	8002a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a12:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_RCC_OscConfig+0x270>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe fe70 	bl	80016fc <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a20:	f7fe fe6c 	bl	80016fc <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e180      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d03a      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d019      	beq.n	8002a86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a58:	f7fe fe50 	bl	80016fc <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a60:	f7fe fe4c 	bl	80016fc <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e160      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f000 fac4 	bl	800300c <RCC_Delay>
 8002a84:	e01c      	b.n	8002ac0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <HAL_RCC_OscConfig+0x274>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fe36 	bl	80016fc <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a92:	e00f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a94:	f7fe fe32 	bl	80016fc <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d908      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e146      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	42420000 	.word	0x42420000
 8002ab0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b92      	ldr	r3, [pc, #584]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e9      	bne.n	8002a94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a6 	beq.w	8002c1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10d      	bne.n	8002afa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4a87      	ldr	r2, [pc, #540]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	61d3      	str	r3, [r2, #28]
 8002aea:	4b85      	ldr	r3, [pc, #532]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	4b82      	ldr	r3, [pc, #520]	; (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d118      	bne.n	8002b38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b06:	4b7f      	ldr	r3, [pc, #508]	; (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7e      	ldr	r2, [pc, #504]	; (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b12:	f7fe fdf3 	bl	80016fc <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1a:	f7fe fdef 	bl	80016fc <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b64      	cmp	r3, #100	; 0x64
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e103      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b75      	ldr	r3, [pc, #468]	; (8002d04 <HAL_RCC_OscConfig+0x4c8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x312>
 8002b40:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a6e      	ldr	r2, [pc, #440]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6213      	str	r3, [r2, #32]
 8002b4c:	e02d      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x334>
 8002b56:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a69      	ldr	r2, [pc, #420]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	4b67      	ldr	r3, [pc, #412]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a66      	ldr	r2, [pc, #408]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	6213      	str	r3, [r2, #32]
 8002b6e:	e01c      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x356>
 8002b78:	4b61      	ldr	r3, [pc, #388]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4a60      	ldr	r2, [pc, #384]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	6213      	str	r3, [r2, #32]
 8002b84:	4b5e      	ldr	r3, [pc, #376]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4a5d      	ldr	r2, [pc, #372]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6213      	str	r3, [r2, #32]
 8002b90:	e00b      	b.n	8002baa <HAL_RCC_OscConfig+0x36e>
 8002b92:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4a5a      	ldr	r2, [pc, #360]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6213      	str	r3, [r2, #32]
 8002b9e:	4b58      	ldr	r3, [pc, #352]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a57      	ldr	r2, [pc, #348]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d015      	beq.n	8002bde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fda3 	bl	80016fc <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fe fd9f 	bl	80016fc <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e0b1      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ee      	beq.n	8002bba <HAL_RCC_OscConfig+0x37e>
 8002bdc:	e014      	b.n	8002c08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7fe fd8d 	bl	80016fc <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7fe fd89 	bl	80016fc <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e09b      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfc:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ee      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0e:	4b3c      	ldr	r3, [pc, #240]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4a3b      	ldr	r2, [pc, #236]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8087 	beq.w	8002d32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c24:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d061      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d146      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c38:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <HAL_RCC_OscConfig+0x4cc>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fd5d 	bl	80016fc <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c46:	f7fe fd59 	bl	80016fc <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e06d      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f0      	bne.n	8002c46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6c:	d108      	bne.n	8002c80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	4921      	ldr	r1, [pc, #132]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c80:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a19      	ldr	r1, [r3, #32]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	430b      	orrs	r3, r1
 8002c92:	491b      	ldr	r1, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x4cc>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fd2d 	bl	80016fc <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7fe fd29 	bl	80016fc <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e03d      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x46a>
 8002cc4:	e035      	b.n	8002d32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_OscConfig+0x4cc>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fd16 	bl	80016fc <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe fd12 	bl	80016fc <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e026      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x498>
 8002cf2:	e01e      	b.n	8002d32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e019      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40007000 	.word	0x40007000
 8002d08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_OscConfig+0x500>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000

08002d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0d0      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d910      	bls.n	8002d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 0207 	bic.w	r2, r3, #7
 8002d6a:	4965      	ldr	r1, [pc, #404]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b63      	ldr	r3, [pc, #396]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0b8      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d9c:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a58      	ldr	r2, [pc, #352]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db4:	4b53      	ldr	r3, [pc, #332]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a52      	ldr	r2, [pc, #328]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc0:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	494d      	ldr	r1, [pc, #308]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d040      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d107      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d115      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e07f      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e073      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e06b      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1e:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f023 0203 	bic.w	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4936      	ldr	r1, [pc, #216]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e30:	f7fe fc64 	bl	80016fc <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e38:	f7fe fc60 	bl	80016fc <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e053      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 020c 	and.w	r2, r3, #12
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d1eb      	bne.n	8002e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e60:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d210      	bcs.n	8002e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 0207 	bic.w	r2, r3, #7
 8002e76:	4922      	ldr	r1, [pc, #136]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e032      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4916      	ldr	r1, [pc, #88]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	490e      	ldr	r1, [pc, #56]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ece:	f000 f821 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	490a      	ldr	r1, [pc, #40]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee0:	5ccb      	ldrb	r3, [r1, r3]
 8002ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee6:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1cc>)
 8002ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <HAL_RCC_ClockConfig+0x1d0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe fbc2 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40022000 	.word	0x40022000
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08006db0 	.word	0x08006db0
 8002f0c:	20000004 	.word	0x20000004
 8002f10:	20000008 	.word	0x20000008

08002f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f14:	b490      	push	{r4, r7}
 8002f16:	b08a      	sub	sp, #40	; 0x28
 8002f18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f1a:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f1c:	1d3c      	adds	r4, r7, #4
 8002f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f24:	f240 2301 	movw	r3, #513	; 0x201
 8002f28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f3e:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d002      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x40>
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d003      	beq.n	8002f5a <HAL_RCC_GetSysClockFreq+0x46>
 8002f52:	e02b      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f54:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f56:	623b      	str	r3, [r7, #32]
      break;
 8002f58:	e02b      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	0c9b      	lsrs	r3, r3, #18
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3328      	adds	r3, #40	; 0x28
 8002f64:	443b      	add	r3, r7
 8002f66:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f6a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d012      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	0c5b      	lsrs	r3, r3, #17
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	3328      	adds	r3, #40	; 0x28
 8002f82:	443b      	add	r3, r7
 8002f84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f8e:	fb03 f202 	mul.w	r2, r3, r2
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9a:	e004      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa0:	fb02 f303 	mul.w	r3, r2, r3
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	623b      	str	r3, [r7, #32]
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fae:	623b      	str	r3, [r7, #32]
      break;
 8002fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3728      	adds	r7, #40	; 0x28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc90      	pop	{r4, r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	08006d90 	.word	0x08006d90
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	007a1200 	.word	0x007a1200
 8002fcc:	003d0900 	.word	0x003d0900

08002fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd4:	4b02      	ldr	r3, [pc, #8]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	20000004 	.word	0x20000004

08002fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fe8:	f7ff fff2 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	0adb      	lsrs	r3, r3, #11
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4903      	ldr	r1, [pc, #12]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	08006dc0 	.word	0x08006dc0

0800300c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <RCC_Delay+0x34>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <RCC_Delay+0x38>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	0a5b      	lsrs	r3, r3, #9
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003028:	bf00      	nop
  }
  while (Delay --);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1e5a      	subs	r2, r3, #1
 800302e:	60fa      	str	r2, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f9      	bne.n	8003028 <RCC_Delay+0x1c>
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	20000004 	.word	0x20000004
 8003044:	10624dd3 	.word	0x10624dd3

08003048 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d07d      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003064:	2300      	movs	r3, #0
 8003066:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003068:	4b4f      	ldr	r3, [pc, #316]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10d      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003074:	4b4c      	ldr	r3, [pc, #304]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	4a4b      	ldr	r2, [pc, #300]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307e:	61d3      	str	r3, [r2, #28]
 8003080:	4b49      	ldr	r3, [pc, #292]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308c:	2301      	movs	r3, #1
 800308e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	4b46      	ldr	r3, [pc, #280]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d118      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309c:	4b43      	ldr	r3, [pc, #268]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a42      	ldr	r2, [pc, #264]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a8:	f7fe fb28 	bl	80016fc <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ae:	e008      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b0:	f7fe fb24 	bl	80016fc <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e06d      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c2:	4b3a      	ldr	r3, [pc, #232]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030ce:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d02e      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d027      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030ec:	4b2e      	ldr	r3, [pc, #184]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030f6:	4b2e      	ldr	r3, [pc, #184]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030fc:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003102:	4a29      	ldr	r2, [pc, #164]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d014      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fe faf3 	bl	80016fc <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003118:	e00a      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311a:	f7fe faef 	bl	80016fc <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f241 3288 	movw	r2, #5000	; 0x1388
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e036      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003130:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0ee      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800313c:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4917      	ldr	r1, [pc, #92]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314a:	4313      	orrs	r3, r2
 800314c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d105      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003154:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800316c:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	490b      	ldr	r1, [pc, #44]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	4313      	orrs	r3, r2
 800317c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800318a:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	4904      	ldr	r1, [pc, #16]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40007000 	.word	0x40007000
 80031b0:	42420440 	.word	0x42420440

080031b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031b4:	b590      	push	{r4, r7, lr}
 80031b6:	b08d      	sub	sp, #52	; 0x34
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031bc:	4b58      	ldr	r3, [pc, #352]	; (8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80031be:	f107 040c 	add.w	r4, r7, #12
 80031c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031c8:	f240 2301 	movw	r3, #513	; 0x201
 80031cc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
 80031d2:	2300      	movs	r3, #0
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	2300      	movs	r3, #0
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b10      	cmp	r3, #16
 80031e6:	d00a      	beq.n	80031fe <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	f200 808e 	bhi.w	800330c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d049      	beq.n	800328a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d079      	beq.n	80032f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80031fc:	e086      	b.n	800330c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80031fe:	4b49      	ldr	r3, [pc, #292]	; (8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003204:	4b47      	ldr	r3, [pc, #284]	; (8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d07f      	beq.n	8003310 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	0c9b      	lsrs	r3, r3, #18
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	3330      	adds	r3, #48	; 0x30
 800321a:	443b      	add	r3, r7
 800321c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003220:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d017      	beq.n	800325c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800322c:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	0c5b      	lsrs	r3, r3, #17
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	3330      	adds	r3, #48	; 0x30
 8003238:	443b      	add	r3, r7
 800323a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800324a:	4a37      	ldr	r2, [pc, #220]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	fb02 f303 	mul.w	r3, r2, r3
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800325a:	e004      	b.n	8003266 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	4a33      	ldr	r2, [pc, #204]	; (800332c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003260:	fb02 f303 	mul.w	r3, r2, r3
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003266:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003272:	d102      	bne.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003278:	e04a      	b.n	8003310 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4a2c      	ldr	r2, [pc, #176]	; (8003330 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	085b      	lsrs	r3, r3, #1
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003288:	e042      	b.n	8003310 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800328a:	4b26      	ldr	r3, [pc, #152]	; (8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329a:	d108      	bne.n	80032ae <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80032a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ac:	e01f      	b.n	80032ee <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b8:	d109      	bne.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80032ba:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80032c6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80032cc:	e00f      	b.n	80032ee <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d8:	d11c      	bne.n	8003314 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80032da:	4b12      	ldr	r3, [pc, #72]	; (8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d016      	beq.n	8003314 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80032e6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032ec:	e012      	b.n	8003314 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80032ee:	e011      	b.n	8003314 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80032f0:	f7ff fe78 	bl	8002fe4 <HAL_RCC_GetPCLK2Freq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	0b9b      	lsrs	r3, r3, #14
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	3301      	adds	r3, #1
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800330a:	e004      	b.n	8003316 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800330c:	bf00      	nop
 800330e:	e002      	b.n	8003316 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003310:	bf00      	nop
 8003312:	e000      	b.n	8003316 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003314:	bf00      	nop
    }
  }
  return (frequency);
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003318:	4618      	mov	r0, r3
 800331a:	3734      	adds	r7, #52	; 0x34
 800331c:	46bd      	mov	sp, r7
 800331e:	bd90      	pop	{r4, r7, pc}
 8003320:	08006da0 	.word	0x08006da0
 8003324:	40021000 	.word	0x40021000
 8003328:	007a1200 	.word	0x007a1200
 800332c:	003d0900 	.word	0x003d0900
 8003330:	aaaaaaab 	.word	0xaaaaaaab

08003334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e041      	b.n	80033ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fd ffda 	bl	8001314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3304      	adds	r3, #4
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f000 faa4 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e041      	b.n	8003468 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d106      	bne.n	80033fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f839 	bl	8003470 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3304      	adds	r3, #4
 800340e:	4619      	mov	r1, r3
 8003410:	4610      	mov	r0, r2
 8003412:	f000 fa55 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
	...

08003484 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <HAL_TIM_PWM_Start+0x24>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	e022      	b.n	80034ee <HAL_TIM_PWM_Start+0x6a>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d109      	bne.n	80034c2 <HAL_TIM_PWM_Start+0x3e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	e015      	b.n	80034ee <HAL_TIM_PWM_Start+0x6a>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d109      	bne.n	80034dc <HAL_TIM_PWM_Start+0x58>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	bf14      	ite	ne
 80034d4:	2301      	movne	r3, #1
 80034d6:	2300      	moveq	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e008      	b.n	80034ee <HAL_TIM_PWM_Start+0x6a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e059      	b.n	80035aa <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d104      	bne.n	8003506 <HAL_TIM_PWM_Start+0x82>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003504:	e013      	b.n	800352e <HAL_TIM_PWM_Start+0xaa>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b04      	cmp	r3, #4
 800350a:	d104      	bne.n	8003516 <HAL_TIM_PWM_Start+0x92>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003514:	e00b      	b.n	800352e <HAL_TIM_PWM_Start+0xaa>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d104      	bne.n	8003526 <HAL_TIM_PWM_Start+0xa2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003524:	e003      	b.n	800352e <HAL_TIM_PWM_Start+0xaa>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2201      	movs	r2, #1
 8003534:	6839      	ldr	r1, [r7, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fc38 	bl	8003dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <HAL_TIM_PWM_Start+0x130>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d107      	bne.n	8003556 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a16      	ldr	r2, [pc, #88]	; (80035b4 <HAL_TIM_PWM_Start+0x130>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_TIM_PWM_Start+0xf0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003568:	d004      	beq.n	8003574 <HAL_TIM_PWM_Start+0xf0>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <HAL_TIM_PWM_Start+0x134>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d111      	bne.n	8003598 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b06      	cmp	r3, #6
 8003584:	d010      	beq.n	80035a8 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003596:	e007      	b.n	80035a8 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40000400 	.word	0x40000400

080035bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e0ac      	b.n	8003730 <HAL_TIM_PWM_ConfigChannel+0x174>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b0c      	cmp	r3, #12
 80035e2:	f200 809f 	bhi.w	8003724 <HAL_TIM_PWM_ConfigChannel+0x168>
 80035e6:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80035e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ec:	08003621 	.word	0x08003621
 80035f0:	08003725 	.word	0x08003725
 80035f4:	08003725 	.word	0x08003725
 80035f8:	08003725 	.word	0x08003725
 80035fc:	08003661 	.word	0x08003661
 8003600:	08003725 	.word	0x08003725
 8003604:	08003725 	.word	0x08003725
 8003608:	08003725 	.word	0x08003725
 800360c:	080036a3 	.word	0x080036a3
 8003610:	08003725 	.word	0x08003725
 8003614:	08003725 	.word	0x08003725
 8003618:	08003725 	.word	0x08003725
 800361c:	080036e3 	.word	0x080036e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	4618      	mov	r0, r3
 8003628:	f000 f9a2 	bl	8003970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0208 	orr.w	r2, r2, #8
 800363a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0204 	bic.w	r2, r2, #4
 800364a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6999      	ldr	r1, [r3, #24]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	619a      	str	r2, [r3, #24]
      break;
 800365e:	e062      	b.n	8003726 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f9e8 	bl	8003a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800367a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6999      	ldr	r1, [r3, #24]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	021a      	lsls	r2, r3, #8
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	619a      	str	r2, [r3, #24]
      break;
 80036a0:	e041      	b.n	8003726 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fa31 	bl	8003b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0208 	orr.w	r2, r2, #8
 80036bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0204 	bic.w	r2, r2, #4
 80036cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69d9      	ldr	r1, [r3, #28]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	61da      	str	r2, [r3, #28]
      break;
 80036e0:	e021      	b.n	8003726 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fa7b 	bl	8003be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69da      	ldr	r2, [r3, #28]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69da      	ldr	r2, [r3, #28]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69d9      	ldr	r1, [r3, #28]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	021a      	lsls	r2, r3, #8
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	61da      	str	r2, [r3, #28]
      break;
 8003722:	e000      	b.n	8003726 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_TIM_ConfigClockSource+0x18>
 800374c:	2302      	movs	r3, #2
 800374e:	e0b3      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x180>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800376e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003776:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003788:	d03e      	beq.n	8003808 <HAL_TIM_ConfigClockSource+0xd0>
 800378a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378e:	f200 8087 	bhi.w	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003796:	f000 8085 	beq.w	80038a4 <HAL_TIM_ConfigClockSource+0x16c>
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379e:	d87f      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037a0:	2b70      	cmp	r3, #112	; 0x70
 80037a2:	d01a      	beq.n	80037da <HAL_TIM_ConfigClockSource+0xa2>
 80037a4:	2b70      	cmp	r3, #112	; 0x70
 80037a6:	d87b      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037a8:	2b60      	cmp	r3, #96	; 0x60
 80037aa:	d050      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x116>
 80037ac:	2b60      	cmp	r3, #96	; 0x60
 80037ae:	d877      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037b0:	2b50      	cmp	r3, #80	; 0x50
 80037b2:	d03c      	beq.n	800382e <HAL_TIM_ConfigClockSource+0xf6>
 80037b4:	2b50      	cmp	r3, #80	; 0x50
 80037b6:	d873      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d058      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x136>
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d86f      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037c0:	2b30      	cmp	r3, #48	; 0x30
 80037c2:	d064      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x156>
 80037c4:	2b30      	cmp	r3, #48	; 0x30
 80037c6:	d86b      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d060      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x156>
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d867      	bhi.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d05c      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x156>
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d05a      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037d8:	e062      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6899      	ldr	r1, [r3, #8]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f000 fac0 	bl	8003d6e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	609a      	str	r2, [r3, #8]
      break;
 8003806:	e04e      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	6899      	ldr	r1, [r3, #8]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f000 faa9 	bl	8003d6e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800382a:	609a      	str	r2, [r3, #8]
      break;
 800382c:	e03b      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6859      	ldr	r1, [r3, #4]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	461a      	mov	r2, r3
 800383c:	f000 fa20 	bl	8003c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2150      	movs	r1, #80	; 0x50
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fa77 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 800384c:	e02b      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6859      	ldr	r1, [r3, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	461a      	mov	r2, r3
 800385c:	f000 fa3e 	bl	8003cdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2160      	movs	r1, #96	; 0x60
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fa67 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 800386c:	e01b      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	461a      	mov	r2, r3
 800387c:	f000 fa00 	bl	8003c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2140      	movs	r1, #64	; 0x40
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fa57 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 800388c:	e00b      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4619      	mov	r1, r3
 8003898:	4610      	mov	r0, r2
 800389a:	f000 fa4e 	bl	8003d3a <TIM_ITRx_SetConfig>
        break;
 800389e:	e002      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038a0:	bf00      	nop
 80038a2:	e000      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a25      	ldr	r2, [pc, #148]	; (8003968 <TIM_Base_SetConfig+0xa8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_Base_SetConfig+0x28>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0x28>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a22      	ldr	r2, [pc, #136]	; (800396c <TIM_Base_SetConfig+0xac>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d108      	bne.n	80038fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1a      	ldr	r2, [pc, #104]	; (8003968 <TIM_Base_SetConfig+0xa8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <TIM_Base_SetConfig+0x52>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d003      	beq.n	8003912 <TIM_Base_SetConfig+0x52>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a17      	ldr	r2, [pc, #92]	; (800396c <TIM_Base_SetConfig+0xac>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d108      	bne.n	8003924 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a07      	ldr	r2, [pc, #28]	; (8003968 <TIM_Base_SetConfig+0xa8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d103      	bne.n	8003958 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	615a      	str	r2, [r3, #20]
}
 800395e:	bf00      	nop
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40000400 	.word	0x40000400

08003970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0201 	bic.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 0302 	bic.w	r3, r3, #2
 80039b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <TIM_OC1_SetConfig+0xc8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d10c      	bne.n	80039e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f023 0308 	bic.w	r3, r3, #8
 80039d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <TIM_OC1_SetConfig+0xc8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d111      	bne.n	8003a12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	621a      	str	r2, [r3, #32]
}
 8003a2c:	bf00      	nop
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40012c00 	.word	0x40012c00

08003a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	f023 0210 	bic.w	r2, r3, #16
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0320 	bic.w	r3, r3, #32
 8003a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a1d      	ldr	r2, [pc, #116]	; (8003b0c <TIM_OC2_SetConfig+0xd0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d10d      	bne.n	8003ab8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <TIM_OC2_SetConfig+0xd0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d113      	bne.n	8003ae8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	40012c00 	.word	0x40012c00

08003b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1d      	ldr	r2, [pc, #116]	; (8003be0 <TIM_OC3_SetConfig+0xd0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10d      	bne.n	8003b8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <TIM_OC3_SetConfig+0xd0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d113      	bne.n	8003bba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	621a      	str	r2, [r3, #32]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40012c00 	.word	0x40012c00

08003be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	031b      	lsls	r3, r3, #12
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0f      	ldr	r2, [pc, #60]	; (8003c7c <TIM_OC4_SetConfig+0x98>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d109      	bne.n	8003c58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	019b      	lsls	r3, r3, #6
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	40012c00 	.word	0x40012c00

08003c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f023 0201 	bic.w	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f023 030a 	bic.w	r3, r3, #10
 8003cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f023 0210 	bic.w	r2, r3, #16
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	031b      	lsls	r3, r3, #12
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	621a      	str	r2, [r3, #32]
}
 8003d30:	bf00      	nop
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f043 0307 	orr.w	r3, r3, #7
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr

08003d6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	021a      	lsls	r2, r3, #8
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	609a      	str	r2, [r3, #8]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1a      	ldr	r2, [r3, #32]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	401a      	ands	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1a      	ldr	r2, [r3, #32]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e041      	b.n	8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d009      	beq.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e58:	d004      	beq.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a10      	ldr	r2, [pc, #64]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d10c      	bne.n	8003e7e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40000400 	.word	0x40000400

08003ea4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e03d      	b.n	8003f3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr
	...

08003f48 <__errno>:
 8003f48:	4b01      	ldr	r3, [pc, #4]	; (8003f50 <__errno+0x8>)
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	20000010 	.word	0x20000010

08003f54 <__libc_init_array>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	2600      	movs	r6, #0
 8003f58:	4d0c      	ldr	r5, [pc, #48]	; (8003f8c <__libc_init_array+0x38>)
 8003f5a:	4c0d      	ldr	r4, [pc, #52]	; (8003f90 <__libc_init_array+0x3c>)
 8003f5c:	1b64      	subs	r4, r4, r5
 8003f5e:	10a4      	asrs	r4, r4, #2
 8003f60:	42a6      	cmp	r6, r4
 8003f62:	d109      	bne.n	8003f78 <__libc_init_array+0x24>
 8003f64:	f002 fefc 	bl	8006d60 <_init>
 8003f68:	2600      	movs	r6, #0
 8003f6a:	4d0a      	ldr	r5, [pc, #40]	; (8003f94 <__libc_init_array+0x40>)
 8003f6c:	4c0a      	ldr	r4, [pc, #40]	; (8003f98 <__libc_init_array+0x44>)
 8003f6e:	1b64      	subs	r4, r4, r5
 8003f70:	10a4      	asrs	r4, r4, #2
 8003f72:	42a6      	cmp	r6, r4
 8003f74:	d105      	bne.n	8003f82 <__libc_init_array+0x2e>
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f7c:	4798      	blx	r3
 8003f7e:	3601      	adds	r6, #1
 8003f80:	e7ee      	b.n	8003f60 <__libc_init_array+0xc>
 8003f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f86:	4798      	blx	r3
 8003f88:	3601      	adds	r6, #1
 8003f8a:	e7f2      	b.n	8003f72 <__libc_init_array+0x1e>
 8003f8c:	080071a4 	.word	0x080071a4
 8003f90:	080071a4 	.word	0x080071a4
 8003f94:	080071a4 	.word	0x080071a4
 8003f98:	080071a8 	.word	0x080071a8

08003f9c <memset>:
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4402      	add	r2, r0
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d100      	bne.n	8003fa6 <memset+0xa>
 8003fa4:	4770      	bx	lr
 8003fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8003faa:	e7f9      	b.n	8003fa0 <memset+0x4>

08003fac <__cvt>:
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb2:	461f      	mov	r7, r3
 8003fb4:	bfbb      	ittet	lt
 8003fb6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003fba:	461f      	movlt	r7, r3
 8003fbc:	2300      	movge	r3, #0
 8003fbe:	232d      	movlt	r3, #45	; 0x2d
 8003fc0:	b088      	sub	sp, #32
 8003fc2:	4614      	mov	r4, r2
 8003fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003fc6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003fc8:	7013      	strb	r3, [r2, #0]
 8003fca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003fcc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003fd0:	f023 0820 	bic.w	r8, r3, #32
 8003fd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fd8:	d005      	beq.n	8003fe6 <__cvt+0x3a>
 8003fda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003fde:	d100      	bne.n	8003fe2 <__cvt+0x36>
 8003fe0:	3501      	adds	r5, #1
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e000      	b.n	8003fe8 <__cvt+0x3c>
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	aa07      	add	r2, sp, #28
 8003fea:	9204      	str	r2, [sp, #16]
 8003fec:	aa06      	add	r2, sp, #24
 8003fee:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003ff2:	e9cd 3500 	strd	r3, r5, [sp]
 8003ff6:	4622      	mov	r2, r4
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	f000 fce5 	bl	80049c8 <_dtoa_r>
 8003ffe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004002:	4606      	mov	r6, r0
 8004004:	d102      	bne.n	800400c <__cvt+0x60>
 8004006:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004008:	07db      	lsls	r3, r3, #31
 800400a:	d522      	bpl.n	8004052 <__cvt+0xa6>
 800400c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004010:	eb06 0905 	add.w	r9, r6, r5
 8004014:	d110      	bne.n	8004038 <__cvt+0x8c>
 8004016:	7833      	ldrb	r3, [r6, #0]
 8004018:	2b30      	cmp	r3, #48	; 0x30
 800401a:	d10a      	bne.n	8004032 <__cvt+0x86>
 800401c:	2200      	movs	r2, #0
 800401e:	2300      	movs	r3, #0
 8004020:	4620      	mov	r0, r4
 8004022:	4639      	mov	r1, r7
 8004024:	f7fc fcc0 	bl	80009a8 <__aeabi_dcmpeq>
 8004028:	b918      	cbnz	r0, 8004032 <__cvt+0x86>
 800402a:	f1c5 0501 	rsb	r5, r5, #1
 800402e:	f8ca 5000 	str.w	r5, [sl]
 8004032:	f8da 3000 	ldr.w	r3, [sl]
 8004036:	4499      	add	r9, r3
 8004038:	2200      	movs	r2, #0
 800403a:	2300      	movs	r3, #0
 800403c:	4620      	mov	r0, r4
 800403e:	4639      	mov	r1, r7
 8004040:	f7fc fcb2 	bl	80009a8 <__aeabi_dcmpeq>
 8004044:	b108      	cbz	r0, 800404a <__cvt+0x9e>
 8004046:	f8cd 901c 	str.w	r9, [sp, #28]
 800404a:	2230      	movs	r2, #48	; 0x30
 800404c:	9b07      	ldr	r3, [sp, #28]
 800404e:	454b      	cmp	r3, r9
 8004050:	d307      	bcc.n	8004062 <__cvt+0xb6>
 8004052:	4630      	mov	r0, r6
 8004054:	9b07      	ldr	r3, [sp, #28]
 8004056:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004058:	1b9b      	subs	r3, r3, r6
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	b008      	add	sp, #32
 800405e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004062:	1c59      	adds	r1, r3, #1
 8004064:	9107      	str	r1, [sp, #28]
 8004066:	701a      	strb	r2, [r3, #0]
 8004068:	e7f0      	b.n	800404c <__cvt+0xa0>

0800406a <__exponent>:
 800406a:	4603      	mov	r3, r0
 800406c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800406e:	2900      	cmp	r1, #0
 8004070:	f803 2b02 	strb.w	r2, [r3], #2
 8004074:	bfb6      	itet	lt
 8004076:	222d      	movlt	r2, #45	; 0x2d
 8004078:	222b      	movge	r2, #43	; 0x2b
 800407a:	4249      	neglt	r1, r1
 800407c:	2909      	cmp	r1, #9
 800407e:	7042      	strb	r2, [r0, #1]
 8004080:	dd2b      	ble.n	80040da <__exponent+0x70>
 8004082:	f10d 0407 	add.w	r4, sp, #7
 8004086:	46a4      	mov	ip, r4
 8004088:	270a      	movs	r7, #10
 800408a:	fb91 f6f7 	sdiv	r6, r1, r7
 800408e:	460a      	mov	r2, r1
 8004090:	46a6      	mov	lr, r4
 8004092:	fb07 1516 	mls	r5, r7, r6, r1
 8004096:	2a63      	cmp	r2, #99	; 0x63
 8004098:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800409c:	4631      	mov	r1, r6
 800409e:	f104 34ff 	add.w	r4, r4, #4294967295
 80040a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80040a6:	dcf0      	bgt.n	800408a <__exponent+0x20>
 80040a8:	3130      	adds	r1, #48	; 0x30
 80040aa:	f1ae 0502 	sub.w	r5, lr, #2
 80040ae:	f804 1c01 	strb.w	r1, [r4, #-1]
 80040b2:	4629      	mov	r1, r5
 80040b4:	1c44      	adds	r4, r0, #1
 80040b6:	4561      	cmp	r1, ip
 80040b8:	d30a      	bcc.n	80040d0 <__exponent+0x66>
 80040ba:	f10d 0209 	add.w	r2, sp, #9
 80040be:	eba2 020e 	sub.w	r2, r2, lr
 80040c2:	4565      	cmp	r5, ip
 80040c4:	bf88      	it	hi
 80040c6:	2200      	movhi	r2, #0
 80040c8:	4413      	add	r3, r2
 80040ca:	1a18      	subs	r0, r3, r0
 80040cc:	b003      	add	sp, #12
 80040ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040d4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80040d8:	e7ed      	b.n	80040b6 <__exponent+0x4c>
 80040da:	2330      	movs	r3, #48	; 0x30
 80040dc:	3130      	adds	r1, #48	; 0x30
 80040de:	7083      	strb	r3, [r0, #2]
 80040e0:	70c1      	strb	r1, [r0, #3]
 80040e2:	1d03      	adds	r3, r0, #4
 80040e4:	e7f1      	b.n	80040ca <__exponent+0x60>
	...

080040e8 <_printf_float>:
 80040e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ec:	b091      	sub	sp, #68	; 0x44
 80040ee:	460c      	mov	r4, r1
 80040f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80040f4:	4616      	mov	r6, r2
 80040f6:	461f      	mov	r7, r3
 80040f8:	4605      	mov	r5, r0
 80040fa:	f001 fa53 	bl	80055a4 <_localeconv_r>
 80040fe:	6803      	ldr	r3, [r0, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	9309      	str	r3, [sp, #36]	; 0x24
 8004104:	f7fc f824 	bl	8000150 <strlen>
 8004108:	2300      	movs	r3, #0
 800410a:	930e      	str	r3, [sp, #56]	; 0x38
 800410c:	f8d8 3000 	ldr.w	r3, [r8]
 8004110:	900a      	str	r0, [sp, #40]	; 0x28
 8004112:	3307      	adds	r3, #7
 8004114:	f023 0307 	bic.w	r3, r3, #7
 8004118:	f103 0208 	add.w	r2, r3, #8
 800411c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004120:	f8d4 b000 	ldr.w	fp, [r4]
 8004124:	f8c8 2000 	str.w	r2, [r8]
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004130:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004134:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004138:	930b      	str	r3, [sp, #44]	; 0x2c
 800413a:	f04f 32ff 	mov.w	r2, #4294967295
 800413e:	4640      	mov	r0, r8
 8004140:	4b9c      	ldr	r3, [pc, #624]	; (80043b4 <_printf_float+0x2cc>)
 8004142:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004144:	f7fc fc62 	bl	8000a0c <__aeabi_dcmpun>
 8004148:	bb70      	cbnz	r0, 80041a8 <_printf_float+0xc0>
 800414a:	f04f 32ff 	mov.w	r2, #4294967295
 800414e:	4640      	mov	r0, r8
 8004150:	4b98      	ldr	r3, [pc, #608]	; (80043b4 <_printf_float+0x2cc>)
 8004152:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004154:	f7fc fc3c 	bl	80009d0 <__aeabi_dcmple>
 8004158:	bb30      	cbnz	r0, 80041a8 <_printf_float+0xc0>
 800415a:	2200      	movs	r2, #0
 800415c:	2300      	movs	r3, #0
 800415e:	4640      	mov	r0, r8
 8004160:	4651      	mov	r1, sl
 8004162:	f7fc fc2b 	bl	80009bc <__aeabi_dcmplt>
 8004166:	b110      	cbz	r0, 800416e <_printf_float+0x86>
 8004168:	232d      	movs	r3, #45	; 0x2d
 800416a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800416e:	4b92      	ldr	r3, [pc, #584]	; (80043b8 <_printf_float+0x2d0>)
 8004170:	4892      	ldr	r0, [pc, #584]	; (80043bc <_printf_float+0x2d4>)
 8004172:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004176:	bf94      	ite	ls
 8004178:	4698      	movls	r8, r3
 800417a:	4680      	movhi	r8, r0
 800417c:	2303      	movs	r3, #3
 800417e:	f04f 0a00 	mov.w	sl, #0
 8004182:	6123      	str	r3, [r4, #16]
 8004184:	f02b 0304 	bic.w	r3, fp, #4
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	4633      	mov	r3, r6
 800418c:	4621      	mov	r1, r4
 800418e:	4628      	mov	r0, r5
 8004190:	9700      	str	r7, [sp, #0]
 8004192:	aa0f      	add	r2, sp, #60	; 0x3c
 8004194:	f000 f9d4 	bl	8004540 <_printf_common>
 8004198:	3001      	adds	r0, #1
 800419a:	f040 8090 	bne.w	80042be <_printf_float+0x1d6>
 800419e:	f04f 30ff 	mov.w	r0, #4294967295
 80041a2:	b011      	add	sp, #68	; 0x44
 80041a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a8:	4642      	mov	r2, r8
 80041aa:	4653      	mov	r3, sl
 80041ac:	4640      	mov	r0, r8
 80041ae:	4651      	mov	r1, sl
 80041b0:	f7fc fc2c 	bl	8000a0c <__aeabi_dcmpun>
 80041b4:	b148      	cbz	r0, 80041ca <_printf_float+0xe2>
 80041b6:	f1ba 0f00 	cmp.w	sl, #0
 80041ba:	bfb8      	it	lt
 80041bc:	232d      	movlt	r3, #45	; 0x2d
 80041be:	4880      	ldr	r0, [pc, #512]	; (80043c0 <_printf_float+0x2d8>)
 80041c0:	bfb8      	it	lt
 80041c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80041c6:	4b7f      	ldr	r3, [pc, #508]	; (80043c4 <_printf_float+0x2dc>)
 80041c8:	e7d3      	b.n	8004172 <_printf_float+0x8a>
 80041ca:	6863      	ldr	r3, [r4, #4]
 80041cc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	d142      	bne.n	800425a <_printf_float+0x172>
 80041d4:	2306      	movs	r3, #6
 80041d6:	6063      	str	r3, [r4, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	9206      	str	r2, [sp, #24]
 80041dc:	aa0e      	add	r2, sp, #56	; 0x38
 80041de:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80041e2:	aa0d      	add	r2, sp, #52	; 0x34
 80041e4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80041e8:	9203      	str	r2, [sp, #12]
 80041ea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80041ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80041f2:	6023      	str	r3, [r4, #0]
 80041f4:	6863      	ldr	r3, [r4, #4]
 80041f6:	4642      	mov	r2, r8
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	4628      	mov	r0, r5
 80041fc:	4653      	mov	r3, sl
 80041fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8004200:	f7ff fed4 	bl	8003fac <__cvt>
 8004204:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004206:	4680      	mov	r8, r0
 8004208:	2947      	cmp	r1, #71	; 0x47
 800420a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800420c:	d108      	bne.n	8004220 <_printf_float+0x138>
 800420e:	1cc8      	adds	r0, r1, #3
 8004210:	db02      	blt.n	8004218 <_printf_float+0x130>
 8004212:	6863      	ldr	r3, [r4, #4]
 8004214:	4299      	cmp	r1, r3
 8004216:	dd40      	ble.n	800429a <_printf_float+0x1b2>
 8004218:	f1a9 0902 	sub.w	r9, r9, #2
 800421c:	fa5f f989 	uxtb.w	r9, r9
 8004220:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004224:	d81f      	bhi.n	8004266 <_printf_float+0x17e>
 8004226:	464a      	mov	r2, r9
 8004228:	3901      	subs	r1, #1
 800422a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800422e:	910d      	str	r1, [sp, #52]	; 0x34
 8004230:	f7ff ff1b 	bl	800406a <__exponent>
 8004234:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004236:	4682      	mov	sl, r0
 8004238:	1813      	adds	r3, r2, r0
 800423a:	2a01      	cmp	r2, #1
 800423c:	6123      	str	r3, [r4, #16]
 800423e:	dc02      	bgt.n	8004246 <_printf_float+0x15e>
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	07d2      	lsls	r2, r2, #31
 8004244:	d501      	bpl.n	800424a <_printf_float+0x162>
 8004246:	3301      	adds	r3, #1
 8004248:	6123      	str	r3, [r4, #16]
 800424a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800424e:	2b00      	cmp	r3, #0
 8004250:	d09b      	beq.n	800418a <_printf_float+0xa2>
 8004252:	232d      	movs	r3, #45	; 0x2d
 8004254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004258:	e797      	b.n	800418a <_printf_float+0xa2>
 800425a:	2947      	cmp	r1, #71	; 0x47
 800425c:	d1bc      	bne.n	80041d8 <_printf_float+0xf0>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1ba      	bne.n	80041d8 <_printf_float+0xf0>
 8004262:	2301      	movs	r3, #1
 8004264:	e7b7      	b.n	80041d6 <_printf_float+0xee>
 8004266:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800426a:	d118      	bne.n	800429e <_printf_float+0x1b6>
 800426c:	2900      	cmp	r1, #0
 800426e:	6863      	ldr	r3, [r4, #4]
 8004270:	dd0b      	ble.n	800428a <_printf_float+0x1a2>
 8004272:	6121      	str	r1, [r4, #16]
 8004274:	b913      	cbnz	r3, 800427c <_printf_float+0x194>
 8004276:	6822      	ldr	r2, [r4, #0]
 8004278:	07d0      	lsls	r0, r2, #31
 800427a:	d502      	bpl.n	8004282 <_printf_float+0x19a>
 800427c:	3301      	adds	r3, #1
 800427e:	440b      	add	r3, r1
 8004280:	6123      	str	r3, [r4, #16]
 8004282:	f04f 0a00 	mov.w	sl, #0
 8004286:	65a1      	str	r1, [r4, #88]	; 0x58
 8004288:	e7df      	b.n	800424a <_printf_float+0x162>
 800428a:	b913      	cbnz	r3, 8004292 <_printf_float+0x1aa>
 800428c:	6822      	ldr	r2, [r4, #0]
 800428e:	07d2      	lsls	r2, r2, #31
 8004290:	d501      	bpl.n	8004296 <_printf_float+0x1ae>
 8004292:	3302      	adds	r3, #2
 8004294:	e7f4      	b.n	8004280 <_printf_float+0x198>
 8004296:	2301      	movs	r3, #1
 8004298:	e7f2      	b.n	8004280 <_printf_float+0x198>
 800429a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800429e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042a0:	4299      	cmp	r1, r3
 80042a2:	db05      	blt.n	80042b0 <_printf_float+0x1c8>
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	6121      	str	r1, [r4, #16]
 80042a8:	07d8      	lsls	r0, r3, #31
 80042aa:	d5ea      	bpl.n	8004282 <_printf_float+0x19a>
 80042ac:	1c4b      	adds	r3, r1, #1
 80042ae:	e7e7      	b.n	8004280 <_printf_float+0x198>
 80042b0:	2900      	cmp	r1, #0
 80042b2:	bfcc      	ite	gt
 80042b4:	2201      	movgt	r2, #1
 80042b6:	f1c1 0202 	rsble	r2, r1, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	e7e0      	b.n	8004280 <_printf_float+0x198>
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	055a      	lsls	r2, r3, #21
 80042c2:	d407      	bmi.n	80042d4 <_printf_float+0x1ec>
 80042c4:	6923      	ldr	r3, [r4, #16]
 80042c6:	4642      	mov	r2, r8
 80042c8:	4631      	mov	r1, r6
 80042ca:	4628      	mov	r0, r5
 80042cc:	47b8      	blx	r7
 80042ce:	3001      	adds	r0, #1
 80042d0:	d12b      	bne.n	800432a <_printf_float+0x242>
 80042d2:	e764      	b.n	800419e <_printf_float+0xb6>
 80042d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80042d8:	f240 80dd 	bls.w	8004496 <_printf_float+0x3ae>
 80042dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042e0:	2200      	movs	r2, #0
 80042e2:	2300      	movs	r3, #0
 80042e4:	f7fc fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d033      	beq.n	8004354 <_printf_float+0x26c>
 80042ec:	2301      	movs	r3, #1
 80042ee:	4631      	mov	r1, r6
 80042f0:	4628      	mov	r0, r5
 80042f2:	4a35      	ldr	r2, [pc, #212]	; (80043c8 <_printf_float+0x2e0>)
 80042f4:	47b8      	blx	r7
 80042f6:	3001      	adds	r0, #1
 80042f8:	f43f af51 	beq.w	800419e <_printf_float+0xb6>
 80042fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004300:	429a      	cmp	r2, r3
 8004302:	db02      	blt.n	800430a <_printf_float+0x222>
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	07d8      	lsls	r0, r3, #31
 8004308:	d50f      	bpl.n	800432a <_printf_float+0x242>
 800430a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800430e:	4631      	mov	r1, r6
 8004310:	4628      	mov	r0, r5
 8004312:	47b8      	blx	r7
 8004314:	3001      	adds	r0, #1
 8004316:	f43f af42 	beq.w	800419e <_printf_float+0xb6>
 800431a:	f04f 0800 	mov.w	r8, #0
 800431e:	f104 091a 	add.w	r9, r4, #26
 8004322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004324:	3b01      	subs	r3, #1
 8004326:	4543      	cmp	r3, r8
 8004328:	dc09      	bgt.n	800433e <_printf_float+0x256>
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	079b      	lsls	r3, r3, #30
 800432e:	f100 8102 	bmi.w	8004536 <_printf_float+0x44e>
 8004332:	68e0      	ldr	r0, [r4, #12]
 8004334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004336:	4298      	cmp	r0, r3
 8004338:	bfb8      	it	lt
 800433a:	4618      	movlt	r0, r3
 800433c:	e731      	b.n	80041a2 <_printf_float+0xba>
 800433e:	2301      	movs	r3, #1
 8004340:	464a      	mov	r2, r9
 8004342:	4631      	mov	r1, r6
 8004344:	4628      	mov	r0, r5
 8004346:	47b8      	blx	r7
 8004348:	3001      	adds	r0, #1
 800434a:	f43f af28 	beq.w	800419e <_printf_float+0xb6>
 800434e:	f108 0801 	add.w	r8, r8, #1
 8004352:	e7e6      	b.n	8004322 <_printf_float+0x23a>
 8004354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004356:	2b00      	cmp	r3, #0
 8004358:	dc38      	bgt.n	80043cc <_printf_float+0x2e4>
 800435a:	2301      	movs	r3, #1
 800435c:	4631      	mov	r1, r6
 800435e:	4628      	mov	r0, r5
 8004360:	4a19      	ldr	r2, [pc, #100]	; (80043c8 <_printf_float+0x2e0>)
 8004362:	47b8      	blx	r7
 8004364:	3001      	adds	r0, #1
 8004366:	f43f af1a 	beq.w	800419e <_printf_float+0xb6>
 800436a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800436e:	4313      	orrs	r3, r2
 8004370:	d102      	bne.n	8004378 <_printf_float+0x290>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	07d9      	lsls	r1, r3, #31
 8004376:	d5d8      	bpl.n	800432a <_printf_float+0x242>
 8004378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800437c:	4631      	mov	r1, r6
 800437e:	4628      	mov	r0, r5
 8004380:	47b8      	blx	r7
 8004382:	3001      	adds	r0, #1
 8004384:	f43f af0b 	beq.w	800419e <_printf_float+0xb6>
 8004388:	f04f 0900 	mov.w	r9, #0
 800438c:	f104 0a1a 	add.w	sl, r4, #26
 8004390:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004392:	425b      	negs	r3, r3
 8004394:	454b      	cmp	r3, r9
 8004396:	dc01      	bgt.n	800439c <_printf_float+0x2b4>
 8004398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800439a:	e794      	b.n	80042c6 <_printf_float+0x1de>
 800439c:	2301      	movs	r3, #1
 800439e:	4652      	mov	r2, sl
 80043a0:	4631      	mov	r1, r6
 80043a2:	4628      	mov	r0, r5
 80043a4:	47b8      	blx	r7
 80043a6:	3001      	adds	r0, #1
 80043a8:	f43f aef9 	beq.w	800419e <_printf_float+0xb6>
 80043ac:	f109 0901 	add.w	r9, r9, #1
 80043b0:	e7ee      	b.n	8004390 <_printf_float+0x2a8>
 80043b2:	bf00      	nop
 80043b4:	7fefffff 	.word	0x7fefffff
 80043b8:	08006dcc 	.word	0x08006dcc
 80043bc:	08006dd0 	.word	0x08006dd0
 80043c0:	08006dd8 	.word	0x08006dd8
 80043c4:	08006dd4 	.word	0x08006dd4
 80043c8:	08006ddc 	.word	0x08006ddc
 80043cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043d0:	429a      	cmp	r2, r3
 80043d2:	bfa8      	it	ge
 80043d4:	461a      	movge	r2, r3
 80043d6:	2a00      	cmp	r2, #0
 80043d8:	4691      	mov	r9, r2
 80043da:	dc37      	bgt.n	800444c <_printf_float+0x364>
 80043dc:	f04f 0b00 	mov.w	fp, #0
 80043e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043e4:	f104 021a 	add.w	r2, r4, #26
 80043e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80043ec:	ebaa 0309 	sub.w	r3, sl, r9
 80043f0:	455b      	cmp	r3, fp
 80043f2:	dc33      	bgt.n	800445c <_printf_float+0x374>
 80043f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043f8:	429a      	cmp	r2, r3
 80043fa:	db3b      	blt.n	8004474 <_printf_float+0x38c>
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	07da      	lsls	r2, r3, #31
 8004400:	d438      	bmi.n	8004474 <_printf_float+0x38c>
 8004402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004404:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004406:	eba3 020a 	sub.w	r2, r3, sl
 800440a:	eba3 0901 	sub.w	r9, r3, r1
 800440e:	4591      	cmp	r9, r2
 8004410:	bfa8      	it	ge
 8004412:	4691      	movge	r9, r2
 8004414:	f1b9 0f00 	cmp.w	r9, #0
 8004418:	dc34      	bgt.n	8004484 <_printf_float+0x39c>
 800441a:	f04f 0800 	mov.w	r8, #0
 800441e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004422:	f104 0a1a 	add.w	sl, r4, #26
 8004426:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	eba3 0309 	sub.w	r3, r3, r9
 8004430:	4543      	cmp	r3, r8
 8004432:	f77f af7a 	ble.w	800432a <_printf_float+0x242>
 8004436:	2301      	movs	r3, #1
 8004438:	4652      	mov	r2, sl
 800443a:	4631      	mov	r1, r6
 800443c:	4628      	mov	r0, r5
 800443e:	47b8      	blx	r7
 8004440:	3001      	adds	r0, #1
 8004442:	f43f aeac 	beq.w	800419e <_printf_float+0xb6>
 8004446:	f108 0801 	add.w	r8, r8, #1
 800444a:	e7ec      	b.n	8004426 <_printf_float+0x33e>
 800444c:	4613      	mov	r3, r2
 800444e:	4631      	mov	r1, r6
 8004450:	4642      	mov	r2, r8
 8004452:	4628      	mov	r0, r5
 8004454:	47b8      	blx	r7
 8004456:	3001      	adds	r0, #1
 8004458:	d1c0      	bne.n	80043dc <_printf_float+0x2f4>
 800445a:	e6a0      	b.n	800419e <_printf_float+0xb6>
 800445c:	2301      	movs	r3, #1
 800445e:	4631      	mov	r1, r6
 8004460:	4628      	mov	r0, r5
 8004462:	920b      	str	r2, [sp, #44]	; 0x2c
 8004464:	47b8      	blx	r7
 8004466:	3001      	adds	r0, #1
 8004468:	f43f ae99 	beq.w	800419e <_printf_float+0xb6>
 800446c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800446e:	f10b 0b01 	add.w	fp, fp, #1
 8004472:	e7b9      	b.n	80043e8 <_printf_float+0x300>
 8004474:	4631      	mov	r1, r6
 8004476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800447a:	4628      	mov	r0, r5
 800447c:	47b8      	blx	r7
 800447e:	3001      	adds	r0, #1
 8004480:	d1bf      	bne.n	8004402 <_printf_float+0x31a>
 8004482:	e68c      	b.n	800419e <_printf_float+0xb6>
 8004484:	464b      	mov	r3, r9
 8004486:	4631      	mov	r1, r6
 8004488:	4628      	mov	r0, r5
 800448a:	eb08 020a 	add.w	r2, r8, sl
 800448e:	47b8      	blx	r7
 8004490:	3001      	adds	r0, #1
 8004492:	d1c2      	bne.n	800441a <_printf_float+0x332>
 8004494:	e683      	b.n	800419e <_printf_float+0xb6>
 8004496:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004498:	2a01      	cmp	r2, #1
 800449a:	dc01      	bgt.n	80044a0 <_printf_float+0x3b8>
 800449c:	07db      	lsls	r3, r3, #31
 800449e:	d537      	bpl.n	8004510 <_printf_float+0x428>
 80044a0:	2301      	movs	r3, #1
 80044a2:	4642      	mov	r2, r8
 80044a4:	4631      	mov	r1, r6
 80044a6:	4628      	mov	r0, r5
 80044a8:	47b8      	blx	r7
 80044aa:	3001      	adds	r0, #1
 80044ac:	f43f ae77 	beq.w	800419e <_printf_float+0xb6>
 80044b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044b4:	4631      	mov	r1, r6
 80044b6:	4628      	mov	r0, r5
 80044b8:	47b8      	blx	r7
 80044ba:	3001      	adds	r0, #1
 80044bc:	f43f ae6f 	beq.w	800419e <_printf_float+0xb6>
 80044c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044c4:	2200      	movs	r2, #0
 80044c6:	2300      	movs	r3, #0
 80044c8:	f7fc fa6e 	bl	80009a8 <__aeabi_dcmpeq>
 80044cc:	b9d8      	cbnz	r0, 8004506 <_printf_float+0x41e>
 80044ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044d0:	f108 0201 	add.w	r2, r8, #1
 80044d4:	3b01      	subs	r3, #1
 80044d6:	4631      	mov	r1, r6
 80044d8:	4628      	mov	r0, r5
 80044da:	47b8      	blx	r7
 80044dc:	3001      	adds	r0, #1
 80044de:	d10e      	bne.n	80044fe <_printf_float+0x416>
 80044e0:	e65d      	b.n	800419e <_printf_float+0xb6>
 80044e2:	2301      	movs	r3, #1
 80044e4:	464a      	mov	r2, r9
 80044e6:	4631      	mov	r1, r6
 80044e8:	4628      	mov	r0, r5
 80044ea:	47b8      	blx	r7
 80044ec:	3001      	adds	r0, #1
 80044ee:	f43f ae56 	beq.w	800419e <_printf_float+0xb6>
 80044f2:	f108 0801 	add.w	r8, r8, #1
 80044f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044f8:	3b01      	subs	r3, #1
 80044fa:	4543      	cmp	r3, r8
 80044fc:	dcf1      	bgt.n	80044e2 <_printf_float+0x3fa>
 80044fe:	4653      	mov	r3, sl
 8004500:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004504:	e6e0      	b.n	80042c8 <_printf_float+0x1e0>
 8004506:	f04f 0800 	mov.w	r8, #0
 800450a:	f104 091a 	add.w	r9, r4, #26
 800450e:	e7f2      	b.n	80044f6 <_printf_float+0x40e>
 8004510:	2301      	movs	r3, #1
 8004512:	4642      	mov	r2, r8
 8004514:	e7df      	b.n	80044d6 <_printf_float+0x3ee>
 8004516:	2301      	movs	r3, #1
 8004518:	464a      	mov	r2, r9
 800451a:	4631      	mov	r1, r6
 800451c:	4628      	mov	r0, r5
 800451e:	47b8      	blx	r7
 8004520:	3001      	adds	r0, #1
 8004522:	f43f ae3c 	beq.w	800419e <_printf_float+0xb6>
 8004526:	f108 0801 	add.w	r8, r8, #1
 800452a:	68e3      	ldr	r3, [r4, #12]
 800452c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800452e:	1a5b      	subs	r3, r3, r1
 8004530:	4543      	cmp	r3, r8
 8004532:	dcf0      	bgt.n	8004516 <_printf_float+0x42e>
 8004534:	e6fd      	b.n	8004332 <_printf_float+0x24a>
 8004536:	f04f 0800 	mov.w	r8, #0
 800453a:	f104 0919 	add.w	r9, r4, #25
 800453e:	e7f4      	b.n	800452a <_printf_float+0x442>

08004540 <_printf_common>:
 8004540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004544:	4616      	mov	r6, r2
 8004546:	4699      	mov	r9, r3
 8004548:	688a      	ldr	r2, [r1, #8]
 800454a:	690b      	ldr	r3, [r1, #16]
 800454c:	4607      	mov	r7, r0
 800454e:	4293      	cmp	r3, r2
 8004550:	bfb8      	it	lt
 8004552:	4613      	movlt	r3, r2
 8004554:	6033      	str	r3, [r6, #0]
 8004556:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800455a:	460c      	mov	r4, r1
 800455c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004560:	b10a      	cbz	r2, 8004566 <_printf_common+0x26>
 8004562:	3301      	adds	r3, #1
 8004564:	6033      	str	r3, [r6, #0]
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	0699      	lsls	r1, r3, #26
 800456a:	bf42      	ittt	mi
 800456c:	6833      	ldrmi	r3, [r6, #0]
 800456e:	3302      	addmi	r3, #2
 8004570:	6033      	strmi	r3, [r6, #0]
 8004572:	6825      	ldr	r5, [r4, #0]
 8004574:	f015 0506 	ands.w	r5, r5, #6
 8004578:	d106      	bne.n	8004588 <_printf_common+0x48>
 800457a:	f104 0a19 	add.w	sl, r4, #25
 800457e:	68e3      	ldr	r3, [r4, #12]
 8004580:	6832      	ldr	r2, [r6, #0]
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	42ab      	cmp	r3, r5
 8004586:	dc28      	bgt.n	80045da <_printf_common+0x9a>
 8004588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800458c:	1e13      	subs	r3, r2, #0
 800458e:	6822      	ldr	r2, [r4, #0]
 8004590:	bf18      	it	ne
 8004592:	2301      	movne	r3, #1
 8004594:	0692      	lsls	r2, r2, #26
 8004596:	d42d      	bmi.n	80045f4 <_printf_common+0xb4>
 8004598:	4649      	mov	r1, r9
 800459a:	4638      	mov	r0, r7
 800459c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045a0:	47c0      	blx	r8
 80045a2:	3001      	adds	r0, #1
 80045a4:	d020      	beq.n	80045e8 <_printf_common+0xa8>
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	68e5      	ldr	r5, [r4, #12]
 80045aa:	f003 0306 	and.w	r3, r3, #6
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	bf18      	it	ne
 80045b2:	2500      	movne	r5, #0
 80045b4:	6832      	ldr	r2, [r6, #0]
 80045b6:	f04f 0600 	mov.w	r6, #0
 80045ba:	68a3      	ldr	r3, [r4, #8]
 80045bc:	bf08      	it	eq
 80045be:	1aad      	subeq	r5, r5, r2
 80045c0:	6922      	ldr	r2, [r4, #16]
 80045c2:	bf08      	it	eq
 80045c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045c8:	4293      	cmp	r3, r2
 80045ca:	bfc4      	itt	gt
 80045cc:	1a9b      	subgt	r3, r3, r2
 80045ce:	18ed      	addgt	r5, r5, r3
 80045d0:	341a      	adds	r4, #26
 80045d2:	42b5      	cmp	r5, r6
 80045d4:	d11a      	bne.n	800460c <_printf_common+0xcc>
 80045d6:	2000      	movs	r0, #0
 80045d8:	e008      	b.n	80045ec <_printf_common+0xac>
 80045da:	2301      	movs	r3, #1
 80045dc:	4652      	mov	r2, sl
 80045de:	4649      	mov	r1, r9
 80045e0:	4638      	mov	r0, r7
 80045e2:	47c0      	blx	r8
 80045e4:	3001      	adds	r0, #1
 80045e6:	d103      	bne.n	80045f0 <_printf_common+0xb0>
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f0:	3501      	adds	r5, #1
 80045f2:	e7c4      	b.n	800457e <_printf_common+0x3e>
 80045f4:	2030      	movs	r0, #48	; 0x30
 80045f6:	18e1      	adds	r1, r4, r3
 80045f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004602:	4422      	add	r2, r4
 8004604:	3302      	adds	r3, #2
 8004606:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800460a:	e7c5      	b.n	8004598 <_printf_common+0x58>
 800460c:	2301      	movs	r3, #1
 800460e:	4622      	mov	r2, r4
 8004610:	4649      	mov	r1, r9
 8004612:	4638      	mov	r0, r7
 8004614:	47c0      	blx	r8
 8004616:	3001      	adds	r0, #1
 8004618:	d0e6      	beq.n	80045e8 <_printf_common+0xa8>
 800461a:	3601      	adds	r6, #1
 800461c:	e7d9      	b.n	80045d2 <_printf_common+0x92>
	...

08004620 <_printf_i>:
 8004620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	7e0f      	ldrb	r7, [r1, #24]
 8004626:	4691      	mov	r9, r2
 8004628:	2f78      	cmp	r7, #120	; 0x78
 800462a:	4680      	mov	r8, r0
 800462c:	460c      	mov	r4, r1
 800462e:	469a      	mov	sl, r3
 8004630:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004632:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004636:	d807      	bhi.n	8004648 <_printf_i+0x28>
 8004638:	2f62      	cmp	r7, #98	; 0x62
 800463a:	d80a      	bhi.n	8004652 <_printf_i+0x32>
 800463c:	2f00      	cmp	r7, #0
 800463e:	f000 80d9 	beq.w	80047f4 <_printf_i+0x1d4>
 8004642:	2f58      	cmp	r7, #88	; 0x58
 8004644:	f000 80a4 	beq.w	8004790 <_printf_i+0x170>
 8004648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800464c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004650:	e03a      	b.n	80046c8 <_printf_i+0xa8>
 8004652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004656:	2b15      	cmp	r3, #21
 8004658:	d8f6      	bhi.n	8004648 <_printf_i+0x28>
 800465a:	a101      	add	r1, pc, #4	; (adr r1, 8004660 <_printf_i+0x40>)
 800465c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004660:	080046b9 	.word	0x080046b9
 8004664:	080046cd 	.word	0x080046cd
 8004668:	08004649 	.word	0x08004649
 800466c:	08004649 	.word	0x08004649
 8004670:	08004649 	.word	0x08004649
 8004674:	08004649 	.word	0x08004649
 8004678:	080046cd 	.word	0x080046cd
 800467c:	08004649 	.word	0x08004649
 8004680:	08004649 	.word	0x08004649
 8004684:	08004649 	.word	0x08004649
 8004688:	08004649 	.word	0x08004649
 800468c:	080047db 	.word	0x080047db
 8004690:	080046fd 	.word	0x080046fd
 8004694:	080047bd 	.word	0x080047bd
 8004698:	08004649 	.word	0x08004649
 800469c:	08004649 	.word	0x08004649
 80046a0:	080047fd 	.word	0x080047fd
 80046a4:	08004649 	.word	0x08004649
 80046a8:	080046fd 	.word	0x080046fd
 80046ac:	08004649 	.word	0x08004649
 80046b0:	08004649 	.word	0x08004649
 80046b4:	080047c5 	.word	0x080047c5
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	1d1a      	adds	r2, r3, #4
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	602a      	str	r2, [r5, #0]
 80046c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0a4      	b.n	8004816 <_printf_i+0x1f6>
 80046cc:	6820      	ldr	r0, [r4, #0]
 80046ce:	6829      	ldr	r1, [r5, #0]
 80046d0:	0606      	lsls	r6, r0, #24
 80046d2:	f101 0304 	add.w	r3, r1, #4
 80046d6:	d50a      	bpl.n	80046ee <_printf_i+0xce>
 80046d8:	680e      	ldr	r6, [r1, #0]
 80046da:	602b      	str	r3, [r5, #0]
 80046dc:	2e00      	cmp	r6, #0
 80046de:	da03      	bge.n	80046e8 <_printf_i+0xc8>
 80046e0:	232d      	movs	r3, #45	; 0x2d
 80046e2:	4276      	negs	r6, r6
 80046e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e8:	230a      	movs	r3, #10
 80046ea:	485e      	ldr	r0, [pc, #376]	; (8004864 <_printf_i+0x244>)
 80046ec:	e019      	b.n	8004722 <_printf_i+0x102>
 80046ee:	680e      	ldr	r6, [r1, #0]
 80046f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046f4:	602b      	str	r3, [r5, #0]
 80046f6:	bf18      	it	ne
 80046f8:	b236      	sxthne	r6, r6
 80046fa:	e7ef      	b.n	80046dc <_printf_i+0xbc>
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	1d19      	adds	r1, r3, #4
 8004702:	6029      	str	r1, [r5, #0]
 8004704:	0601      	lsls	r1, r0, #24
 8004706:	d501      	bpl.n	800470c <_printf_i+0xec>
 8004708:	681e      	ldr	r6, [r3, #0]
 800470a:	e002      	b.n	8004712 <_printf_i+0xf2>
 800470c:	0646      	lsls	r6, r0, #25
 800470e:	d5fb      	bpl.n	8004708 <_printf_i+0xe8>
 8004710:	881e      	ldrh	r6, [r3, #0]
 8004712:	2f6f      	cmp	r7, #111	; 0x6f
 8004714:	bf0c      	ite	eq
 8004716:	2308      	moveq	r3, #8
 8004718:	230a      	movne	r3, #10
 800471a:	4852      	ldr	r0, [pc, #328]	; (8004864 <_printf_i+0x244>)
 800471c:	2100      	movs	r1, #0
 800471e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004722:	6865      	ldr	r5, [r4, #4]
 8004724:	2d00      	cmp	r5, #0
 8004726:	bfa8      	it	ge
 8004728:	6821      	ldrge	r1, [r4, #0]
 800472a:	60a5      	str	r5, [r4, #8]
 800472c:	bfa4      	itt	ge
 800472e:	f021 0104 	bicge.w	r1, r1, #4
 8004732:	6021      	strge	r1, [r4, #0]
 8004734:	b90e      	cbnz	r6, 800473a <_printf_i+0x11a>
 8004736:	2d00      	cmp	r5, #0
 8004738:	d04d      	beq.n	80047d6 <_printf_i+0x1b6>
 800473a:	4615      	mov	r5, r2
 800473c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004740:	fb03 6711 	mls	r7, r3, r1, r6
 8004744:	5dc7      	ldrb	r7, [r0, r7]
 8004746:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800474a:	4637      	mov	r7, r6
 800474c:	42bb      	cmp	r3, r7
 800474e:	460e      	mov	r6, r1
 8004750:	d9f4      	bls.n	800473c <_printf_i+0x11c>
 8004752:	2b08      	cmp	r3, #8
 8004754:	d10b      	bne.n	800476e <_printf_i+0x14e>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	07de      	lsls	r6, r3, #31
 800475a:	d508      	bpl.n	800476e <_printf_i+0x14e>
 800475c:	6923      	ldr	r3, [r4, #16]
 800475e:	6861      	ldr	r1, [r4, #4]
 8004760:	4299      	cmp	r1, r3
 8004762:	bfde      	ittt	le
 8004764:	2330      	movle	r3, #48	; 0x30
 8004766:	f805 3c01 	strble.w	r3, [r5, #-1]
 800476a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800476e:	1b52      	subs	r2, r2, r5
 8004770:	6122      	str	r2, [r4, #16]
 8004772:	464b      	mov	r3, r9
 8004774:	4621      	mov	r1, r4
 8004776:	4640      	mov	r0, r8
 8004778:	f8cd a000 	str.w	sl, [sp]
 800477c:	aa03      	add	r2, sp, #12
 800477e:	f7ff fedf 	bl	8004540 <_printf_common>
 8004782:	3001      	adds	r0, #1
 8004784:	d14c      	bne.n	8004820 <_printf_i+0x200>
 8004786:	f04f 30ff 	mov.w	r0, #4294967295
 800478a:	b004      	add	sp, #16
 800478c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004790:	4834      	ldr	r0, [pc, #208]	; (8004864 <_printf_i+0x244>)
 8004792:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004796:	6829      	ldr	r1, [r5, #0]
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	f851 6b04 	ldr.w	r6, [r1], #4
 800479e:	6029      	str	r1, [r5, #0]
 80047a0:	061d      	lsls	r5, r3, #24
 80047a2:	d514      	bpl.n	80047ce <_printf_i+0x1ae>
 80047a4:	07df      	lsls	r7, r3, #31
 80047a6:	bf44      	itt	mi
 80047a8:	f043 0320 	orrmi.w	r3, r3, #32
 80047ac:	6023      	strmi	r3, [r4, #0]
 80047ae:	b91e      	cbnz	r6, 80047b8 <_printf_i+0x198>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	f023 0320 	bic.w	r3, r3, #32
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	2310      	movs	r3, #16
 80047ba:	e7af      	b.n	800471c <_printf_i+0xfc>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	f043 0320 	orr.w	r3, r3, #32
 80047c2:	6023      	str	r3, [r4, #0]
 80047c4:	2378      	movs	r3, #120	; 0x78
 80047c6:	4828      	ldr	r0, [pc, #160]	; (8004868 <_printf_i+0x248>)
 80047c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047cc:	e7e3      	b.n	8004796 <_printf_i+0x176>
 80047ce:	0659      	lsls	r1, r3, #25
 80047d0:	bf48      	it	mi
 80047d2:	b2b6      	uxthmi	r6, r6
 80047d4:	e7e6      	b.n	80047a4 <_printf_i+0x184>
 80047d6:	4615      	mov	r5, r2
 80047d8:	e7bb      	b.n	8004752 <_printf_i+0x132>
 80047da:	682b      	ldr	r3, [r5, #0]
 80047dc:	6826      	ldr	r6, [r4, #0]
 80047de:	1d18      	adds	r0, r3, #4
 80047e0:	6961      	ldr	r1, [r4, #20]
 80047e2:	6028      	str	r0, [r5, #0]
 80047e4:	0635      	lsls	r5, r6, #24
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	d501      	bpl.n	80047ee <_printf_i+0x1ce>
 80047ea:	6019      	str	r1, [r3, #0]
 80047ec:	e002      	b.n	80047f4 <_printf_i+0x1d4>
 80047ee:	0670      	lsls	r0, r6, #25
 80047f0:	d5fb      	bpl.n	80047ea <_printf_i+0x1ca>
 80047f2:	8019      	strh	r1, [r3, #0]
 80047f4:	2300      	movs	r3, #0
 80047f6:	4615      	mov	r5, r2
 80047f8:	6123      	str	r3, [r4, #16]
 80047fa:	e7ba      	b.n	8004772 <_printf_i+0x152>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	2100      	movs	r1, #0
 8004800:	1d1a      	adds	r2, r3, #4
 8004802:	602a      	str	r2, [r5, #0]
 8004804:	681d      	ldr	r5, [r3, #0]
 8004806:	6862      	ldr	r2, [r4, #4]
 8004808:	4628      	mov	r0, r5
 800480a:	f000 fed7 	bl	80055bc <memchr>
 800480e:	b108      	cbz	r0, 8004814 <_printf_i+0x1f4>
 8004810:	1b40      	subs	r0, r0, r5
 8004812:	6060      	str	r0, [r4, #4]
 8004814:	6863      	ldr	r3, [r4, #4]
 8004816:	6123      	str	r3, [r4, #16]
 8004818:	2300      	movs	r3, #0
 800481a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800481e:	e7a8      	b.n	8004772 <_printf_i+0x152>
 8004820:	462a      	mov	r2, r5
 8004822:	4649      	mov	r1, r9
 8004824:	4640      	mov	r0, r8
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	47d0      	blx	sl
 800482a:	3001      	adds	r0, #1
 800482c:	d0ab      	beq.n	8004786 <_printf_i+0x166>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	079b      	lsls	r3, r3, #30
 8004832:	d413      	bmi.n	800485c <_printf_i+0x23c>
 8004834:	68e0      	ldr	r0, [r4, #12]
 8004836:	9b03      	ldr	r3, [sp, #12]
 8004838:	4298      	cmp	r0, r3
 800483a:	bfb8      	it	lt
 800483c:	4618      	movlt	r0, r3
 800483e:	e7a4      	b.n	800478a <_printf_i+0x16a>
 8004840:	2301      	movs	r3, #1
 8004842:	4632      	mov	r2, r6
 8004844:	4649      	mov	r1, r9
 8004846:	4640      	mov	r0, r8
 8004848:	47d0      	blx	sl
 800484a:	3001      	adds	r0, #1
 800484c:	d09b      	beq.n	8004786 <_printf_i+0x166>
 800484e:	3501      	adds	r5, #1
 8004850:	68e3      	ldr	r3, [r4, #12]
 8004852:	9903      	ldr	r1, [sp, #12]
 8004854:	1a5b      	subs	r3, r3, r1
 8004856:	42ab      	cmp	r3, r5
 8004858:	dcf2      	bgt.n	8004840 <_printf_i+0x220>
 800485a:	e7eb      	b.n	8004834 <_printf_i+0x214>
 800485c:	2500      	movs	r5, #0
 800485e:	f104 0619 	add.w	r6, r4, #25
 8004862:	e7f5      	b.n	8004850 <_printf_i+0x230>
 8004864:	08006dde 	.word	0x08006dde
 8004868:	08006def 	.word	0x08006def

0800486c <siprintf>:
 800486c:	b40e      	push	{r1, r2, r3}
 800486e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004872:	b500      	push	{lr}
 8004874:	b09c      	sub	sp, #112	; 0x70
 8004876:	ab1d      	add	r3, sp, #116	; 0x74
 8004878:	9002      	str	r0, [sp, #8]
 800487a:	9006      	str	r0, [sp, #24]
 800487c:	9107      	str	r1, [sp, #28]
 800487e:	9104      	str	r1, [sp, #16]
 8004880:	4808      	ldr	r0, [pc, #32]	; (80048a4 <siprintf+0x38>)
 8004882:	4909      	ldr	r1, [pc, #36]	; (80048a8 <siprintf+0x3c>)
 8004884:	f853 2b04 	ldr.w	r2, [r3], #4
 8004888:	9105      	str	r1, [sp, #20]
 800488a:	6800      	ldr	r0, [r0, #0]
 800488c:	a902      	add	r1, sp, #8
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	f001 fb7e 	bl	8005f90 <_svfiprintf_r>
 8004894:	2200      	movs	r2, #0
 8004896:	9b02      	ldr	r3, [sp, #8]
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	b01c      	add	sp, #112	; 0x70
 800489c:	f85d eb04 	ldr.w	lr, [sp], #4
 80048a0:	b003      	add	sp, #12
 80048a2:	4770      	bx	lr
 80048a4:	20000010 	.word	0x20000010
 80048a8:	ffff0208 	.word	0xffff0208

080048ac <quorem>:
 80048ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b0:	6903      	ldr	r3, [r0, #16]
 80048b2:	690c      	ldr	r4, [r1, #16]
 80048b4:	4607      	mov	r7, r0
 80048b6:	42a3      	cmp	r3, r4
 80048b8:	f2c0 8082 	blt.w	80049c0 <quorem+0x114>
 80048bc:	3c01      	subs	r4, #1
 80048be:	f100 0514 	add.w	r5, r0, #20
 80048c2:	f101 0814 	add.w	r8, r1, #20
 80048c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048ca:	9301      	str	r3, [sp, #4]
 80048cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80048d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048d4:	3301      	adds	r3, #1
 80048d6:	429a      	cmp	r2, r3
 80048d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80048dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80048e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80048e4:	d331      	bcc.n	800494a <quorem+0x9e>
 80048e6:	f04f 0e00 	mov.w	lr, #0
 80048ea:	4640      	mov	r0, r8
 80048ec:	46ac      	mov	ip, r5
 80048ee:	46f2      	mov	sl, lr
 80048f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80048f4:	b293      	uxth	r3, r2
 80048f6:	fb06 e303 	mla	r3, r6, r3, lr
 80048fa:	0c12      	lsrs	r2, r2, #16
 80048fc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004900:	b29b      	uxth	r3, r3
 8004902:	fb06 e202 	mla	r2, r6, r2, lr
 8004906:	ebaa 0303 	sub.w	r3, sl, r3
 800490a:	f8dc a000 	ldr.w	sl, [ip]
 800490e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004912:	fa1f fa8a 	uxth.w	sl, sl
 8004916:	4453      	add	r3, sl
 8004918:	f8dc a000 	ldr.w	sl, [ip]
 800491c:	b292      	uxth	r2, r2
 800491e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004922:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004926:	b29b      	uxth	r3, r3
 8004928:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800492c:	4581      	cmp	r9, r0
 800492e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004932:	f84c 3b04 	str.w	r3, [ip], #4
 8004936:	d2db      	bcs.n	80048f0 <quorem+0x44>
 8004938:	f855 300b 	ldr.w	r3, [r5, fp]
 800493c:	b92b      	cbnz	r3, 800494a <quorem+0x9e>
 800493e:	9b01      	ldr	r3, [sp, #4]
 8004940:	3b04      	subs	r3, #4
 8004942:	429d      	cmp	r5, r3
 8004944:	461a      	mov	r2, r3
 8004946:	d32f      	bcc.n	80049a8 <quorem+0xfc>
 8004948:	613c      	str	r4, [r7, #16]
 800494a:	4638      	mov	r0, r7
 800494c:	f001 f8d0 	bl	8005af0 <__mcmp>
 8004950:	2800      	cmp	r0, #0
 8004952:	db25      	blt.n	80049a0 <quorem+0xf4>
 8004954:	4628      	mov	r0, r5
 8004956:	f04f 0c00 	mov.w	ip, #0
 800495a:	3601      	adds	r6, #1
 800495c:	f858 1b04 	ldr.w	r1, [r8], #4
 8004960:	f8d0 e000 	ldr.w	lr, [r0]
 8004964:	b28b      	uxth	r3, r1
 8004966:	ebac 0303 	sub.w	r3, ip, r3
 800496a:	fa1f f28e 	uxth.w	r2, lr
 800496e:	4413      	add	r3, r2
 8004970:	0c0a      	lsrs	r2, r1, #16
 8004972:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004976:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800497a:	b29b      	uxth	r3, r3
 800497c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004980:	45c1      	cmp	r9, r8
 8004982:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004986:	f840 3b04 	str.w	r3, [r0], #4
 800498a:	d2e7      	bcs.n	800495c <quorem+0xb0>
 800498c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004990:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004994:	b922      	cbnz	r2, 80049a0 <quorem+0xf4>
 8004996:	3b04      	subs	r3, #4
 8004998:	429d      	cmp	r5, r3
 800499a:	461a      	mov	r2, r3
 800499c:	d30a      	bcc.n	80049b4 <quorem+0x108>
 800499e:	613c      	str	r4, [r7, #16]
 80049a0:	4630      	mov	r0, r6
 80049a2:	b003      	add	sp, #12
 80049a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	3b04      	subs	r3, #4
 80049ac:	2a00      	cmp	r2, #0
 80049ae:	d1cb      	bne.n	8004948 <quorem+0x9c>
 80049b0:	3c01      	subs	r4, #1
 80049b2:	e7c6      	b.n	8004942 <quorem+0x96>
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	3b04      	subs	r3, #4
 80049b8:	2a00      	cmp	r2, #0
 80049ba:	d1f0      	bne.n	800499e <quorem+0xf2>
 80049bc:	3c01      	subs	r4, #1
 80049be:	e7eb      	b.n	8004998 <quorem+0xec>
 80049c0:	2000      	movs	r0, #0
 80049c2:	e7ee      	b.n	80049a2 <quorem+0xf6>
 80049c4:	0000      	movs	r0, r0
	...

080049c8 <_dtoa_r>:
 80049c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049cc:	4616      	mov	r6, r2
 80049ce:	461f      	mov	r7, r3
 80049d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80049d2:	b099      	sub	sp, #100	; 0x64
 80049d4:	4605      	mov	r5, r0
 80049d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80049da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80049de:	b974      	cbnz	r4, 80049fe <_dtoa_r+0x36>
 80049e0:	2010      	movs	r0, #16
 80049e2:	f000 fde3 	bl	80055ac <malloc>
 80049e6:	4602      	mov	r2, r0
 80049e8:	6268      	str	r0, [r5, #36]	; 0x24
 80049ea:	b920      	cbnz	r0, 80049f6 <_dtoa_r+0x2e>
 80049ec:	21ea      	movs	r1, #234	; 0xea
 80049ee:	4ba8      	ldr	r3, [pc, #672]	; (8004c90 <_dtoa_r+0x2c8>)
 80049f0:	48a8      	ldr	r0, [pc, #672]	; (8004c94 <_dtoa_r+0x2cc>)
 80049f2:	f001 fbdd 	bl	80061b0 <__assert_func>
 80049f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80049fa:	6004      	str	r4, [r0, #0]
 80049fc:	60c4      	str	r4, [r0, #12]
 80049fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a00:	6819      	ldr	r1, [r3, #0]
 8004a02:	b151      	cbz	r1, 8004a1a <_dtoa_r+0x52>
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	2301      	movs	r3, #1
 8004a08:	4093      	lsls	r3, r2
 8004a0a:	604a      	str	r2, [r1, #4]
 8004a0c:	608b      	str	r3, [r1, #8]
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f000 fe30 	bl	8005674 <_Bfree>
 8004a14:	2200      	movs	r2, #0
 8004a16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	1e3b      	subs	r3, r7, #0
 8004a1c:	bfaf      	iteee	ge
 8004a1e:	2300      	movge	r3, #0
 8004a20:	2201      	movlt	r2, #1
 8004a22:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a26:	9305      	strlt	r3, [sp, #20]
 8004a28:	bfa8      	it	ge
 8004a2a:	f8c8 3000 	strge.w	r3, [r8]
 8004a2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004a32:	4b99      	ldr	r3, [pc, #612]	; (8004c98 <_dtoa_r+0x2d0>)
 8004a34:	bfb8      	it	lt
 8004a36:	f8c8 2000 	strlt.w	r2, [r8]
 8004a3a:	ea33 0309 	bics.w	r3, r3, r9
 8004a3e:	d119      	bne.n	8004a74 <_dtoa_r+0xac>
 8004a40:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a4c:	4333      	orrs	r3, r6
 8004a4e:	f000 857f 	beq.w	8005550 <_dtoa_r+0xb88>
 8004a52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a54:	b953      	cbnz	r3, 8004a6c <_dtoa_r+0xa4>
 8004a56:	4b91      	ldr	r3, [pc, #580]	; (8004c9c <_dtoa_r+0x2d4>)
 8004a58:	e022      	b.n	8004aa0 <_dtoa_r+0xd8>
 8004a5a:	4b91      	ldr	r3, [pc, #580]	; (8004ca0 <_dtoa_r+0x2d8>)
 8004a5c:	9303      	str	r3, [sp, #12]
 8004a5e:	3308      	adds	r3, #8
 8004a60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	9803      	ldr	r0, [sp, #12]
 8004a66:	b019      	add	sp, #100	; 0x64
 8004a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6c:	4b8b      	ldr	r3, [pc, #556]	; (8004c9c <_dtoa_r+0x2d4>)
 8004a6e:	9303      	str	r3, [sp, #12]
 8004a70:	3303      	adds	r3, #3
 8004a72:	e7f5      	b.n	8004a60 <_dtoa_r+0x98>
 8004a74:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004a7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a80:	2200      	movs	r2, #0
 8004a82:	2300      	movs	r3, #0
 8004a84:	f7fb ff90 	bl	80009a8 <__aeabi_dcmpeq>
 8004a88:	4680      	mov	r8, r0
 8004a8a:	b158      	cbz	r0, 8004aa4 <_dtoa_r+0xdc>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8558 	beq.w	800554a <_dtoa_r+0xb82>
 8004a9a:	4882      	ldr	r0, [pc, #520]	; (8004ca4 <_dtoa_r+0x2dc>)
 8004a9c:	6018      	str	r0, [r3, #0]
 8004a9e:	1e43      	subs	r3, r0, #1
 8004aa0:	9303      	str	r3, [sp, #12]
 8004aa2:	e7df      	b.n	8004a64 <_dtoa_r+0x9c>
 8004aa4:	ab16      	add	r3, sp, #88	; 0x58
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	ab17      	add	r3, sp, #92	; 0x5c
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	4628      	mov	r0, r5
 8004aae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ab2:	f001 f8c5 	bl	8005c40 <__d2b>
 8004ab6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004aba:	4683      	mov	fp, r0
 8004abc:	2c00      	cmp	r4, #0
 8004abe:	d07f      	beq.n	8004bc0 <_dtoa_r+0x1f8>
 8004ac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ac6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004aca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ace:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004ad2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004ad6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004ada:	2200      	movs	r2, #0
 8004adc:	4b72      	ldr	r3, [pc, #456]	; (8004ca8 <_dtoa_r+0x2e0>)
 8004ade:	f7fb fb43 	bl	8000168 <__aeabi_dsub>
 8004ae2:	a365      	add	r3, pc, #404	; (adr r3, 8004c78 <_dtoa_r+0x2b0>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f7fb fcf6 	bl	80004d8 <__aeabi_dmul>
 8004aec:	a364      	add	r3, pc, #400	; (adr r3, 8004c80 <_dtoa_r+0x2b8>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	f7fb fb3b 	bl	800016c <__adddf3>
 8004af6:	4606      	mov	r6, r0
 8004af8:	4620      	mov	r0, r4
 8004afa:	460f      	mov	r7, r1
 8004afc:	f7fb fc82 	bl	8000404 <__aeabi_i2d>
 8004b00:	a361      	add	r3, pc, #388	; (adr r3, 8004c88 <_dtoa_r+0x2c0>)
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f7fb fce7 	bl	80004d8 <__aeabi_dmul>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4630      	mov	r0, r6
 8004b10:	4639      	mov	r1, r7
 8004b12:	f7fb fb2b 	bl	800016c <__adddf3>
 8004b16:	4606      	mov	r6, r0
 8004b18:	460f      	mov	r7, r1
 8004b1a:	f7fb ff8d 	bl	8000a38 <__aeabi_d2iz>
 8004b1e:	2200      	movs	r2, #0
 8004b20:	4682      	mov	sl, r0
 8004b22:	2300      	movs	r3, #0
 8004b24:	4630      	mov	r0, r6
 8004b26:	4639      	mov	r1, r7
 8004b28:	f7fb ff48 	bl	80009bc <__aeabi_dcmplt>
 8004b2c:	b148      	cbz	r0, 8004b42 <_dtoa_r+0x17a>
 8004b2e:	4650      	mov	r0, sl
 8004b30:	f7fb fc68 	bl	8000404 <__aeabi_i2d>
 8004b34:	4632      	mov	r2, r6
 8004b36:	463b      	mov	r3, r7
 8004b38:	f7fb ff36 	bl	80009a8 <__aeabi_dcmpeq>
 8004b3c:	b908      	cbnz	r0, 8004b42 <_dtoa_r+0x17a>
 8004b3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b42:	f1ba 0f16 	cmp.w	sl, #22
 8004b46:	d858      	bhi.n	8004bfa <_dtoa_r+0x232>
 8004b48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b4c:	4b57      	ldr	r3, [pc, #348]	; (8004cac <_dtoa_r+0x2e4>)
 8004b4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f7fb ff31 	bl	80009bc <__aeabi_dcmplt>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d04f      	beq.n	8004bfe <_dtoa_r+0x236>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b64:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004b68:	1b1c      	subs	r4, r3, r4
 8004b6a:	1e63      	subs	r3, r4, #1
 8004b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b6e:	bf49      	itett	mi
 8004b70:	f1c4 0301 	rsbmi	r3, r4, #1
 8004b74:	2300      	movpl	r3, #0
 8004b76:	9306      	strmi	r3, [sp, #24]
 8004b78:	2300      	movmi	r3, #0
 8004b7a:	bf54      	ite	pl
 8004b7c:	9306      	strpl	r3, [sp, #24]
 8004b7e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004b80:	f1ba 0f00 	cmp.w	sl, #0
 8004b84:	db3d      	blt.n	8004c02 <_dtoa_r+0x23a>
 8004b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b88:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004b8c:	4453      	add	r3, sl
 8004b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b90:	2300      	movs	r3, #0
 8004b92:	930a      	str	r3, [sp, #40]	; 0x28
 8004b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b96:	2b09      	cmp	r3, #9
 8004b98:	f200 808c 	bhi.w	8004cb4 <_dtoa_r+0x2ec>
 8004b9c:	2b05      	cmp	r3, #5
 8004b9e:	bfc4      	itt	gt
 8004ba0:	3b04      	subgt	r3, #4
 8004ba2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004ba4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ba6:	bfc8      	it	gt
 8004ba8:	2400      	movgt	r4, #0
 8004baa:	f1a3 0302 	sub.w	r3, r3, #2
 8004bae:	bfd8      	it	le
 8004bb0:	2401      	movle	r4, #1
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	f200 808a 	bhi.w	8004ccc <_dtoa_r+0x304>
 8004bb8:	e8df f003 	tbb	[pc, r3]
 8004bbc:	5b4d4f2d 	.word	0x5b4d4f2d
 8004bc0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004bc4:	441c      	add	r4, r3
 8004bc6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	bfc3      	ittte	gt
 8004bce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004bd2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004bd6:	fa09 f303 	lslgt.w	r3, r9, r3
 8004bda:	f1c3 0320 	rsble	r3, r3, #32
 8004bde:	bfc6      	itte	gt
 8004be0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004be4:	4318      	orrgt	r0, r3
 8004be6:	fa06 f003 	lslle.w	r0, r6, r3
 8004bea:	f7fb fbfb 	bl	80003e4 <__aeabi_ui2d>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004bf4:	3c01      	subs	r4, #1
 8004bf6:	9313      	str	r3, [sp, #76]	; 0x4c
 8004bf8:	e76f      	b.n	8004ada <_dtoa_r+0x112>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e7b2      	b.n	8004b64 <_dtoa_r+0x19c>
 8004bfe:	900f      	str	r0, [sp, #60]	; 0x3c
 8004c00:	e7b1      	b.n	8004b66 <_dtoa_r+0x19e>
 8004c02:	9b06      	ldr	r3, [sp, #24]
 8004c04:	eba3 030a 	sub.w	r3, r3, sl
 8004c08:	9306      	str	r3, [sp, #24]
 8004c0a:	f1ca 0300 	rsb	r3, sl, #0
 8004c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c10:	2300      	movs	r3, #0
 8004c12:	930e      	str	r3, [sp, #56]	; 0x38
 8004c14:	e7be      	b.n	8004b94 <_dtoa_r+0x1cc>
 8004c16:	2300      	movs	r3, #0
 8004c18:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	dc58      	bgt.n	8004cd2 <_dtoa_r+0x30a>
 8004c20:	f04f 0901 	mov.w	r9, #1
 8004c24:	464b      	mov	r3, r9
 8004c26:	f8cd 9020 	str.w	r9, [sp, #32]
 8004c2a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004c2e:	2200      	movs	r2, #0
 8004c30:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c32:	6042      	str	r2, [r0, #4]
 8004c34:	2204      	movs	r2, #4
 8004c36:	f102 0614 	add.w	r6, r2, #20
 8004c3a:	429e      	cmp	r6, r3
 8004c3c:	6841      	ldr	r1, [r0, #4]
 8004c3e:	d94e      	bls.n	8004cde <_dtoa_r+0x316>
 8004c40:	4628      	mov	r0, r5
 8004c42:	f000 fcd7 	bl	80055f4 <_Balloc>
 8004c46:	9003      	str	r0, [sp, #12]
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	d14c      	bne.n	8004ce6 <_dtoa_r+0x31e>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c52:	4b17      	ldr	r3, [pc, #92]	; (8004cb0 <_dtoa_r+0x2e8>)
 8004c54:	e6cc      	b.n	80049f0 <_dtoa_r+0x28>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e7de      	b.n	8004c18 <_dtoa_r+0x250>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c60:	eb0a 0903 	add.w	r9, sl, r3
 8004c64:	f109 0301 	add.w	r3, r9, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	9308      	str	r3, [sp, #32]
 8004c6c:	bfb8      	it	lt
 8004c6e:	2301      	movlt	r3, #1
 8004c70:	e7dd      	b.n	8004c2e <_dtoa_r+0x266>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e7f2      	b.n	8004c5c <_dtoa_r+0x294>
 8004c76:	bf00      	nop
 8004c78:	636f4361 	.word	0x636f4361
 8004c7c:	3fd287a7 	.word	0x3fd287a7
 8004c80:	8b60c8b3 	.word	0x8b60c8b3
 8004c84:	3fc68a28 	.word	0x3fc68a28
 8004c88:	509f79fb 	.word	0x509f79fb
 8004c8c:	3fd34413 	.word	0x3fd34413
 8004c90:	08006e0d 	.word	0x08006e0d
 8004c94:	08006e24 	.word	0x08006e24
 8004c98:	7ff00000 	.word	0x7ff00000
 8004c9c:	08006e09 	.word	0x08006e09
 8004ca0:	08006e00 	.word	0x08006e00
 8004ca4:	08006ddd 	.word	0x08006ddd
 8004ca8:	3ff80000 	.word	0x3ff80000
 8004cac:	08006f18 	.word	0x08006f18
 8004cb0:	08006e7f 	.word	0x08006e7f
 8004cb4:	2401      	movs	r4, #1
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	940b      	str	r4, [sp, #44]	; 0x2c
 8004cba:	9322      	str	r3, [sp, #136]	; 0x88
 8004cbc:	f04f 39ff 	mov.w	r9, #4294967295
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2312      	movs	r3, #18
 8004cc4:	f8cd 9020 	str.w	r9, [sp, #32]
 8004cc8:	9223      	str	r2, [sp, #140]	; 0x8c
 8004cca:	e7b0      	b.n	8004c2e <_dtoa_r+0x266>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cd0:	e7f4      	b.n	8004cbc <_dtoa_r+0x2f4>
 8004cd2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	f8cd 9020 	str.w	r9, [sp, #32]
 8004cdc:	e7a7      	b.n	8004c2e <_dtoa_r+0x266>
 8004cde:	3101      	adds	r1, #1
 8004ce0:	6041      	str	r1, [r0, #4]
 8004ce2:	0052      	lsls	r2, r2, #1
 8004ce4:	e7a7      	b.n	8004c36 <_dtoa_r+0x26e>
 8004ce6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ce8:	9a03      	ldr	r2, [sp, #12]
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	9b08      	ldr	r3, [sp, #32]
 8004cee:	2b0e      	cmp	r3, #14
 8004cf0:	f200 80a8 	bhi.w	8004e44 <_dtoa_r+0x47c>
 8004cf4:	2c00      	cmp	r4, #0
 8004cf6:	f000 80a5 	beq.w	8004e44 <_dtoa_r+0x47c>
 8004cfa:	f1ba 0f00 	cmp.w	sl, #0
 8004cfe:	dd34      	ble.n	8004d6a <_dtoa_r+0x3a2>
 8004d00:	4a9a      	ldr	r2, [pc, #616]	; (8004f6c <_dtoa_r+0x5a4>)
 8004d02:	f00a 030f 	and.w	r3, sl, #15
 8004d06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d0a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004d0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004d16:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004d1a:	d016      	beq.n	8004d4a <_dtoa_r+0x382>
 8004d1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d20:	4b93      	ldr	r3, [pc, #588]	; (8004f70 <_dtoa_r+0x5a8>)
 8004d22:	2703      	movs	r7, #3
 8004d24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d28:	f7fb fd00 	bl	800072c <__aeabi_ddiv>
 8004d2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d30:	f004 040f 	and.w	r4, r4, #15
 8004d34:	4e8e      	ldr	r6, [pc, #568]	; (8004f70 <_dtoa_r+0x5a8>)
 8004d36:	b954      	cbnz	r4, 8004d4e <_dtoa_r+0x386>
 8004d38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d40:	f7fb fcf4 	bl	800072c <__aeabi_ddiv>
 8004d44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d48:	e029      	b.n	8004d9e <_dtoa_r+0x3d6>
 8004d4a:	2702      	movs	r7, #2
 8004d4c:	e7f2      	b.n	8004d34 <_dtoa_r+0x36c>
 8004d4e:	07e1      	lsls	r1, r4, #31
 8004d50:	d508      	bpl.n	8004d64 <_dtoa_r+0x39c>
 8004d52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d5a:	f7fb fbbd 	bl	80004d8 <__aeabi_dmul>
 8004d5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d62:	3701      	adds	r7, #1
 8004d64:	1064      	asrs	r4, r4, #1
 8004d66:	3608      	adds	r6, #8
 8004d68:	e7e5      	b.n	8004d36 <_dtoa_r+0x36e>
 8004d6a:	f000 80a5 	beq.w	8004eb8 <_dtoa_r+0x4f0>
 8004d6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d72:	f1ca 0400 	rsb	r4, sl, #0
 8004d76:	4b7d      	ldr	r3, [pc, #500]	; (8004f6c <_dtoa_r+0x5a4>)
 8004d78:	f004 020f 	and.w	r2, r4, #15
 8004d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f7fb fba8 	bl	80004d8 <__aeabi_dmul>
 8004d88:	2702      	movs	r7, #2
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d90:	4e77      	ldr	r6, [pc, #476]	; (8004f70 <_dtoa_r+0x5a8>)
 8004d92:	1124      	asrs	r4, r4, #4
 8004d94:	2c00      	cmp	r4, #0
 8004d96:	f040 8084 	bne.w	8004ea2 <_dtoa_r+0x4da>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1d2      	bne.n	8004d44 <_dtoa_r+0x37c>
 8004d9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 808b 	beq.w	8004ebc <_dtoa_r+0x4f4>
 8004da6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004daa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004dae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004db2:	2200      	movs	r2, #0
 8004db4:	4b6f      	ldr	r3, [pc, #444]	; (8004f74 <_dtoa_r+0x5ac>)
 8004db6:	f7fb fe01 	bl	80009bc <__aeabi_dcmplt>
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d07e      	beq.n	8004ebc <_dtoa_r+0x4f4>
 8004dbe:	9b08      	ldr	r3, [sp, #32]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d07b      	beq.n	8004ebc <_dtoa_r+0x4f4>
 8004dc4:	f1b9 0f00 	cmp.w	r9, #0
 8004dc8:	dd38      	ble.n	8004e3c <_dtoa_r+0x474>
 8004dca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dce:	2200      	movs	r2, #0
 8004dd0:	4b69      	ldr	r3, [pc, #420]	; (8004f78 <_dtoa_r+0x5b0>)
 8004dd2:	f7fb fb81 	bl	80004d8 <__aeabi_dmul>
 8004dd6:	464c      	mov	r4, r9
 8004dd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ddc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004de0:	3701      	adds	r7, #1
 8004de2:	4638      	mov	r0, r7
 8004de4:	f7fb fb0e 	bl	8000404 <__aeabi_i2d>
 8004de8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dec:	f7fb fb74 	bl	80004d8 <__aeabi_dmul>
 8004df0:	2200      	movs	r2, #0
 8004df2:	4b62      	ldr	r3, [pc, #392]	; (8004f7c <_dtoa_r+0x5b4>)
 8004df4:	f7fb f9ba 	bl	800016c <__adddf3>
 8004df8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004dfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e00:	9611      	str	r6, [sp, #68]	; 0x44
 8004e02:	2c00      	cmp	r4, #0
 8004e04:	d15d      	bne.n	8004ec2 <_dtoa_r+0x4fa>
 8004e06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	4b5c      	ldr	r3, [pc, #368]	; (8004f80 <_dtoa_r+0x5b8>)
 8004e0e:	f7fb f9ab 	bl	8000168 <__aeabi_dsub>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e1a:	4633      	mov	r3, r6
 8004e1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e1e:	f7fb fdeb 	bl	80009f8 <__aeabi_dcmpgt>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	f040 829c 	bne.w	8005360 <_dtoa_r+0x998>
 8004e28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e2e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004e32:	f7fb fdc3 	bl	80009bc <__aeabi_dcmplt>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	f040 8290 	bne.w	800535c <_dtoa_r+0x994>
 8004e3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004e40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004e44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f2c0 8152 	blt.w	80050f0 <_dtoa_r+0x728>
 8004e4c:	f1ba 0f0e 	cmp.w	sl, #14
 8004e50:	f300 814e 	bgt.w	80050f0 <_dtoa_r+0x728>
 8004e54:	4b45      	ldr	r3, [pc, #276]	; (8004f6c <_dtoa_r+0x5a4>)
 8004e56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004e62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f280 80db 	bge.w	8005020 <_dtoa_r+0x658>
 8004e6a:	9b08      	ldr	r3, [sp, #32]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f300 80d7 	bgt.w	8005020 <_dtoa_r+0x658>
 8004e72:	f040 8272 	bne.w	800535a <_dtoa_r+0x992>
 8004e76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	4b40      	ldr	r3, [pc, #256]	; (8004f80 <_dtoa_r+0x5b8>)
 8004e7e:	f7fb fb2b 	bl	80004d8 <__aeabi_dmul>
 8004e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e86:	f7fb fdad 	bl	80009e4 <__aeabi_dcmpge>
 8004e8a:	9c08      	ldr	r4, [sp, #32]
 8004e8c:	4626      	mov	r6, r4
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	f040 8248 	bne.w	8005324 <_dtoa_r+0x95c>
 8004e94:	2331      	movs	r3, #49	; 0x31
 8004e96:	9f03      	ldr	r7, [sp, #12]
 8004e98:	f10a 0a01 	add.w	sl, sl, #1
 8004e9c:	f807 3b01 	strb.w	r3, [r7], #1
 8004ea0:	e244      	b.n	800532c <_dtoa_r+0x964>
 8004ea2:	07e2      	lsls	r2, r4, #31
 8004ea4:	d505      	bpl.n	8004eb2 <_dtoa_r+0x4ea>
 8004ea6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004eaa:	f7fb fb15 	bl	80004d8 <__aeabi_dmul>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	3701      	adds	r7, #1
 8004eb2:	1064      	asrs	r4, r4, #1
 8004eb4:	3608      	adds	r6, #8
 8004eb6:	e76d      	b.n	8004d94 <_dtoa_r+0x3cc>
 8004eb8:	2702      	movs	r7, #2
 8004eba:	e770      	b.n	8004d9e <_dtoa_r+0x3d6>
 8004ebc:	46d0      	mov	r8, sl
 8004ebe:	9c08      	ldr	r4, [sp, #32]
 8004ec0:	e78f      	b.n	8004de2 <_dtoa_r+0x41a>
 8004ec2:	9903      	ldr	r1, [sp, #12]
 8004ec4:	4b29      	ldr	r3, [pc, #164]	; (8004f6c <_dtoa_r+0x5a4>)
 8004ec6:	4421      	add	r1, r4
 8004ec8:	9112      	str	r1, [sp, #72]	; 0x48
 8004eca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ecc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ed0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004ed4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ed8:	2900      	cmp	r1, #0
 8004eda:	d055      	beq.n	8004f88 <_dtoa_r+0x5c0>
 8004edc:	2000      	movs	r0, #0
 8004ede:	4929      	ldr	r1, [pc, #164]	; (8004f84 <_dtoa_r+0x5bc>)
 8004ee0:	f7fb fc24 	bl	800072c <__aeabi_ddiv>
 8004ee4:	463b      	mov	r3, r7
 8004ee6:	4632      	mov	r2, r6
 8004ee8:	f7fb f93e 	bl	8000168 <__aeabi_dsub>
 8004eec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ef0:	9f03      	ldr	r7, [sp, #12]
 8004ef2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ef6:	f7fb fd9f 	bl	8000a38 <__aeabi_d2iz>
 8004efa:	4604      	mov	r4, r0
 8004efc:	f7fb fa82 	bl	8000404 <__aeabi_i2d>
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f08:	f7fb f92e 	bl	8000168 <__aeabi_dsub>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	3430      	adds	r4, #48	; 0x30
 8004f12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f1a:	f807 4b01 	strb.w	r4, [r7], #1
 8004f1e:	f7fb fd4d 	bl	80009bc <__aeabi_dcmplt>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d174      	bne.n	8005010 <_dtoa_r+0x648>
 8004f26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	4911      	ldr	r1, [pc, #68]	; (8004f74 <_dtoa_r+0x5ac>)
 8004f2e:	f7fb f91b 	bl	8000168 <__aeabi_dsub>
 8004f32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f36:	f7fb fd41 	bl	80009bc <__aeabi_dcmplt>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	f040 80b7 	bne.w	80050ae <_dtoa_r+0x6e6>
 8004f40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f42:	429f      	cmp	r7, r3
 8004f44:	f43f af7a 	beq.w	8004e3c <_dtoa_r+0x474>
 8004f48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <_dtoa_r+0x5b0>)
 8004f50:	f7fb fac2 	bl	80004d8 <__aeabi_dmul>
 8004f54:	2200      	movs	r2, #0
 8004f56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <_dtoa_r+0x5b0>)
 8004f60:	f7fb faba 	bl	80004d8 <__aeabi_dmul>
 8004f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f68:	e7c3      	b.n	8004ef2 <_dtoa_r+0x52a>
 8004f6a:	bf00      	nop
 8004f6c:	08006f18 	.word	0x08006f18
 8004f70:	08006ef0 	.word	0x08006ef0
 8004f74:	3ff00000 	.word	0x3ff00000
 8004f78:	40240000 	.word	0x40240000
 8004f7c:	401c0000 	.word	0x401c0000
 8004f80:	40140000 	.word	0x40140000
 8004f84:	3fe00000 	.word	0x3fe00000
 8004f88:	4630      	mov	r0, r6
 8004f8a:	4639      	mov	r1, r7
 8004f8c:	f7fb faa4 	bl	80004d8 <__aeabi_dmul>
 8004f90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f96:	9c03      	ldr	r4, [sp, #12]
 8004f98:	9314      	str	r3, [sp, #80]	; 0x50
 8004f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f9e:	f7fb fd4b 	bl	8000a38 <__aeabi_d2iz>
 8004fa2:	9015      	str	r0, [sp, #84]	; 0x54
 8004fa4:	f7fb fa2e 	bl	8000404 <__aeabi_i2d>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fb0:	f7fb f8da 	bl	8000168 <__aeabi_dsub>
 8004fb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	3330      	adds	r3, #48	; 0x30
 8004fba:	f804 3b01 	strb.w	r3, [r4], #1
 8004fbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fc0:	460f      	mov	r7, r1
 8004fc2:	429c      	cmp	r4, r3
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	d124      	bne.n	8005014 <_dtoa_r+0x64c>
 8004fca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fce:	4bb0      	ldr	r3, [pc, #704]	; (8005290 <_dtoa_r+0x8c8>)
 8004fd0:	f7fb f8cc 	bl	800016c <__adddf3>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4630      	mov	r0, r6
 8004fda:	4639      	mov	r1, r7
 8004fdc:	f7fb fd0c 	bl	80009f8 <__aeabi_dcmpgt>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d163      	bne.n	80050ac <_dtoa_r+0x6e4>
 8004fe4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fe8:	2000      	movs	r0, #0
 8004fea:	49a9      	ldr	r1, [pc, #676]	; (8005290 <_dtoa_r+0x8c8>)
 8004fec:	f7fb f8bc 	bl	8000168 <__aeabi_dsub>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	f7fb fce0 	bl	80009bc <__aeabi_dcmplt>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	f43f af1d 	beq.w	8004e3c <_dtoa_r+0x474>
 8005002:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005004:	1e7b      	subs	r3, r7, #1
 8005006:	9314      	str	r3, [sp, #80]	; 0x50
 8005008:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800500c:	2b30      	cmp	r3, #48	; 0x30
 800500e:	d0f8      	beq.n	8005002 <_dtoa_r+0x63a>
 8005010:	46c2      	mov	sl, r8
 8005012:	e03b      	b.n	800508c <_dtoa_r+0x6c4>
 8005014:	4b9f      	ldr	r3, [pc, #636]	; (8005294 <_dtoa_r+0x8cc>)
 8005016:	f7fb fa5f 	bl	80004d8 <__aeabi_dmul>
 800501a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800501e:	e7bc      	b.n	8004f9a <_dtoa_r+0x5d2>
 8005020:	9f03      	ldr	r7, [sp, #12]
 8005022:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005026:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800502a:	4640      	mov	r0, r8
 800502c:	4649      	mov	r1, r9
 800502e:	f7fb fb7d 	bl	800072c <__aeabi_ddiv>
 8005032:	f7fb fd01 	bl	8000a38 <__aeabi_d2iz>
 8005036:	4604      	mov	r4, r0
 8005038:	f7fb f9e4 	bl	8000404 <__aeabi_i2d>
 800503c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005040:	f7fb fa4a 	bl	80004d8 <__aeabi_dmul>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4640      	mov	r0, r8
 800504a:	4649      	mov	r1, r9
 800504c:	f7fb f88c 	bl	8000168 <__aeabi_dsub>
 8005050:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005054:	f807 6b01 	strb.w	r6, [r7], #1
 8005058:	9e03      	ldr	r6, [sp, #12]
 800505a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800505e:	1bbe      	subs	r6, r7, r6
 8005060:	45b4      	cmp	ip, r6
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	d136      	bne.n	80050d6 <_dtoa_r+0x70e>
 8005068:	f7fb f880 	bl	800016c <__adddf3>
 800506c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005070:	4680      	mov	r8, r0
 8005072:	4689      	mov	r9, r1
 8005074:	f7fb fcc0 	bl	80009f8 <__aeabi_dcmpgt>
 8005078:	bb58      	cbnz	r0, 80050d2 <_dtoa_r+0x70a>
 800507a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800507e:	4640      	mov	r0, r8
 8005080:	4649      	mov	r1, r9
 8005082:	f7fb fc91 	bl	80009a8 <__aeabi_dcmpeq>
 8005086:	b108      	cbz	r0, 800508c <_dtoa_r+0x6c4>
 8005088:	07e1      	lsls	r1, r4, #31
 800508a:	d422      	bmi.n	80050d2 <_dtoa_r+0x70a>
 800508c:	4628      	mov	r0, r5
 800508e:	4659      	mov	r1, fp
 8005090:	f000 faf0 	bl	8005674 <_Bfree>
 8005094:	2300      	movs	r3, #0
 8005096:	703b      	strb	r3, [r7, #0]
 8005098:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800509a:	f10a 0001 	add.w	r0, sl, #1
 800509e:	6018      	str	r0, [r3, #0]
 80050a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f43f acde 	beq.w	8004a64 <_dtoa_r+0x9c>
 80050a8:	601f      	str	r7, [r3, #0]
 80050aa:	e4db      	b.n	8004a64 <_dtoa_r+0x9c>
 80050ac:	4627      	mov	r7, r4
 80050ae:	463b      	mov	r3, r7
 80050b0:	461f      	mov	r7, r3
 80050b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050b6:	2a39      	cmp	r2, #57	; 0x39
 80050b8:	d107      	bne.n	80050ca <_dtoa_r+0x702>
 80050ba:	9a03      	ldr	r2, [sp, #12]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d1f7      	bne.n	80050b0 <_dtoa_r+0x6e8>
 80050c0:	2230      	movs	r2, #48	; 0x30
 80050c2:	9903      	ldr	r1, [sp, #12]
 80050c4:	f108 0801 	add.w	r8, r8, #1
 80050c8:	700a      	strb	r2, [r1, #0]
 80050ca:	781a      	ldrb	r2, [r3, #0]
 80050cc:	3201      	adds	r2, #1
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	e79e      	b.n	8005010 <_dtoa_r+0x648>
 80050d2:	46d0      	mov	r8, sl
 80050d4:	e7eb      	b.n	80050ae <_dtoa_r+0x6e6>
 80050d6:	2200      	movs	r2, #0
 80050d8:	4b6e      	ldr	r3, [pc, #440]	; (8005294 <_dtoa_r+0x8cc>)
 80050da:	f7fb f9fd 	bl	80004d8 <__aeabi_dmul>
 80050de:	2200      	movs	r2, #0
 80050e0:	2300      	movs	r3, #0
 80050e2:	4680      	mov	r8, r0
 80050e4:	4689      	mov	r9, r1
 80050e6:	f7fb fc5f 	bl	80009a8 <__aeabi_dcmpeq>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d09b      	beq.n	8005026 <_dtoa_r+0x65e>
 80050ee:	e7cd      	b.n	800508c <_dtoa_r+0x6c4>
 80050f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050f2:	2a00      	cmp	r2, #0
 80050f4:	f000 80d0 	beq.w	8005298 <_dtoa_r+0x8d0>
 80050f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80050fa:	2a01      	cmp	r2, #1
 80050fc:	f300 80ae 	bgt.w	800525c <_dtoa_r+0x894>
 8005100:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005102:	2a00      	cmp	r2, #0
 8005104:	f000 80a6 	beq.w	8005254 <_dtoa_r+0x88c>
 8005108:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800510c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800510e:	9f06      	ldr	r7, [sp, #24]
 8005110:	9a06      	ldr	r2, [sp, #24]
 8005112:	2101      	movs	r1, #1
 8005114:	441a      	add	r2, r3
 8005116:	9206      	str	r2, [sp, #24]
 8005118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800511a:	4628      	mov	r0, r5
 800511c:	441a      	add	r2, r3
 800511e:	9209      	str	r2, [sp, #36]	; 0x24
 8005120:	f000 fb5e 	bl	80057e0 <__i2b>
 8005124:	4606      	mov	r6, r0
 8005126:	2f00      	cmp	r7, #0
 8005128:	dd0c      	ble.n	8005144 <_dtoa_r+0x77c>
 800512a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800512c:	2b00      	cmp	r3, #0
 800512e:	dd09      	ble.n	8005144 <_dtoa_r+0x77c>
 8005130:	42bb      	cmp	r3, r7
 8005132:	bfa8      	it	ge
 8005134:	463b      	movge	r3, r7
 8005136:	9a06      	ldr	r2, [sp, #24]
 8005138:	1aff      	subs	r7, r7, r3
 800513a:	1ad2      	subs	r2, r2, r3
 800513c:	9206      	str	r2, [sp, #24]
 800513e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	9309      	str	r3, [sp, #36]	; 0x24
 8005144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005146:	b1f3      	cbz	r3, 8005186 <_dtoa_r+0x7be>
 8005148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 80a8 	beq.w	80052a0 <_dtoa_r+0x8d8>
 8005150:	2c00      	cmp	r4, #0
 8005152:	dd10      	ble.n	8005176 <_dtoa_r+0x7ae>
 8005154:	4631      	mov	r1, r6
 8005156:	4622      	mov	r2, r4
 8005158:	4628      	mov	r0, r5
 800515a:	f000 fbff 	bl	800595c <__pow5mult>
 800515e:	465a      	mov	r2, fp
 8005160:	4601      	mov	r1, r0
 8005162:	4606      	mov	r6, r0
 8005164:	4628      	mov	r0, r5
 8005166:	f000 fb51 	bl	800580c <__multiply>
 800516a:	4680      	mov	r8, r0
 800516c:	4659      	mov	r1, fp
 800516e:	4628      	mov	r0, r5
 8005170:	f000 fa80 	bl	8005674 <_Bfree>
 8005174:	46c3      	mov	fp, r8
 8005176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005178:	1b1a      	subs	r2, r3, r4
 800517a:	d004      	beq.n	8005186 <_dtoa_r+0x7be>
 800517c:	4659      	mov	r1, fp
 800517e:	4628      	mov	r0, r5
 8005180:	f000 fbec 	bl	800595c <__pow5mult>
 8005184:	4683      	mov	fp, r0
 8005186:	2101      	movs	r1, #1
 8005188:	4628      	mov	r0, r5
 800518a:	f000 fb29 	bl	80057e0 <__i2b>
 800518e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005190:	4604      	mov	r4, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	f340 8086 	ble.w	80052a4 <_dtoa_r+0x8dc>
 8005198:	461a      	mov	r2, r3
 800519a:	4601      	mov	r1, r0
 800519c:	4628      	mov	r0, r5
 800519e:	f000 fbdd 	bl	800595c <__pow5mult>
 80051a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051a4:	4604      	mov	r4, r0
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	dd7f      	ble.n	80052aa <_dtoa_r+0x8e2>
 80051aa:	f04f 0800 	mov.w	r8, #0
 80051ae:	6923      	ldr	r3, [r4, #16]
 80051b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80051b4:	6918      	ldr	r0, [r3, #16]
 80051b6:	f000 fac5 	bl	8005744 <__hi0bits>
 80051ba:	f1c0 0020 	rsb	r0, r0, #32
 80051be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c0:	4418      	add	r0, r3
 80051c2:	f010 001f 	ands.w	r0, r0, #31
 80051c6:	f000 8092 	beq.w	80052ee <_dtoa_r+0x926>
 80051ca:	f1c0 0320 	rsb	r3, r0, #32
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	f340 808a 	ble.w	80052e8 <_dtoa_r+0x920>
 80051d4:	f1c0 001c 	rsb	r0, r0, #28
 80051d8:	9b06      	ldr	r3, [sp, #24]
 80051da:	4407      	add	r7, r0
 80051dc:	4403      	add	r3, r0
 80051de:	9306      	str	r3, [sp, #24]
 80051e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e2:	4403      	add	r3, r0
 80051e4:	9309      	str	r3, [sp, #36]	; 0x24
 80051e6:	9b06      	ldr	r3, [sp, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	dd05      	ble.n	80051f8 <_dtoa_r+0x830>
 80051ec:	4659      	mov	r1, fp
 80051ee:	461a      	mov	r2, r3
 80051f0:	4628      	mov	r0, r5
 80051f2:	f000 fc0d 	bl	8005a10 <__lshift>
 80051f6:	4683      	mov	fp, r0
 80051f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	dd05      	ble.n	800520a <_dtoa_r+0x842>
 80051fe:	4621      	mov	r1, r4
 8005200:	461a      	mov	r2, r3
 8005202:	4628      	mov	r0, r5
 8005204:	f000 fc04 	bl	8005a10 <__lshift>
 8005208:	4604      	mov	r4, r0
 800520a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d070      	beq.n	80052f2 <_dtoa_r+0x92a>
 8005210:	4621      	mov	r1, r4
 8005212:	4658      	mov	r0, fp
 8005214:	f000 fc6c 	bl	8005af0 <__mcmp>
 8005218:	2800      	cmp	r0, #0
 800521a:	da6a      	bge.n	80052f2 <_dtoa_r+0x92a>
 800521c:	2300      	movs	r3, #0
 800521e:	4659      	mov	r1, fp
 8005220:	220a      	movs	r2, #10
 8005222:	4628      	mov	r0, r5
 8005224:	f000 fa48 	bl	80056b8 <__multadd>
 8005228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800522a:	4683      	mov	fp, r0
 800522c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8194 	beq.w	800555e <_dtoa_r+0xb96>
 8005236:	4631      	mov	r1, r6
 8005238:	2300      	movs	r3, #0
 800523a:	220a      	movs	r2, #10
 800523c:	4628      	mov	r0, r5
 800523e:	f000 fa3b 	bl	80056b8 <__multadd>
 8005242:	f1b9 0f00 	cmp.w	r9, #0
 8005246:	4606      	mov	r6, r0
 8005248:	f300 8093 	bgt.w	8005372 <_dtoa_r+0x9aa>
 800524c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800524e:	2b02      	cmp	r3, #2
 8005250:	dc57      	bgt.n	8005302 <_dtoa_r+0x93a>
 8005252:	e08e      	b.n	8005372 <_dtoa_r+0x9aa>
 8005254:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005256:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800525a:	e757      	b.n	800510c <_dtoa_r+0x744>
 800525c:	9b08      	ldr	r3, [sp, #32]
 800525e:	1e5c      	subs	r4, r3, #1
 8005260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005262:	42a3      	cmp	r3, r4
 8005264:	bfb7      	itett	lt
 8005266:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005268:	1b1c      	subge	r4, r3, r4
 800526a:	1ae2      	sublt	r2, r4, r3
 800526c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800526e:	bfbe      	ittt	lt
 8005270:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005272:	189b      	addlt	r3, r3, r2
 8005274:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005276:	9b08      	ldr	r3, [sp, #32]
 8005278:	bfb8      	it	lt
 800527a:	2400      	movlt	r4, #0
 800527c:	2b00      	cmp	r3, #0
 800527e:	bfbb      	ittet	lt
 8005280:	9b06      	ldrlt	r3, [sp, #24]
 8005282:	9a08      	ldrlt	r2, [sp, #32]
 8005284:	9f06      	ldrge	r7, [sp, #24]
 8005286:	1a9f      	sublt	r7, r3, r2
 8005288:	bfac      	ite	ge
 800528a:	9b08      	ldrge	r3, [sp, #32]
 800528c:	2300      	movlt	r3, #0
 800528e:	e73f      	b.n	8005110 <_dtoa_r+0x748>
 8005290:	3fe00000 	.word	0x3fe00000
 8005294:	40240000 	.word	0x40240000
 8005298:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800529a:	9f06      	ldr	r7, [sp, #24]
 800529c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800529e:	e742      	b.n	8005126 <_dtoa_r+0x75e>
 80052a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052a2:	e76b      	b.n	800517c <_dtoa_r+0x7b4>
 80052a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	dc19      	bgt.n	80052de <_dtoa_r+0x916>
 80052aa:	9b04      	ldr	r3, [sp, #16]
 80052ac:	b9bb      	cbnz	r3, 80052de <_dtoa_r+0x916>
 80052ae:	9b05      	ldr	r3, [sp, #20]
 80052b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052b4:	b99b      	cbnz	r3, 80052de <_dtoa_r+0x916>
 80052b6:	9b05      	ldr	r3, [sp, #20]
 80052b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052bc:	0d1b      	lsrs	r3, r3, #20
 80052be:	051b      	lsls	r3, r3, #20
 80052c0:	b183      	cbz	r3, 80052e4 <_dtoa_r+0x91c>
 80052c2:	f04f 0801 	mov.w	r8, #1
 80052c6:	9b06      	ldr	r3, [sp, #24]
 80052c8:	3301      	adds	r3, #1
 80052ca:	9306      	str	r3, [sp, #24]
 80052cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ce:	3301      	adds	r3, #1
 80052d0:	9309      	str	r3, [sp, #36]	; 0x24
 80052d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f47f af6a 	bne.w	80051ae <_dtoa_r+0x7e6>
 80052da:	2001      	movs	r0, #1
 80052dc:	e76f      	b.n	80051be <_dtoa_r+0x7f6>
 80052de:	f04f 0800 	mov.w	r8, #0
 80052e2:	e7f6      	b.n	80052d2 <_dtoa_r+0x90a>
 80052e4:	4698      	mov	r8, r3
 80052e6:	e7f4      	b.n	80052d2 <_dtoa_r+0x90a>
 80052e8:	f43f af7d 	beq.w	80051e6 <_dtoa_r+0x81e>
 80052ec:	4618      	mov	r0, r3
 80052ee:	301c      	adds	r0, #28
 80052f0:	e772      	b.n	80051d8 <_dtoa_r+0x810>
 80052f2:	9b08      	ldr	r3, [sp, #32]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	dc36      	bgt.n	8005366 <_dtoa_r+0x99e>
 80052f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	dd33      	ble.n	8005366 <_dtoa_r+0x99e>
 80052fe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005302:	f1b9 0f00 	cmp.w	r9, #0
 8005306:	d10d      	bne.n	8005324 <_dtoa_r+0x95c>
 8005308:	4621      	mov	r1, r4
 800530a:	464b      	mov	r3, r9
 800530c:	2205      	movs	r2, #5
 800530e:	4628      	mov	r0, r5
 8005310:	f000 f9d2 	bl	80056b8 <__multadd>
 8005314:	4601      	mov	r1, r0
 8005316:	4604      	mov	r4, r0
 8005318:	4658      	mov	r0, fp
 800531a:	f000 fbe9 	bl	8005af0 <__mcmp>
 800531e:	2800      	cmp	r0, #0
 8005320:	f73f adb8 	bgt.w	8004e94 <_dtoa_r+0x4cc>
 8005324:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005326:	9f03      	ldr	r7, [sp, #12]
 8005328:	ea6f 0a03 	mvn.w	sl, r3
 800532c:	f04f 0800 	mov.w	r8, #0
 8005330:	4621      	mov	r1, r4
 8005332:	4628      	mov	r0, r5
 8005334:	f000 f99e 	bl	8005674 <_Bfree>
 8005338:	2e00      	cmp	r6, #0
 800533a:	f43f aea7 	beq.w	800508c <_dtoa_r+0x6c4>
 800533e:	f1b8 0f00 	cmp.w	r8, #0
 8005342:	d005      	beq.n	8005350 <_dtoa_r+0x988>
 8005344:	45b0      	cmp	r8, r6
 8005346:	d003      	beq.n	8005350 <_dtoa_r+0x988>
 8005348:	4641      	mov	r1, r8
 800534a:	4628      	mov	r0, r5
 800534c:	f000 f992 	bl	8005674 <_Bfree>
 8005350:	4631      	mov	r1, r6
 8005352:	4628      	mov	r0, r5
 8005354:	f000 f98e 	bl	8005674 <_Bfree>
 8005358:	e698      	b.n	800508c <_dtoa_r+0x6c4>
 800535a:	2400      	movs	r4, #0
 800535c:	4626      	mov	r6, r4
 800535e:	e7e1      	b.n	8005324 <_dtoa_r+0x95c>
 8005360:	46c2      	mov	sl, r8
 8005362:	4626      	mov	r6, r4
 8005364:	e596      	b.n	8004e94 <_dtoa_r+0x4cc>
 8005366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005368:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80fd 	beq.w	800556c <_dtoa_r+0xba4>
 8005372:	2f00      	cmp	r7, #0
 8005374:	dd05      	ble.n	8005382 <_dtoa_r+0x9ba>
 8005376:	4631      	mov	r1, r6
 8005378:	463a      	mov	r2, r7
 800537a:	4628      	mov	r0, r5
 800537c:	f000 fb48 	bl	8005a10 <__lshift>
 8005380:	4606      	mov	r6, r0
 8005382:	f1b8 0f00 	cmp.w	r8, #0
 8005386:	d05c      	beq.n	8005442 <_dtoa_r+0xa7a>
 8005388:	4628      	mov	r0, r5
 800538a:	6871      	ldr	r1, [r6, #4]
 800538c:	f000 f932 	bl	80055f4 <_Balloc>
 8005390:	4607      	mov	r7, r0
 8005392:	b928      	cbnz	r0, 80053a0 <_dtoa_r+0x9d8>
 8005394:	4602      	mov	r2, r0
 8005396:	f240 21ea 	movw	r1, #746	; 0x2ea
 800539a:	4b7f      	ldr	r3, [pc, #508]	; (8005598 <_dtoa_r+0xbd0>)
 800539c:	f7ff bb28 	b.w	80049f0 <_dtoa_r+0x28>
 80053a0:	6932      	ldr	r2, [r6, #16]
 80053a2:	f106 010c 	add.w	r1, r6, #12
 80053a6:	3202      	adds	r2, #2
 80053a8:	0092      	lsls	r2, r2, #2
 80053aa:	300c      	adds	r0, #12
 80053ac:	f000 f914 	bl	80055d8 <memcpy>
 80053b0:	2201      	movs	r2, #1
 80053b2:	4639      	mov	r1, r7
 80053b4:	4628      	mov	r0, r5
 80053b6:	f000 fb2b 	bl	8005a10 <__lshift>
 80053ba:	46b0      	mov	r8, r6
 80053bc:	4606      	mov	r6, r0
 80053be:	9b03      	ldr	r3, [sp, #12]
 80053c0:	3301      	adds	r3, #1
 80053c2:	9308      	str	r3, [sp, #32]
 80053c4:	9b03      	ldr	r3, [sp, #12]
 80053c6:	444b      	add	r3, r9
 80053c8:	930a      	str	r3, [sp, #40]	; 0x28
 80053ca:	9b04      	ldr	r3, [sp, #16]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	9309      	str	r3, [sp, #36]	; 0x24
 80053d2:	9b08      	ldr	r3, [sp, #32]
 80053d4:	4621      	mov	r1, r4
 80053d6:	3b01      	subs	r3, #1
 80053d8:	4658      	mov	r0, fp
 80053da:	9304      	str	r3, [sp, #16]
 80053dc:	f7ff fa66 	bl	80048ac <quorem>
 80053e0:	4603      	mov	r3, r0
 80053e2:	4641      	mov	r1, r8
 80053e4:	3330      	adds	r3, #48	; 0x30
 80053e6:	9006      	str	r0, [sp, #24]
 80053e8:	4658      	mov	r0, fp
 80053ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80053ec:	f000 fb80 	bl	8005af0 <__mcmp>
 80053f0:	4632      	mov	r2, r6
 80053f2:	4681      	mov	r9, r0
 80053f4:	4621      	mov	r1, r4
 80053f6:	4628      	mov	r0, r5
 80053f8:	f000 fb96 	bl	8005b28 <__mdiff>
 80053fc:	68c2      	ldr	r2, [r0, #12]
 80053fe:	4607      	mov	r7, r0
 8005400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005402:	bb02      	cbnz	r2, 8005446 <_dtoa_r+0xa7e>
 8005404:	4601      	mov	r1, r0
 8005406:	4658      	mov	r0, fp
 8005408:	f000 fb72 	bl	8005af0 <__mcmp>
 800540c:	4602      	mov	r2, r0
 800540e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005410:	4639      	mov	r1, r7
 8005412:	4628      	mov	r0, r5
 8005414:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005418:	f000 f92c 	bl	8005674 <_Bfree>
 800541c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800541e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005420:	9f08      	ldr	r7, [sp, #32]
 8005422:	ea43 0102 	orr.w	r1, r3, r2
 8005426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005428:	430b      	orrs	r3, r1
 800542a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800542c:	d10d      	bne.n	800544a <_dtoa_r+0xa82>
 800542e:	2b39      	cmp	r3, #57	; 0x39
 8005430:	d029      	beq.n	8005486 <_dtoa_r+0xabe>
 8005432:	f1b9 0f00 	cmp.w	r9, #0
 8005436:	dd01      	ble.n	800543c <_dtoa_r+0xa74>
 8005438:	9b06      	ldr	r3, [sp, #24]
 800543a:	3331      	adds	r3, #49	; 0x31
 800543c:	9a04      	ldr	r2, [sp, #16]
 800543e:	7013      	strb	r3, [r2, #0]
 8005440:	e776      	b.n	8005330 <_dtoa_r+0x968>
 8005442:	4630      	mov	r0, r6
 8005444:	e7b9      	b.n	80053ba <_dtoa_r+0x9f2>
 8005446:	2201      	movs	r2, #1
 8005448:	e7e2      	b.n	8005410 <_dtoa_r+0xa48>
 800544a:	f1b9 0f00 	cmp.w	r9, #0
 800544e:	db06      	blt.n	800545e <_dtoa_r+0xa96>
 8005450:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005452:	ea41 0909 	orr.w	r9, r1, r9
 8005456:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005458:	ea59 0101 	orrs.w	r1, r9, r1
 800545c:	d120      	bne.n	80054a0 <_dtoa_r+0xad8>
 800545e:	2a00      	cmp	r2, #0
 8005460:	ddec      	ble.n	800543c <_dtoa_r+0xa74>
 8005462:	4659      	mov	r1, fp
 8005464:	2201      	movs	r2, #1
 8005466:	4628      	mov	r0, r5
 8005468:	9308      	str	r3, [sp, #32]
 800546a:	f000 fad1 	bl	8005a10 <__lshift>
 800546e:	4621      	mov	r1, r4
 8005470:	4683      	mov	fp, r0
 8005472:	f000 fb3d 	bl	8005af0 <__mcmp>
 8005476:	2800      	cmp	r0, #0
 8005478:	9b08      	ldr	r3, [sp, #32]
 800547a:	dc02      	bgt.n	8005482 <_dtoa_r+0xaba>
 800547c:	d1de      	bne.n	800543c <_dtoa_r+0xa74>
 800547e:	07da      	lsls	r2, r3, #31
 8005480:	d5dc      	bpl.n	800543c <_dtoa_r+0xa74>
 8005482:	2b39      	cmp	r3, #57	; 0x39
 8005484:	d1d8      	bne.n	8005438 <_dtoa_r+0xa70>
 8005486:	2339      	movs	r3, #57	; 0x39
 8005488:	9a04      	ldr	r2, [sp, #16]
 800548a:	7013      	strb	r3, [r2, #0]
 800548c:	463b      	mov	r3, r7
 800548e:	461f      	mov	r7, r3
 8005490:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005494:	3b01      	subs	r3, #1
 8005496:	2a39      	cmp	r2, #57	; 0x39
 8005498:	d050      	beq.n	800553c <_dtoa_r+0xb74>
 800549a:	3201      	adds	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	e747      	b.n	8005330 <_dtoa_r+0x968>
 80054a0:	2a00      	cmp	r2, #0
 80054a2:	dd03      	ble.n	80054ac <_dtoa_r+0xae4>
 80054a4:	2b39      	cmp	r3, #57	; 0x39
 80054a6:	d0ee      	beq.n	8005486 <_dtoa_r+0xabe>
 80054a8:	3301      	adds	r3, #1
 80054aa:	e7c7      	b.n	800543c <_dtoa_r+0xa74>
 80054ac:	9a08      	ldr	r2, [sp, #32]
 80054ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80054b4:	428a      	cmp	r2, r1
 80054b6:	d02a      	beq.n	800550e <_dtoa_r+0xb46>
 80054b8:	4659      	mov	r1, fp
 80054ba:	2300      	movs	r3, #0
 80054bc:	220a      	movs	r2, #10
 80054be:	4628      	mov	r0, r5
 80054c0:	f000 f8fa 	bl	80056b8 <__multadd>
 80054c4:	45b0      	cmp	r8, r6
 80054c6:	4683      	mov	fp, r0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	f04f 020a 	mov.w	r2, #10
 80054d0:	4641      	mov	r1, r8
 80054d2:	4628      	mov	r0, r5
 80054d4:	d107      	bne.n	80054e6 <_dtoa_r+0xb1e>
 80054d6:	f000 f8ef 	bl	80056b8 <__multadd>
 80054da:	4680      	mov	r8, r0
 80054dc:	4606      	mov	r6, r0
 80054de:	9b08      	ldr	r3, [sp, #32]
 80054e0:	3301      	adds	r3, #1
 80054e2:	9308      	str	r3, [sp, #32]
 80054e4:	e775      	b.n	80053d2 <_dtoa_r+0xa0a>
 80054e6:	f000 f8e7 	bl	80056b8 <__multadd>
 80054ea:	4631      	mov	r1, r6
 80054ec:	4680      	mov	r8, r0
 80054ee:	2300      	movs	r3, #0
 80054f0:	220a      	movs	r2, #10
 80054f2:	4628      	mov	r0, r5
 80054f4:	f000 f8e0 	bl	80056b8 <__multadd>
 80054f8:	4606      	mov	r6, r0
 80054fa:	e7f0      	b.n	80054de <_dtoa_r+0xb16>
 80054fc:	f1b9 0f00 	cmp.w	r9, #0
 8005500:	bfcc      	ite	gt
 8005502:	464f      	movgt	r7, r9
 8005504:	2701      	movle	r7, #1
 8005506:	f04f 0800 	mov.w	r8, #0
 800550a:	9a03      	ldr	r2, [sp, #12]
 800550c:	4417      	add	r7, r2
 800550e:	4659      	mov	r1, fp
 8005510:	2201      	movs	r2, #1
 8005512:	4628      	mov	r0, r5
 8005514:	9308      	str	r3, [sp, #32]
 8005516:	f000 fa7b 	bl	8005a10 <__lshift>
 800551a:	4621      	mov	r1, r4
 800551c:	4683      	mov	fp, r0
 800551e:	f000 fae7 	bl	8005af0 <__mcmp>
 8005522:	2800      	cmp	r0, #0
 8005524:	dcb2      	bgt.n	800548c <_dtoa_r+0xac4>
 8005526:	d102      	bne.n	800552e <_dtoa_r+0xb66>
 8005528:	9b08      	ldr	r3, [sp, #32]
 800552a:	07db      	lsls	r3, r3, #31
 800552c:	d4ae      	bmi.n	800548c <_dtoa_r+0xac4>
 800552e:	463b      	mov	r3, r7
 8005530:	461f      	mov	r7, r3
 8005532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005536:	2a30      	cmp	r2, #48	; 0x30
 8005538:	d0fa      	beq.n	8005530 <_dtoa_r+0xb68>
 800553a:	e6f9      	b.n	8005330 <_dtoa_r+0x968>
 800553c:	9a03      	ldr	r2, [sp, #12]
 800553e:	429a      	cmp	r2, r3
 8005540:	d1a5      	bne.n	800548e <_dtoa_r+0xac6>
 8005542:	2331      	movs	r3, #49	; 0x31
 8005544:	f10a 0a01 	add.w	sl, sl, #1
 8005548:	e779      	b.n	800543e <_dtoa_r+0xa76>
 800554a:	4b14      	ldr	r3, [pc, #80]	; (800559c <_dtoa_r+0xbd4>)
 800554c:	f7ff baa8 	b.w	8004aa0 <_dtoa_r+0xd8>
 8005550:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005552:	2b00      	cmp	r3, #0
 8005554:	f47f aa81 	bne.w	8004a5a <_dtoa_r+0x92>
 8005558:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <_dtoa_r+0xbd8>)
 800555a:	f7ff baa1 	b.w	8004aa0 <_dtoa_r+0xd8>
 800555e:	f1b9 0f00 	cmp.w	r9, #0
 8005562:	dc03      	bgt.n	800556c <_dtoa_r+0xba4>
 8005564:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005566:	2b02      	cmp	r3, #2
 8005568:	f73f aecb 	bgt.w	8005302 <_dtoa_r+0x93a>
 800556c:	9f03      	ldr	r7, [sp, #12]
 800556e:	4621      	mov	r1, r4
 8005570:	4658      	mov	r0, fp
 8005572:	f7ff f99b 	bl	80048ac <quorem>
 8005576:	9a03      	ldr	r2, [sp, #12]
 8005578:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800557c:	f807 3b01 	strb.w	r3, [r7], #1
 8005580:	1aba      	subs	r2, r7, r2
 8005582:	4591      	cmp	r9, r2
 8005584:	ddba      	ble.n	80054fc <_dtoa_r+0xb34>
 8005586:	4659      	mov	r1, fp
 8005588:	2300      	movs	r3, #0
 800558a:	220a      	movs	r2, #10
 800558c:	4628      	mov	r0, r5
 800558e:	f000 f893 	bl	80056b8 <__multadd>
 8005592:	4683      	mov	fp, r0
 8005594:	e7eb      	b.n	800556e <_dtoa_r+0xba6>
 8005596:	bf00      	nop
 8005598:	08006e7f 	.word	0x08006e7f
 800559c:	08006ddc 	.word	0x08006ddc
 80055a0:	08006e00 	.word	0x08006e00

080055a4 <_localeconv_r>:
 80055a4:	4800      	ldr	r0, [pc, #0]	; (80055a8 <_localeconv_r+0x4>)
 80055a6:	4770      	bx	lr
 80055a8:	20000164 	.word	0x20000164

080055ac <malloc>:
 80055ac:	4b02      	ldr	r3, [pc, #8]	; (80055b8 <malloc+0xc>)
 80055ae:	4601      	mov	r1, r0
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	f000 bc1d 	b.w	8005df0 <_malloc_r>
 80055b6:	bf00      	nop
 80055b8:	20000010 	.word	0x20000010

080055bc <memchr>:
 80055bc:	4603      	mov	r3, r0
 80055be:	b510      	push	{r4, lr}
 80055c0:	b2c9      	uxtb	r1, r1
 80055c2:	4402      	add	r2, r0
 80055c4:	4293      	cmp	r3, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	d101      	bne.n	80055ce <memchr+0x12>
 80055ca:	2000      	movs	r0, #0
 80055cc:	e003      	b.n	80055d6 <memchr+0x1a>
 80055ce:	7804      	ldrb	r4, [r0, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	428c      	cmp	r4, r1
 80055d4:	d1f6      	bne.n	80055c4 <memchr+0x8>
 80055d6:	bd10      	pop	{r4, pc}

080055d8 <memcpy>:
 80055d8:	440a      	add	r2, r1
 80055da:	4291      	cmp	r1, r2
 80055dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80055e0:	d100      	bne.n	80055e4 <memcpy+0xc>
 80055e2:	4770      	bx	lr
 80055e4:	b510      	push	{r4, lr}
 80055e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ea:	4291      	cmp	r1, r2
 80055ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055f0:	d1f9      	bne.n	80055e6 <memcpy+0xe>
 80055f2:	bd10      	pop	{r4, pc}

080055f4 <_Balloc>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80055f8:	4604      	mov	r4, r0
 80055fa:	460d      	mov	r5, r1
 80055fc:	b976      	cbnz	r6, 800561c <_Balloc+0x28>
 80055fe:	2010      	movs	r0, #16
 8005600:	f7ff ffd4 	bl	80055ac <malloc>
 8005604:	4602      	mov	r2, r0
 8005606:	6260      	str	r0, [r4, #36]	; 0x24
 8005608:	b920      	cbnz	r0, 8005614 <_Balloc+0x20>
 800560a:	2166      	movs	r1, #102	; 0x66
 800560c:	4b17      	ldr	r3, [pc, #92]	; (800566c <_Balloc+0x78>)
 800560e:	4818      	ldr	r0, [pc, #96]	; (8005670 <_Balloc+0x7c>)
 8005610:	f000 fdce 	bl	80061b0 <__assert_func>
 8005614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005618:	6006      	str	r6, [r0, #0]
 800561a:	60c6      	str	r6, [r0, #12]
 800561c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800561e:	68f3      	ldr	r3, [r6, #12]
 8005620:	b183      	cbz	r3, 8005644 <_Balloc+0x50>
 8005622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800562a:	b9b8      	cbnz	r0, 800565c <_Balloc+0x68>
 800562c:	2101      	movs	r1, #1
 800562e:	fa01 f605 	lsl.w	r6, r1, r5
 8005632:	1d72      	adds	r2, r6, #5
 8005634:	4620      	mov	r0, r4
 8005636:	0092      	lsls	r2, r2, #2
 8005638:	f000 fb5e 	bl	8005cf8 <_calloc_r>
 800563c:	b160      	cbz	r0, 8005658 <_Balloc+0x64>
 800563e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005642:	e00e      	b.n	8005662 <_Balloc+0x6e>
 8005644:	2221      	movs	r2, #33	; 0x21
 8005646:	2104      	movs	r1, #4
 8005648:	4620      	mov	r0, r4
 800564a:	f000 fb55 	bl	8005cf8 <_calloc_r>
 800564e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005650:	60f0      	str	r0, [r6, #12]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e4      	bne.n	8005622 <_Balloc+0x2e>
 8005658:	2000      	movs	r0, #0
 800565a:	bd70      	pop	{r4, r5, r6, pc}
 800565c:	6802      	ldr	r2, [r0, #0]
 800565e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005662:	2300      	movs	r3, #0
 8005664:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005668:	e7f7      	b.n	800565a <_Balloc+0x66>
 800566a:	bf00      	nop
 800566c:	08006e0d 	.word	0x08006e0d
 8005670:	08006e90 	.word	0x08006e90

08005674 <_Bfree>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005678:	4605      	mov	r5, r0
 800567a:	460c      	mov	r4, r1
 800567c:	b976      	cbnz	r6, 800569c <_Bfree+0x28>
 800567e:	2010      	movs	r0, #16
 8005680:	f7ff ff94 	bl	80055ac <malloc>
 8005684:	4602      	mov	r2, r0
 8005686:	6268      	str	r0, [r5, #36]	; 0x24
 8005688:	b920      	cbnz	r0, 8005694 <_Bfree+0x20>
 800568a:	218a      	movs	r1, #138	; 0x8a
 800568c:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <_Bfree+0x3c>)
 800568e:	4809      	ldr	r0, [pc, #36]	; (80056b4 <_Bfree+0x40>)
 8005690:	f000 fd8e 	bl	80061b0 <__assert_func>
 8005694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005698:	6006      	str	r6, [r0, #0]
 800569a:	60c6      	str	r6, [r0, #12]
 800569c:	b13c      	cbz	r4, 80056ae <_Bfree+0x3a>
 800569e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056a0:	6862      	ldr	r2, [r4, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056a8:	6021      	str	r1, [r4, #0]
 80056aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	08006e0d 	.word	0x08006e0d
 80056b4:	08006e90 	.word	0x08006e90

080056b8 <__multadd>:
 80056b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056bc:	4607      	mov	r7, r0
 80056be:	460c      	mov	r4, r1
 80056c0:	461e      	mov	r6, r3
 80056c2:	2000      	movs	r0, #0
 80056c4:	690d      	ldr	r5, [r1, #16]
 80056c6:	f101 0c14 	add.w	ip, r1, #20
 80056ca:	f8dc 3000 	ldr.w	r3, [ip]
 80056ce:	3001      	adds	r0, #1
 80056d0:	b299      	uxth	r1, r3
 80056d2:	fb02 6101 	mla	r1, r2, r1, r6
 80056d6:	0c1e      	lsrs	r6, r3, #16
 80056d8:	0c0b      	lsrs	r3, r1, #16
 80056da:	fb02 3306 	mla	r3, r2, r6, r3
 80056de:	b289      	uxth	r1, r1
 80056e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056e4:	4285      	cmp	r5, r0
 80056e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056ea:	f84c 1b04 	str.w	r1, [ip], #4
 80056ee:	dcec      	bgt.n	80056ca <__multadd+0x12>
 80056f0:	b30e      	cbz	r6, 8005736 <__multadd+0x7e>
 80056f2:	68a3      	ldr	r3, [r4, #8]
 80056f4:	42ab      	cmp	r3, r5
 80056f6:	dc19      	bgt.n	800572c <__multadd+0x74>
 80056f8:	6861      	ldr	r1, [r4, #4]
 80056fa:	4638      	mov	r0, r7
 80056fc:	3101      	adds	r1, #1
 80056fe:	f7ff ff79 	bl	80055f4 <_Balloc>
 8005702:	4680      	mov	r8, r0
 8005704:	b928      	cbnz	r0, 8005712 <__multadd+0x5a>
 8005706:	4602      	mov	r2, r0
 8005708:	21b5      	movs	r1, #181	; 0xb5
 800570a:	4b0c      	ldr	r3, [pc, #48]	; (800573c <__multadd+0x84>)
 800570c:	480c      	ldr	r0, [pc, #48]	; (8005740 <__multadd+0x88>)
 800570e:	f000 fd4f 	bl	80061b0 <__assert_func>
 8005712:	6922      	ldr	r2, [r4, #16]
 8005714:	f104 010c 	add.w	r1, r4, #12
 8005718:	3202      	adds	r2, #2
 800571a:	0092      	lsls	r2, r2, #2
 800571c:	300c      	adds	r0, #12
 800571e:	f7ff ff5b 	bl	80055d8 <memcpy>
 8005722:	4621      	mov	r1, r4
 8005724:	4638      	mov	r0, r7
 8005726:	f7ff ffa5 	bl	8005674 <_Bfree>
 800572a:	4644      	mov	r4, r8
 800572c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005730:	3501      	adds	r5, #1
 8005732:	615e      	str	r6, [r3, #20]
 8005734:	6125      	str	r5, [r4, #16]
 8005736:	4620      	mov	r0, r4
 8005738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800573c:	08006e7f 	.word	0x08006e7f
 8005740:	08006e90 	.word	0x08006e90

08005744 <__hi0bits>:
 8005744:	0c02      	lsrs	r2, r0, #16
 8005746:	0412      	lsls	r2, r2, #16
 8005748:	4603      	mov	r3, r0
 800574a:	b9ca      	cbnz	r2, 8005780 <__hi0bits+0x3c>
 800574c:	0403      	lsls	r3, r0, #16
 800574e:	2010      	movs	r0, #16
 8005750:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005754:	bf04      	itt	eq
 8005756:	021b      	lsleq	r3, r3, #8
 8005758:	3008      	addeq	r0, #8
 800575a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800575e:	bf04      	itt	eq
 8005760:	011b      	lsleq	r3, r3, #4
 8005762:	3004      	addeq	r0, #4
 8005764:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005768:	bf04      	itt	eq
 800576a:	009b      	lsleq	r3, r3, #2
 800576c:	3002      	addeq	r0, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	db05      	blt.n	800577e <__hi0bits+0x3a>
 8005772:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005776:	f100 0001 	add.w	r0, r0, #1
 800577a:	bf08      	it	eq
 800577c:	2020      	moveq	r0, #32
 800577e:	4770      	bx	lr
 8005780:	2000      	movs	r0, #0
 8005782:	e7e5      	b.n	8005750 <__hi0bits+0xc>

08005784 <__lo0bits>:
 8005784:	6803      	ldr	r3, [r0, #0]
 8005786:	4602      	mov	r2, r0
 8005788:	f013 0007 	ands.w	r0, r3, #7
 800578c:	d00b      	beq.n	80057a6 <__lo0bits+0x22>
 800578e:	07d9      	lsls	r1, r3, #31
 8005790:	d421      	bmi.n	80057d6 <__lo0bits+0x52>
 8005792:	0798      	lsls	r0, r3, #30
 8005794:	bf49      	itett	mi
 8005796:	085b      	lsrmi	r3, r3, #1
 8005798:	089b      	lsrpl	r3, r3, #2
 800579a:	2001      	movmi	r0, #1
 800579c:	6013      	strmi	r3, [r2, #0]
 800579e:	bf5c      	itt	pl
 80057a0:	2002      	movpl	r0, #2
 80057a2:	6013      	strpl	r3, [r2, #0]
 80057a4:	4770      	bx	lr
 80057a6:	b299      	uxth	r1, r3
 80057a8:	b909      	cbnz	r1, 80057ae <__lo0bits+0x2a>
 80057aa:	2010      	movs	r0, #16
 80057ac:	0c1b      	lsrs	r3, r3, #16
 80057ae:	b2d9      	uxtb	r1, r3
 80057b0:	b909      	cbnz	r1, 80057b6 <__lo0bits+0x32>
 80057b2:	3008      	adds	r0, #8
 80057b4:	0a1b      	lsrs	r3, r3, #8
 80057b6:	0719      	lsls	r1, r3, #28
 80057b8:	bf04      	itt	eq
 80057ba:	091b      	lsreq	r3, r3, #4
 80057bc:	3004      	addeq	r0, #4
 80057be:	0799      	lsls	r1, r3, #30
 80057c0:	bf04      	itt	eq
 80057c2:	089b      	lsreq	r3, r3, #2
 80057c4:	3002      	addeq	r0, #2
 80057c6:	07d9      	lsls	r1, r3, #31
 80057c8:	d403      	bmi.n	80057d2 <__lo0bits+0x4e>
 80057ca:	085b      	lsrs	r3, r3, #1
 80057cc:	f100 0001 	add.w	r0, r0, #1
 80057d0:	d003      	beq.n	80057da <__lo0bits+0x56>
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	4770      	bx	lr
 80057d6:	2000      	movs	r0, #0
 80057d8:	4770      	bx	lr
 80057da:	2020      	movs	r0, #32
 80057dc:	4770      	bx	lr
	...

080057e0 <__i2b>:
 80057e0:	b510      	push	{r4, lr}
 80057e2:	460c      	mov	r4, r1
 80057e4:	2101      	movs	r1, #1
 80057e6:	f7ff ff05 	bl	80055f4 <_Balloc>
 80057ea:	4602      	mov	r2, r0
 80057ec:	b928      	cbnz	r0, 80057fa <__i2b+0x1a>
 80057ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80057f2:	4b04      	ldr	r3, [pc, #16]	; (8005804 <__i2b+0x24>)
 80057f4:	4804      	ldr	r0, [pc, #16]	; (8005808 <__i2b+0x28>)
 80057f6:	f000 fcdb 	bl	80061b0 <__assert_func>
 80057fa:	2301      	movs	r3, #1
 80057fc:	6144      	str	r4, [r0, #20]
 80057fe:	6103      	str	r3, [r0, #16]
 8005800:	bd10      	pop	{r4, pc}
 8005802:	bf00      	nop
 8005804:	08006e7f 	.word	0x08006e7f
 8005808:	08006e90 	.word	0x08006e90

0800580c <__multiply>:
 800580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	4691      	mov	r9, r2
 8005812:	690a      	ldr	r2, [r1, #16]
 8005814:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005818:	460c      	mov	r4, r1
 800581a:	429a      	cmp	r2, r3
 800581c:	bfbe      	ittt	lt
 800581e:	460b      	movlt	r3, r1
 8005820:	464c      	movlt	r4, r9
 8005822:	4699      	movlt	r9, r3
 8005824:	6927      	ldr	r7, [r4, #16]
 8005826:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800582a:	68a3      	ldr	r3, [r4, #8]
 800582c:	6861      	ldr	r1, [r4, #4]
 800582e:	eb07 060a 	add.w	r6, r7, sl
 8005832:	42b3      	cmp	r3, r6
 8005834:	b085      	sub	sp, #20
 8005836:	bfb8      	it	lt
 8005838:	3101      	addlt	r1, #1
 800583a:	f7ff fedb 	bl	80055f4 <_Balloc>
 800583e:	b930      	cbnz	r0, 800584e <__multiply+0x42>
 8005840:	4602      	mov	r2, r0
 8005842:	f240 115d 	movw	r1, #349	; 0x15d
 8005846:	4b43      	ldr	r3, [pc, #268]	; (8005954 <__multiply+0x148>)
 8005848:	4843      	ldr	r0, [pc, #268]	; (8005958 <__multiply+0x14c>)
 800584a:	f000 fcb1 	bl	80061b0 <__assert_func>
 800584e:	f100 0514 	add.w	r5, r0, #20
 8005852:	462b      	mov	r3, r5
 8005854:	2200      	movs	r2, #0
 8005856:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800585a:	4543      	cmp	r3, r8
 800585c:	d321      	bcc.n	80058a2 <__multiply+0x96>
 800585e:	f104 0314 	add.w	r3, r4, #20
 8005862:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005866:	f109 0314 	add.w	r3, r9, #20
 800586a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800586e:	9202      	str	r2, [sp, #8]
 8005870:	1b3a      	subs	r2, r7, r4
 8005872:	3a15      	subs	r2, #21
 8005874:	f022 0203 	bic.w	r2, r2, #3
 8005878:	3204      	adds	r2, #4
 800587a:	f104 0115 	add.w	r1, r4, #21
 800587e:	428f      	cmp	r7, r1
 8005880:	bf38      	it	cc
 8005882:	2204      	movcc	r2, #4
 8005884:	9201      	str	r2, [sp, #4]
 8005886:	9a02      	ldr	r2, [sp, #8]
 8005888:	9303      	str	r3, [sp, #12]
 800588a:	429a      	cmp	r2, r3
 800588c:	d80c      	bhi.n	80058a8 <__multiply+0x9c>
 800588e:	2e00      	cmp	r6, #0
 8005890:	dd03      	ble.n	800589a <__multiply+0x8e>
 8005892:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005896:	2b00      	cmp	r3, #0
 8005898:	d059      	beq.n	800594e <__multiply+0x142>
 800589a:	6106      	str	r6, [r0, #16]
 800589c:	b005      	add	sp, #20
 800589e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a2:	f843 2b04 	str.w	r2, [r3], #4
 80058a6:	e7d8      	b.n	800585a <__multiply+0x4e>
 80058a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80058ac:	f1ba 0f00 	cmp.w	sl, #0
 80058b0:	d023      	beq.n	80058fa <__multiply+0xee>
 80058b2:	46a9      	mov	r9, r5
 80058b4:	f04f 0c00 	mov.w	ip, #0
 80058b8:	f104 0e14 	add.w	lr, r4, #20
 80058bc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80058c0:	f8d9 1000 	ldr.w	r1, [r9]
 80058c4:	fa1f fb82 	uxth.w	fp, r2
 80058c8:	b289      	uxth	r1, r1
 80058ca:	fb0a 110b 	mla	r1, sl, fp, r1
 80058ce:	4461      	add	r1, ip
 80058d0:	f8d9 c000 	ldr.w	ip, [r9]
 80058d4:	0c12      	lsrs	r2, r2, #16
 80058d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80058da:	fb0a c202 	mla	r2, sl, r2, ip
 80058de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80058e2:	b289      	uxth	r1, r1
 80058e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80058e8:	4577      	cmp	r7, lr
 80058ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058ee:	f849 1b04 	str.w	r1, [r9], #4
 80058f2:	d8e3      	bhi.n	80058bc <__multiply+0xb0>
 80058f4:	9a01      	ldr	r2, [sp, #4]
 80058f6:	f845 c002 	str.w	ip, [r5, r2]
 80058fa:	9a03      	ldr	r2, [sp, #12]
 80058fc:	3304      	adds	r3, #4
 80058fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005902:	f1b9 0f00 	cmp.w	r9, #0
 8005906:	d020      	beq.n	800594a <__multiply+0x13e>
 8005908:	46ae      	mov	lr, r5
 800590a:	f04f 0a00 	mov.w	sl, #0
 800590e:	6829      	ldr	r1, [r5, #0]
 8005910:	f104 0c14 	add.w	ip, r4, #20
 8005914:	f8bc b000 	ldrh.w	fp, [ip]
 8005918:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800591c:	b289      	uxth	r1, r1
 800591e:	fb09 220b 	mla	r2, r9, fp, r2
 8005922:	4492      	add	sl, r2
 8005924:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005928:	f84e 1b04 	str.w	r1, [lr], #4
 800592c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005930:	f8be 1000 	ldrh.w	r1, [lr]
 8005934:	0c12      	lsrs	r2, r2, #16
 8005936:	fb09 1102 	mla	r1, r9, r2, r1
 800593a:	4567      	cmp	r7, ip
 800593c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005940:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005944:	d8e6      	bhi.n	8005914 <__multiply+0x108>
 8005946:	9a01      	ldr	r2, [sp, #4]
 8005948:	50a9      	str	r1, [r5, r2]
 800594a:	3504      	adds	r5, #4
 800594c:	e79b      	b.n	8005886 <__multiply+0x7a>
 800594e:	3e01      	subs	r6, #1
 8005950:	e79d      	b.n	800588e <__multiply+0x82>
 8005952:	bf00      	nop
 8005954:	08006e7f 	.word	0x08006e7f
 8005958:	08006e90 	.word	0x08006e90

0800595c <__pow5mult>:
 800595c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005960:	4615      	mov	r5, r2
 8005962:	f012 0203 	ands.w	r2, r2, #3
 8005966:	4606      	mov	r6, r0
 8005968:	460f      	mov	r7, r1
 800596a:	d007      	beq.n	800597c <__pow5mult+0x20>
 800596c:	4c25      	ldr	r4, [pc, #148]	; (8005a04 <__pow5mult+0xa8>)
 800596e:	3a01      	subs	r2, #1
 8005970:	2300      	movs	r3, #0
 8005972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005976:	f7ff fe9f 	bl	80056b8 <__multadd>
 800597a:	4607      	mov	r7, r0
 800597c:	10ad      	asrs	r5, r5, #2
 800597e:	d03d      	beq.n	80059fc <__pow5mult+0xa0>
 8005980:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005982:	b97c      	cbnz	r4, 80059a4 <__pow5mult+0x48>
 8005984:	2010      	movs	r0, #16
 8005986:	f7ff fe11 	bl	80055ac <malloc>
 800598a:	4602      	mov	r2, r0
 800598c:	6270      	str	r0, [r6, #36]	; 0x24
 800598e:	b928      	cbnz	r0, 800599c <__pow5mult+0x40>
 8005990:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005994:	4b1c      	ldr	r3, [pc, #112]	; (8005a08 <__pow5mult+0xac>)
 8005996:	481d      	ldr	r0, [pc, #116]	; (8005a0c <__pow5mult+0xb0>)
 8005998:	f000 fc0a 	bl	80061b0 <__assert_func>
 800599c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059a0:	6004      	str	r4, [r0, #0]
 80059a2:	60c4      	str	r4, [r0, #12]
 80059a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80059a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059ac:	b94c      	cbnz	r4, 80059c2 <__pow5mult+0x66>
 80059ae:	f240 2171 	movw	r1, #625	; 0x271
 80059b2:	4630      	mov	r0, r6
 80059b4:	f7ff ff14 	bl	80057e0 <__i2b>
 80059b8:	2300      	movs	r3, #0
 80059ba:	4604      	mov	r4, r0
 80059bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80059c0:	6003      	str	r3, [r0, #0]
 80059c2:	f04f 0900 	mov.w	r9, #0
 80059c6:	07eb      	lsls	r3, r5, #31
 80059c8:	d50a      	bpl.n	80059e0 <__pow5mult+0x84>
 80059ca:	4639      	mov	r1, r7
 80059cc:	4622      	mov	r2, r4
 80059ce:	4630      	mov	r0, r6
 80059d0:	f7ff ff1c 	bl	800580c <__multiply>
 80059d4:	4680      	mov	r8, r0
 80059d6:	4639      	mov	r1, r7
 80059d8:	4630      	mov	r0, r6
 80059da:	f7ff fe4b 	bl	8005674 <_Bfree>
 80059de:	4647      	mov	r7, r8
 80059e0:	106d      	asrs	r5, r5, #1
 80059e2:	d00b      	beq.n	80059fc <__pow5mult+0xa0>
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	b938      	cbnz	r0, 80059f8 <__pow5mult+0x9c>
 80059e8:	4622      	mov	r2, r4
 80059ea:	4621      	mov	r1, r4
 80059ec:	4630      	mov	r0, r6
 80059ee:	f7ff ff0d 	bl	800580c <__multiply>
 80059f2:	6020      	str	r0, [r4, #0]
 80059f4:	f8c0 9000 	str.w	r9, [r0]
 80059f8:	4604      	mov	r4, r0
 80059fa:	e7e4      	b.n	80059c6 <__pow5mult+0x6a>
 80059fc:	4638      	mov	r0, r7
 80059fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a02:	bf00      	nop
 8005a04:	08006fe0 	.word	0x08006fe0
 8005a08:	08006e0d 	.word	0x08006e0d
 8005a0c:	08006e90 	.word	0x08006e90

08005a10 <__lshift>:
 8005a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a14:	460c      	mov	r4, r1
 8005a16:	4607      	mov	r7, r0
 8005a18:	4691      	mov	r9, r2
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	6849      	ldr	r1, [r1, #4]
 8005a1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a22:	68a3      	ldr	r3, [r4, #8]
 8005a24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a28:	f108 0601 	add.w	r6, r8, #1
 8005a2c:	42b3      	cmp	r3, r6
 8005a2e:	db0b      	blt.n	8005a48 <__lshift+0x38>
 8005a30:	4638      	mov	r0, r7
 8005a32:	f7ff fddf 	bl	80055f4 <_Balloc>
 8005a36:	4605      	mov	r5, r0
 8005a38:	b948      	cbnz	r0, 8005a4e <__lshift+0x3e>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005a40:	4b29      	ldr	r3, [pc, #164]	; (8005ae8 <__lshift+0xd8>)
 8005a42:	482a      	ldr	r0, [pc, #168]	; (8005aec <__lshift+0xdc>)
 8005a44:	f000 fbb4 	bl	80061b0 <__assert_func>
 8005a48:	3101      	adds	r1, #1
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	e7ee      	b.n	8005a2c <__lshift+0x1c>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f100 0114 	add.w	r1, r0, #20
 8005a54:	f100 0210 	add.w	r2, r0, #16
 8005a58:	4618      	mov	r0, r3
 8005a5a:	4553      	cmp	r3, sl
 8005a5c:	db37      	blt.n	8005ace <__lshift+0xbe>
 8005a5e:	6920      	ldr	r0, [r4, #16]
 8005a60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a64:	f104 0314 	add.w	r3, r4, #20
 8005a68:	f019 091f 	ands.w	r9, r9, #31
 8005a6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005a74:	d02f      	beq.n	8005ad6 <__lshift+0xc6>
 8005a76:	468a      	mov	sl, r1
 8005a78:	f04f 0c00 	mov.w	ip, #0
 8005a7c:	f1c9 0e20 	rsb	lr, r9, #32
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	fa02 f209 	lsl.w	r2, r2, r9
 8005a86:	ea42 020c 	orr.w	r2, r2, ip
 8005a8a:	f84a 2b04 	str.w	r2, [sl], #4
 8005a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a92:	4298      	cmp	r0, r3
 8005a94:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005a98:	d8f2      	bhi.n	8005a80 <__lshift+0x70>
 8005a9a:	1b03      	subs	r3, r0, r4
 8005a9c:	3b15      	subs	r3, #21
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	f104 0215 	add.w	r2, r4, #21
 8005aa8:	4290      	cmp	r0, r2
 8005aaa:	bf38      	it	cc
 8005aac:	2304      	movcc	r3, #4
 8005aae:	f841 c003 	str.w	ip, [r1, r3]
 8005ab2:	f1bc 0f00 	cmp.w	ip, #0
 8005ab6:	d001      	beq.n	8005abc <__lshift+0xac>
 8005ab8:	f108 0602 	add.w	r6, r8, #2
 8005abc:	3e01      	subs	r6, #1
 8005abe:	4638      	mov	r0, r7
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	612e      	str	r6, [r5, #16]
 8005ac4:	f7ff fdd6 	bl	8005674 <_Bfree>
 8005ac8:	4628      	mov	r0, r5
 8005aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ace:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	e7c1      	b.n	8005a5a <__lshift+0x4a>
 8005ad6:	3904      	subs	r1, #4
 8005ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005adc:	4298      	cmp	r0, r3
 8005ade:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ae2:	d8f9      	bhi.n	8005ad8 <__lshift+0xc8>
 8005ae4:	e7ea      	b.n	8005abc <__lshift+0xac>
 8005ae6:	bf00      	nop
 8005ae8:	08006e7f 	.word	0x08006e7f
 8005aec:	08006e90 	.word	0x08006e90

08005af0 <__mcmp>:
 8005af0:	4603      	mov	r3, r0
 8005af2:	690a      	ldr	r2, [r1, #16]
 8005af4:	6900      	ldr	r0, [r0, #16]
 8005af6:	b530      	push	{r4, r5, lr}
 8005af8:	1a80      	subs	r0, r0, r2
 8005afa:	d10d      	bne.n	8005b18 <__mcmp+0x28>
 8005afc:	3314      	adds	r3, #20
 8005afe:	3114      	adds	r1, #20
 8005b00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005b04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005b08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b10:	4295      	cmp	r5, r2
 8005b12:	d002      	beq.n	8005b1a <__mcmp+0x2a>
 8005b14:	d304      	bcc.n	8005b20 <__mcmp+0x30>
 8005b16:	2001      	movs	r0, #1
 8005b18:	bd30      	pop	{r4, r5, pc}
 8005b1a:	42a3      	cmp	r3, r4
 8005b1c:	d3f4      	bcc.n	8005b08 <__mcmp+0x18>
 8005b1e:	e7fb      	b.n	8005b18 <__mcmp+0x28>
 8005b20:	f04f 30ff 	mov.w	r0, #4294967295
 8005b24:	e7f8      	b.n	8005b18 <__mcmp+0x28>
	...

08005b28 <__mdiff>:
 8005b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	4607      	mov	r7, r0
 8005b30:	4611      	mov	r1, r2
 8005b32:	4628      	mov	r0, r5
 8005b34:	4614      	mov	r4, r2
 8005b36:	f7ff ffdb 	bl	8005af0 <__mcmp>
 8005b3a:	1e06      	subs	r6, r0, #0
 8005b3c:	d111      	bne.n	8005b62 <__mdiff+0x3a>
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4638      	mov	r0, r7
 8005b42:	f7ff fd57 	bl	80055f4 <_Balloc>
 8005b46:	4602      	mov	r2, r0
 8005b48:	b928      	cbnz	r0, 8005b56 <__mdiff+0x2e>
 8005b4a:	f240 2132 	movw	r1, #562	; 0x232
 8005b4e:	4b3a      	ldr	r3, [pc, #232]	; (8005c38 <__mdiff+0x110>)
 8005b50:	483a      	ldr	r0, [pc, #232]	; (8005c3c <__mdiff+0x114>)
 8005b52:	f000 fb2d 	bl	80061b0 <__assert_func>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b62:	bfa4      	itt	ge
 8005b64:	4623      	movge	r3, r4
 8005b66:	462c      	movge	r4, r5
 8005b68:	4638      	mov	r0, r7
 8005b6a:	6861      	ldr	r1, [r4, #4]
 8005b6c:	bfa6      	itte	ge
 8005b6e:	461d      	movge	r5, r3
 8005b70:	2600      	movge	r6, #0
 8005b72:	2601      	movlt	r6, #1
 8005b74:	f7ff fd3e 	bl	80055f4 <_Balloc>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	b918      	cbnz	r0, 8005b84 <__mdiff+0x5c>
 8005b7c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005b80:	4b2d      	ldr	r3, [pc, #180]	; (8005c38 <__mdiff+0x110>)
 8005b82:	e7e5      	b.n	8005b50 <__mdiff+0x28>
 8005b84:	f102 0814 	add.w	r8, r2, #20
 8005b88:	46c2      	mov	sl, r8
 8005b8a:	f04f 0c00 	mov.w	ip, #0
 8005b8e:	6927      	ldr	r7, [r4, #16]
 8005b90:	60c6      	str	r6, [r0, #12]
 8005b92:	692e      	ldr	r6, [r5, #16]
 8005b94:	f104 0014 	add.w	r0, r4, #20
 8005b98:	f105 0914 	add.w	r9, r5, #20
 8005b9c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005ba0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005ba4:	3410      	adds	r4, #16
 8005ba6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005baa:	f859 3b04 	ldr.w	r3, [r9], #4
 8005bae:	fa1f f18b 	uxth.w	r1, fp
 8005bb2:	448c      	add	ip, r1
 8005bb4:	b299      	uxth	r1, r3
 8005bb6:	0c1b      	lsrs	r3, r3, #16
 8005bb8:	ebac 0101 	sub.w	r1, ip, r1
 8005bbc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005bc0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005bc4:	b289      	uxth	r1, r1
 8005bc6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005bca:	454e      	cmp	r6, r9
 8005bcc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005bd0:	f84a 3b04 	str.w	r3, [sl], #4
 8005bd4:	d8e7      	bhi.n	8005ba6 <__mdiff+0x7e>
 8005bd6:	1b73      	subs	r3, r6, r5
 8005bd8:	3b15      	subs	r3, #21
 8005bda:	f023 0303 	bic.w	r3, r3, #3
 8005bde:	3515      	adds	r5, #21
 8005be0:	3304      	adds	r3, #4
 8005be2:	42ae      	cmp	r6, r5
 8005be4:	bf38      	it	cc
 8005be6:	2304      	movcc	r3, #4
 8005be8:	4418      	add	r0, r3
 8005bea:	4443      	add	r3, r8
 8005bec:	461e      	mov	r6, r3
 8005bee:	4605      	mov	r5, r0
 8005bf0:	4575      	cmp	r5, lr
 8005bf2:	d30e      	bcc.n	8005c12 <__mdiff+0xea>
 8005bf4:	f10e 0103 	add.w	r1, lr, #3
 8005bf8:	1a09      	subs	r1, r1, r0
 8005bfa:	f021 0103 	bic.w	r1, r1, #3
 8005bfe:	3803      	subs	r0, #3
 8005c00:	4586      	cmp	lr, r0
 8005c02:	bf38      	it	cc
 8005c04:	2100      	movcc	r1, #0
 8005c06:	4419      	add	r1, r3
 8005c08:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005c0c:	b18b      	cbz	r3, 8005c32 <__mdiff+0x10a>
 8005c0e:	6117      	str	r7, [r2, #16]
 8005c10:	e7a4      	b.n	8005b5c <__mdiff+0x34>
 8005c12:	f855 8b04 	ldr.w	r8, [r5], #4
 8005c16:	fa1f f188 	uxth.w	r1, r8
 8005c1a:	4461      	add	r1, ip
 8005c1c:	140c      	asrs	r4, r1, #16
 8005c1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005c22:	b289      	uxth	r1, r1
 8005c24:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c28:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005c2c:	f846 1b04 	str.w	r1, [r6], #4
 8005c30:	e7de      	b.n	8005bf0 <__mdiff+0xc8>
 8005c32:	3f01      	subs	r7, #1
 8005c34:	e7e8      	b.n	8005c08 <__mdiff+0xe0>
 8005c36:	bf00      	nop
 8005c38:	08006e7f 	.word	0x08006e7f
 8005c3c:	08006e90 	.word	0x08006e90

08005c40 <__d2b>:
 8005c40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c44:	2101      	movs	r1, #1
 8005c46:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005c4a:	4690      	mov	r8, r2
 8005c4c:	461d      	mov	r5, r3
 8005c4e:	f7ff fcd1 	bl	80055f4 <_Balloc>
 8005c52:	4604      	mov	r4, r0
 8005c54:	b930      	cbnz	r0, 8005c64 <__d2b+0x24>
 8005c56:	4602      	mov	r2, r0
 8005c58:	f240 310a 	movw	r1, #778	; 0x30a
 8005c5c:	4b24      	ldr	r3, [pc, #144]	; (8005cf0 <__d2b+0xb0>)
 8005c5e:	4825      	ldr	r0, [pc, #148]	; (8005cf4 <__d2b+0xb4>)
 8005c60:	f000 faa6 	bl	80061b0 <__assert_func>
 8005c64:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005c68:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005c6c:	bb2d      	cbnz	r5, 8005cba <__d2b+0x7a>
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	f1b8 0300 	subs.w	r3, r8, #0
 8005c74:	d026      	beq.n	8005cc4 <__d2b+0x84>
 8005c76:	4668      	mov	r0, sp
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	f7ff fd83 	bl	8005784 <__lo0bits>
 8005c7e:	9900      	ldr	r1, [sp, #0]
 8005c80:	b1f0      	cbz	r0, 8005cc0 <__d2b+0x80>
 8005c82:	9a01      	ldr	r2, [sp, #4]
 8005c84:	f1c0 0320 	rsb	r3, r0, #32
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	40c2      	lsrs	r2, r0
 8005c90:	6163      	str	r3, [r4, #20]
 8005c92:	9201      	str	r2, [sp, #4]
 8005c94:	9b01      	ldr	r3, [sp, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	bf14      	ite	ne
 8005c9a:	2102      	movne	r1, #2
 8005c9c:	2101      	moveq	r1, #1
 8005c9e:	61a3      	str	r3, [r4, #24]
 8005ca0:	6121      	str	r1, [r4, #16]
 8005ca2:	b1c5      	cbz	r5, 8005cd6 <__d2b+0x96>
 8005ca4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ca8:	4405      	add	r5, r0
 8005caa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005cae:	603d      	str	r5, [r7, #0]
 8005cb0:	6030      	str	r0, [r6, #0]
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	b002      	add	sp, #8
 8005cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cbe:	e7d6      	b.n	8005c6e <__d2b+0x2e>
 8005cc0:	6161      	str	r1, [r4, #20]
 8005cc2:	e7e7      	b.n	8005c94 <__d2b+0x54>
 8005cc4:	a801      	add	r0, sp, #4
 8005cc6:	f7ff fd5d 	bl	8005784 <__lo0bits>
 8005cca:	2101      	movs	r1, #1
 8005ccc:	9b01      	ldr	r3, [sp, #4]
 8005cce:	6121      	str	r1, [r4, #16]
 8005cd0:	6163      	str	r3, [r4, #20]
 8005cd2:	3020      	adds	r0, #32
 8005cd4:	e7e5      	b.n	8005ca2 <__d2b+0x62>
 8005cd6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005cda:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005cde:	6038      	str	r0, [r7, #0]
 8005ce0:	6918      	ldr	r0, [r3, #16]
 8005ce2:	f7ff fd2f 	bl	8005744 <__hi0bits>
 8005ce6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005cea:	6031      	str	r1, [r6, #0]
 8005cec:	e7e1      	b.n	8005cb2 <__d2b+0x72>
 8005cee:	bf00      	nop
 8005cf0:	08006e7f 	.word	0x08006e7f
 8005cf4:	08006e90 	.word	0x08006e90

08005cf8 <_calloc_r>:
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	fba1 5402 	umull	r5, r4, r1, r2
 8005cfe:	b934      	cbnz	r4, 8005d0e <_calloc_r+0x16>
 8005d00:	4629      	mov	r1, r5
 8005d02:	f000 f875 	bl	8005df0 <_malloc_r>
 8005d06:	4606      	mov	r6, r0
 8005d08:	b928      	cbnz	r0, 8005d16 <_calloc_r+0x1e>
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	bd70      	pop	{r4, r5, r6, pc}
 8005d0e:	220c      	movs	r2, #12
 8005d10:	2600      	movs	r6, #0
 8005d12:	6002      	str	r2, [r0, #0]
 8005d14:	e7f9      	b.n	8005d0a <_calloc_r+0x12>
 8005d16:	462a      	mov	r2, r5
 8005d18:	4621      	mov	r1, r4
 8005d1a:	f7fe f93f 	bl	8003f9c <memset>
 8005d1e:	e7f4      	b.n	8005d0a <_calloc_r+0x12>

08005d20 <_free_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4605      	mov	r5, r0
 8005d24:	2900      	cmp	r1, #0
 8005d26:	d040      	beq.n	8005daa <_free_r+0x8a>
 8005d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d2c:	1f0c      	subs	r4, r1, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bfb8      	it	lt
 8005d32:	18e4      	addlt	r4, r4, r3
 8005d34:	f000 fa98 	bl	8006268 <__malloc_lock>
 8005d38:	4a1c      	ldr	r2, [pc, #112]	; (8005dac <_free_r+0x8c>)
 8005d3a:	6813      	ldr	r3, [r2, #0]
 8005d3c:	b933      	cbnz	r3, 8005d4c <_free_r+0x2c>
 8005d3e:	6063      	str	r3, [r4, #4]
 8005d40:	6014      	str	r4, [r2, #0]
 8005d42:	4628      	mov	r0, r5
 8005d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d48:	f000 ba94 	b.w	8006274 <__malloc_unlock>
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	d908      	bls.n	8005d62 <_free_r+0x42>
 8005d50:	6820      	ldr	r0, [r4, #0]
 8005d52:	1821      	adds	r1, r4, r0
 8005d54:	428b      	cmp	r3, r1
 8005d56:	bf01      	itttt	eq
 8005d58:	6819      	ldreq	r1, [r3, #0]
 8005d5a:	685b      	ldreq	r3, [r3, #4]
 8005d5c:	1809      	addeq	r1, r1, r0
 8005d5e:	6021      	streq	r1, [r4, #0]
 8005d60:	e7ed      	b.n	8005d3e <_free_r+0x1e>
 8005d62:	461a      	mov	r2, r3
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	b10b      	cbz	r3, 8005d6c <_free_r+0x4c>
 8005d68:	42a3      	cmp	r3, r4
 8005d6a:	d9fa      	bls.n	8005d62 <_free_r+0x42>
 8005d6c:	6811      	ldr	r1, [r2, #0]
 8005d6e:	1850      	adds	r0, r2, r1
 8005d70:	42a0      	cmp	r0, r4
 8005d72:	d10b      	bne.n	8005d8c <_free_r+0x6c>
 8005d74:	6820      	ldr	r0, [r4, #0]
 8005d76:	4401      	add	r1, r0
 8005d78:	1850      	adds	r0, r2, r1
 8005d7a:	4283      	cmp	r3, r0
 8005d7c:	6011      	str	r1, [r2, #0]
 8005d7e:	d1e0      	bne.n	8005d42 <_free_r+0x22>
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	4401      	add	r1, r0
 8005d86:	6011      	str	r1, [r2, #0]
 8005d88:	6053      	str	r3, [r2, #4]
 8005d8a:	e7da      	b.n	8005d42 <_free_r+0x22>
 8005d8c:	d902      	bls.n	8005d94 <_free_r+0x74>
 8005d8e:	230c      	movs	r3, #12
 8005d90:	602b      	str	r3, [r5, #0]
 8005d92:	e7d6      	b.n	8005d42 <_free_r+0x22>
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	1821      	adds	r1, r4, r0
 8005d98:	428b      	cmp	r3, r1
 8005d9a:	bf01      	itttt	eq
 8005d9c:	6819      	ldreq	r1, [r3, #0]
 8005d9e:	685b      	ldreq	r3, [r3, #4]
 8005da0:	1809      	addeq	r1, r1, r0
 8005da2:	6021      	streq	r1, [r4, #0]
 8005da4:	6063      	str	r3, [r4, #4]
 8005da6:	6054      	str	r4, [r2, #4]
 8005da8:	e7cb      	b.n	8005d42 <_free_r+0x22>
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	200002c4 	.word	0x200002c4

08005db0 <sbrk_aligned>:
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	4e0e      	ldr	r6, [pc, #56]	; (8005dec <sbrk_aligned+0x3c>)
 8005db4:	460c      	mov	r4, r1
 8005db6:	6831      	ldr	r1, [r6, #0]
 8005db8:	4605      	mov	r5, r0
 8005dba:	b911      	cbnz	r1, 8005dc2 <sbrk_aligned+0x12>
 8005dbc:	f000 f9e8 	bl	8006190 <_sbrk_r>
 8005dc0:	6030      	str	r0, [r6, #0]
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	f000 f9e3 	bl	8006190 <_sbrk_r>
 8005dca:	1c43      	adds	r3, r0, #1
 8005dcc:	d00a      	beq.n	8005de4 <sbrk_aligned+0x34>
 8005dce:	1cc4      	adds	r4, r0, #3
 8005dd0:	f024 0403 	bic.w	r4, r4, #3
 8005dd4:	42a0      	cmp	r0, r4
 8005dd6:	d007      	beq.n	8005de8 <sbrk_aligned+0x38>
 8005dd8:	1a21      	subs	r1, r4, r0
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f000 f9d8 	bl	8006190 <_sbrk_r>
 8005de0:	3001      	adds	r0, #1
 8005de2:	d101      	bne.n	8005de8 <sbrk_aligned+0x38>
 8005de4:	f04f 34ff 	mov.w	r4, #4294967295
 8005de8:	4620      	mov	r0, r4
 8005dea:	bd70      	pop	{r4, r5, r6, pc}
 8005dec:	200002c8 	.word	0x200002c8

08005df0 <_malloc_r>:
 8005df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df4:	1ccd      	adds	r5, r1, #3
 8005df6:	f025 0503 	bic.w	r5, r5, #3
 8005dfa:	3508      	adds	r5, #8
 8005dfc:	2d0c      	cmp	r5, #12
 8005dfe:	bf38      	it	cc
 8005e00:	250c      	movcc	r5, #12
 8005e02:	2d00      	cmp	r5, #0
 8005e04:	4607      	mov	r7, r0
 8005e06:	db01      	blt.n	8005e0c <_malloc_r+0x1c>
 8005e08:	42a9      	cmp	r1, r5
 8005e0a:	d905      	bls.n	8005e18 <_malloc_r+0x28>
 8005e0c:	230c      	movs	r3, #12
 8005e0e:	2600      	movs	r6, #0
 8005e10:	603b      	str	r3, [r7, #0]
 8005e12:	4630      	mov	r0, r6
 8005e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e18:	4e2e      	ldr	r6, [pc, #184]	; (8005ed4 <_malloc_r+0xe4>)
 8005e1a:	f000 fa25 	bl	8006268 <__malloc_lock>
 8005e1e:	6833      	ldr	r3, [r6, #0]
 8005e20:	461c      	mov	r4, r3
 8005e22:	bb34      	cbnz	r4, 8005e72 <_malloc_r+0x82>
 8005e24:	4629      	mov	r1, r5
 8005e26:	4638      	mov	r0, r7
 8005e28:	f7ff ffc2 	bl	8005db0 <sbrk_aligned>
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	4604      	mov	r4, r0
 8005e30:	d14d      	bne.n	8005ece <_malloc_r+0xde>
 8005e32:	6834      	ldr	r4, [r6, #0]
 8005e34:	4626      	mov	r6, r4
 8005e36:	2e00      	cmp	r6, #0
 8005e38:	d140      	bne.n	8005ebc <_malloc_r+0xcc>
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4638      	mov	r0, r7
 8005e40:	eb04 0803 	add.w	r8, r4, r3
 8005e44:	f000 f9a4 	bl	8006190 <_sbrk_r>
 8005e48:	4580      	cmp	r8, r0
 8005e4a:	d13a      	bne.n	8005ec2 <_malloc_r+0xd2>
 8005e4c:	6821      	ldr	r1, [r4, #0]
 8005e4e:	3503      	adds	r5, #3
 8005e50:	1a6d      	subs	r5, r5, r1
 8005e52:	f025 0503 	bic.w	r5, r5, #3
 8005e56:	3508      	adds	r5, #8
 8005e58:	2d0c      	cmp	r5, #12
 8005e5a:	bf38      	it	cc
 8005e5c:	250c      	movcc	r5, #12
 8005e5e:	4638      	mov	r0, r7
 8005e60:	4629      	mov	r1, r5
 8005e62:	f7ff ffa5 	bl	8005db0 <sbrk_aligned>
 8005e66:	3001      	adds	r0, #1
 8005e68:	d02b      	beq.n	8005ec2 <_malloc_r+0xd2>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	442b      	add	r3, r5
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	e00e      	b.n	8005e90 <_malloc_r+0xa0>
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	1b52      	subs	r2, r2, r5
 8005e76:	d41e      	bmi.n	8005eb6 <_malloc_r+0xc6>
 8005e78:	2a0b      	cmp	r2, #11
 8005e7a:	d916      	bls.n	8005eaa <_malloc_r+0xba>
 8005e7c:	1961      	adds	r1, r4, r5
 8005e7e:	42a3      	cmp	r3, r4
 8005e80:	6025      	str	r5, [r4, #0]
 8005e82:	bf18      	it	ne
 8005e84:	6059      	strne	r1, [r3, #4]
 8005e86:	6863      	ldr	r3, [r4, #4]
 8005e88:	bf08      	it	eq
 8005e8a:	6031      	streq	r1, [r6, #0]
 8005e8c:	5162      	str	r2, [r4, r5]
 8005e8e:	604b      	str	r3, [r1, #4]
 8005e90:	4638      	mov	r0, r7
 8005e92:	f104 060b 	add.w	r6, r4, #11
 8005e96:	f000 f9ed 	bl	8006274 <__malloc_unlock>
 8005e9a:	f026 0607 	bic.w	r6, r6, #7
 8005e9e:	1d23      	adds	r3, r4, #4
 8005ea0:	1af2      	subs	r2, r6, r3
 8005ea2:	d0b6      	beq.n	8005e12 <_malloc_r+0x22>
 8005ea4:	1b9b      	subs	r3, r3, r6
 8005ea6:	50a3      	str	r3, [r4, r2]
 8005ea8:	e7b3      	b.n	8005e12 <_malloc_r+0x22>
 8005eaa:	6862      	ldr	r2, [r4, #4]
 8005eac:	42a3      	cmp	r3, r4
 8005eae:	bf0c      	ite	eq
 8005eb0:	6032      	streq	r2, [r6, #0]
 8005eb2:	605a      	strne	r2, [r3, #4]
 8005eb4:	e7ec      	b.n	8005e90 <_malloc_r+0xa0>
 8005eb6:	4623      	mov	r3, r4
 8005eb8:	6864      	ldr	r4, [r4, #4]
 8005eba:	e7b2      	b.n	8005e22 <_malloc_r+0x32>
 8005ebc:	4634      	mov	r4, r6
 8005ebe:	6876      	ldr	r6, [r6, #4]
 8005ec0:	e7b9      	b.n	8005e36 <_malloc_r+0x46>
 8005ec2:	230c      	movs	r3, #12
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	f000 f9d4 	bl	8006274 <__malloc_unlock>
 8005ecc:	e7a1      	b.n	8005e12 <_malloc_r+0x22>
 8005ece:	6025      	str	r5, [r4, #0]
 8005ed0:	e7de      	b.n	8005e90 <_malloc_r+0xa0>
 8005ed2:	bf00      	nop
 8005ed4:	200002c4 	.word	0x200002c4

08005ed8 <__ssputs_r>:
 8005ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	688e      	ldr	r6, [r1, #8]
 8005ede:	4682      	mov	sl, r0
 8005ee0:	429e      	cmp	r6, r3
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	4690      	mov	r8, r2
 8005ee6:	461f      	mov	r7, r3
 8005ee8:	d838      	bhi.n	8005f5c <__ssputs_r+0x84>
 8005eea:	898a      	ldrh	r2, [r1, #12]
 8005eec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ef0:	d032      	beq.n	8005f58 <__ssputs_r+0x80>
 8005ef2:	6825      	ldr	r5, [r4, #0]
 8005ef4:	6909      	ldr	r1, [r1, #16]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	eba5 0901 	sub.w	r9, r5, r1
 8005efc:	6965      	ldr	r5, [r4, #20]
 8005efe:	444b      	add	r3, r9
 8005f00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f08:	106d      	asrs	r5, r5, #1
 8005f0a:	429d      	cmp	r5, r3
 8005f0c:	bf38      	it	cc
 8005f0e:	461d      	movcc	r5, r3
 8005f10:	0553      	lsls	r3, r2, #21
 8005f12:	d531      	bpl.n	8005f78 <__ssputs_r+0xa0>
 8005f14:	4629      	mov	r1, r5
 8005f16:	f7ff ff6b 	bl	8005df0 <_malloc_r>
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	b950      	cbnz	r0, 8005f34 <__ssputs_r+0x5c>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	f04f 30ff 	mov.w	r0, #4294967295
 8005f24:	f8ca 3000 	str.w	r3, [sl]
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f2e:	81a3      	strh	r3, [r4, #12]
 8005f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f34:	464a      	mov	r2, r9
 8005f36:	6921      	ldr	r1, [r4, #16]
 8005f38:	f7ff fb4e 	bl	80055d8 <memcpy>
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f46:	81a3      	strh	r3, [r4, #12]
 8005f48:	6126      	str	r6, [r4, #16]
 8005f4a:	444e      	add	r6, r9
 8005f4c:	6026      	str	r6, [r4, #0]
 8005f4e:	463e      	mov	r6, r7
 8005f50:	6165      	str	r5, [r4, #20]
 8005f52:	eba5 0509 	sub.w	r5, r5, r9
 8005f56:	60a5      	str	r5, [r4, #8]
 8005f58:	42be      	cmp	r6, r7
 8005f5a:	d900      	bls.n	8005f5e <__ssputs_r+0x86>
 8005f5c:	463e      	mov	r6, r7
 8005f5e:	4632      	mov	r2, r6
 8005f60:	4641      	mov	r1, r8
 8005f62:	6820      	ldr	r0, [r4, #0]
 8005f64:	f000 f966 	bl	8006234 <memmove>
 8005f68:	68a3      	ldr	r3, [r4, #8]
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	1b9b      	subs	r3, r3, r6
 8005f6e:	60a3      	str	r3, [r4, #8]
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	4433      	add	r3, r6
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	e7db      	b.n	8005f30 <__ssputs_r+0x58>
 8005f78:	462a      	mov	r2, r5
 8005f7a:	f000 f981 	bl	8006280 <_realloc_r>
 8005f7e:	4606      	mov	r6, r0
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d1e1      	bne.n	8005f48 <__ssputs_r+0x70>
 8005f84:	4650      	mov	r0, sl
 8005f86:	6921      	ldr	r1, [r4, #16]
 8005f88:	f7ff feca 	bl	8005d20 <_free_r>
 8005f8c:	e7c7      	b.n	8005f1e <__ssputs_r+0x46>
	...

08005f90 <_svfiprintf_r>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	4698      	mov	r8, r3
 8005f96:	898b      	ldrh	r3, [r1, #12]
 8005f98:	4607      	mov	r7, r0
 8005f9a:	061b      	lsls	r3, r3, #24
 8005f9c:	460d      	mov	r5, r1
 8005f9e:	4614      	mov	r4, r2
 8005fa0:	b09d      	sub	sp, #116	; 0x74
 8005fa2:	d50e      	bpl.n	8005fc2 <_svfiprintf_r+0x32>
 8005fa4:	690b      	ldr	r3, [r1, #16]
 8005fa6:	b963      	cbnz	r3, 8005fc2 <_svfiprintf_r+0x32>
 8005fa8:	2140      	movs	r1, #64	; 0x40
 8005faa:	f7ff ff21 	bl	8005df0 <_malloc_r>
 8005fae:	6028      	str	r0, [r5, #0]
 8005fb0:	6128      	str	r0, [r5, #16]
 8005fb2:	b920      	cbnz	r0, 8005fbe <_svfiprintf_r+0x2e>
 8005fb4:	230c      	movs	r3, #12
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fbc:	e0d1      	b.n	8006162 <_svfiprintf_r+0x1d2>
 8005fbe:	2340      	movs	r3, #64	; 0x40
 8005fc0:	616b      	str	r3, [r5, #20]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fc6:	2320      	movs	r3, #32
 8005fc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fcc:	2330      	movs	r3, #48	; 0x30
 8005fce:	f04f 0901 	mov.w	r9, #1
 8005fd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800617c <_svfiprintf_r+0x1ec>
 8005fda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fde:	4623      	mov	r3, r4
 8005fe0:	469a      	mov	sl, r3
 8005fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fe6:	b10a      	cbz	r2, 8005fec <_svfiprintf_r+0x5c>
 8005fe8:	2a25      	cmp	r2, #37	; 0x25
 8005fea:	d1f9      	bne.n	8005fe0 <_svfiprintf_r+0x50>
 8005fec:	ebba 0b04 	subs.w	fp, sl, r4
 8005ff0:	d00b      	beq.n	800600a <_svfiprintf_r+0x7a>
 8005ff2:	465b      	mov	r3, fp
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	f7ff ff6d 	bl	8005ed8 <__ssputs_r>
 8005ffe:	3001      	adds	r0, #1
 8006000:	f000 80aa 	beq.w	8006158 <_svfiprintf_r+0x1c8>
 8006004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006006:	445a      	add	r2, fp
 8006008:	9209      	str	r2, [sp, #36]	; 0x24
 800600a:	f89a 3000 	ldrb.w	r3, [sl]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 80a2 	beq.w	8006158 <_svfiprintf_r+0x1c8>
 8006014:	2300      	movs	r3, #0
 8006016:	f04f 32ff 	mov.w	r2, #4294967295
 800601a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800601e:	f10a 0a01 	add.w	sl, sl, #1
 8006022:	9304      	str	r3, [sp, #16]
 8006024:	9307      	str	r3, [sp, #28]
 8006026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800602a:	931a      	str	r3, [sp, #104]	; 0x68
 800602c:	4654      	mov	r4, sl
 800602e:	2205      	movs	r2, #5
 8006030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006034:	4851      	ldr	r0, [pc, #324]	; (800617c <_svfiprintf_r+0x1ec>)
 8006036:	f7ff fac1 	bl	80055bc <memchr>
 800603a:	9a04      	ldr	r2, [sp, #16]
 800603c:	b9d8      	cbnz	r0, 8006076 <_svfiprintf_r+0xe6>
 800603e:	06d0      	lsls	r0, r2, #27
 8006040:	bf44      	itt	mi
 8006042:	2320      	movmi	r3, #32
 8006044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006048:	0711      	lsls	r1, r2, #28
 800604a:	bf44      	itt	mi
 800604c:	232b      	movmi	r3, #43	; 0x2b
 800604e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006052:	f89a 3000 	ldrb.w	r3, [sl]
 8006056:	2b2a      	cmp	r3, #42	; 0x2a
 8006058:	d015      	beq.n	8006086 <_svfiprintf_r+0xf6>
 800605a:	4654      	mov	r4, sl
 800605c:	2000      	movs	r0, #0
 800605e:	f04f 0c0a 	mov.w	ip, #10
 8006062:	9a07      	ldr	r2, [sp, #28]
 8006064:	4621      	mov	r1, r4
 8006066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800606a:	3b30      	subs	r3, #48	; 0x30
 800606c:	2b09      	cmp	r3, #9
 800606e:	d94e      	bls.n	800610e <_svfiprintf_r+0x17e>
 8006070:	b1b0      	cbz	r0, 80060a0 <_svfiprintf_r+0x110>
 8006072:	9207      	str	r2, [sp, #28]
 8006074:	e014      	b.n	80060a0 <_svfiprintf_r+0x110>
 8006076:	eba0 0308 	sub.w	r3, r0, r8
 800607a:	fa09 f303 	lsl.w	r3, r9, r3
 800607e:	4313      	orrs	r3, r2
 8006080:	46a2      	mov	sl, r4
 8006082:	9304      	str	r3, [sp, #16]
 8006084:	e7d2      	b.n	800602c <_svfiprintf_r+0x9c>
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	1d19      	adds	r1, r3, #4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	9103      	str	r1, [sp, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	bfbb      	ittet	lt
 8006092:	425b      	neglt	r3, r3
 8006094:	f042 0202 	orrlt.w	r2, r2, #2
 8006098:	9307      	strge	r3, [sp, #28]
 800609a:	9307      	strlt	r3, [sp, #28]
 800609c:	bfb8      	it	lt
 800609e:	9204      	strlt	r2, [sp, #16]
 80060a0:	7823      	ldrb	r3, [r4, #0]
 80060a2:	2b2e      	cmp	r3, #46	; 0x2e
 80060a4:	d10c      	bne.n	80060c0 <_svfiprintf_r+0x130>
 80060a6:	7863      	ldrb	r3, [r4, #1]
 80060a8:	2b2a      	cmp	r3, #42	; 0x2a
 80060aa:	d135      	bne.n	8006118 <_svfiprintf_r+0x188>
 80060ac:	9b03      	ldr	r3, [sp, #12]
 80060ae:	3402      	adds	r4, #2
 80060b0:	1d1a      	adds	r2, r3, #4
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	9203      	str	r2, [sp, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bfb8      	it	lt
 80060ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80060be:	9305      	str	r3, [sp, #20]
 80060c0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006180 <_svfiprintf_r+0x1f0>
 80060c4:	2203      	movs	r2, #3
 80060c6:	4650      	mov	r0, sl
 80060c8:	7821      	ldrb	r1, [r4, #0]
 80060ca:	f7ff fa77 	bl	80055bc <memchr>
 80060ce:	b140      	cbz	r0, 80060e2 <_svfiprintf_r+0x152>
 80060d0:	2340      	movs	r3, #64	; 0x40
 80060d2:	eba0 000a 	sub.w	r0, r0, sl
 80060d6:	fa03 f000 	lsl.w	r0, r3, r0
 80060da:	9b04      	ldr	r3, [sp, #16]
 80060dc:	3401      	adds	r4, #1
 80060de:	4303      	orrs	r3, r0
 80060e0:	9304      	str	r3, [sp, #16]
 80060e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e6:	2206      	movs	r2, #6
 80060e8:	4826      	ldr	r0, [pc, #152]	; (8006184 <_svfiprintf_r+0x1f4>)
 80060ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060ee:	f7ff fa65 	bl	80055bc <memchr>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d038      	beq.n	8006168 <_svfiprintf_r+0x1d8>
 80060f6:	4b24      	ldr	r3, [pc, #144]	; (8006188 <_svfiprintf_r+0x1f8>)
 80060f8:	bb1b      	cbnz	r3, 8006142 <_svfiprintf_r+0x1b2>
 80060fa:	9b03      	ldr	r3, [sp, #12]
 80060fc:	3307      	adds	r3, #7
 80060fe:	f023 0307 	bic.w	r3, r3, #7
 8006102:	3308      	adds	r3, #8
 8006104:	9303      	str	r3, [sp, #12]
 8006106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006108:	4433      	add	r3, r6
 800610a:	9309      	str	r3, [sp, #36]	; 0x24
 800610c:	e767      	b.n	8005fde <_svfiprintf_r+0x4e>
 800610e:	460c      	mov	r4, r1
 8006110:	2001      	movs	r0, #1
 8006112:	fb0c 3202 	mla	r2, ip, r2, r3
 8006116:	e7a5      	b.n	8006064 <_svfiprintf_r+0xd4>
 8006118:	2300      	movs	r3, #0
 800611a:	f04f 0c0a 	mov.w	ip, #10
 800611e:	4619      	mov	r1, r3
 8006120:	3401      	adds	r4, #1
 8006122:	9305      	str	r3, [sp, #20]
 8006124:	4620      	mov	r0, r4
 8006126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800612a:	3a30      	subs	r2, #48	; 0x30
 800612c:	2a09      	cmp	r2, #9
 800612e:	d903      	bls.n	8006138 <_svfiprintf_r+0x1a8>
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0c5      	beq.n	80060c0 <_svfiprintf_r+0x130>
 8006134:	9105      	str	r1, [sp, #20]
 8006136:	e7c3      	b.n	80060c0 <_svfiprintf_r+0x130>
 8006138:	4604      	mov	r4, r0
 800613a:	2301      	movs	r3, #1
 800613c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006140:	e7f0      	b.n	8006124 <_svfiprintf_r+0x194>
 8006142:	ab03      	add	r3, sp, #12
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	462a      	mov	r2, r5
 8006148:	4638      	mov	r0, r7
 800614a:	4b10      	ldr	r3, [pc, #64]	; (800618c <_svfiprintf_r+0x1fc>)
 800614c:	a904      	add	r1, sp, #16
 800614e:	f7fd ffcb 	bl	80040e8 <_printf_float>
 8006152:	1c42      	adds	r2, r0, #1
 8006154:	4606      	mov	r6, r0
 8006156:	d1d6      	bne.n	8006106 <_svfiprintf_r+0x176>
 8006158:	89ab      	ldrh	r3, [r5, #12]
 800615a:	065b      	lsls	r3, r3, #25
 800615c:	f53f af2c 	bmi.w	8005fb8 <_svfiprintf_r+0x28>
 8006160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006162:	b01d      	add	sp, #116	; 0x74
 8006164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006168:	ab03      	add	r3, sp, #12
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	462a      	mov	r2, r5
 800616e:	4638      	mov	r0, r7
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <_svfiprintf_r+0x1fc>)
 8006172:	a904      	add	r1, sp, #16
 8006174:	f7fe fa54 	bl	8004620 <_printf_i>
 8006178:	e7eb      	b.n	8006152 <_svfiprintf_r+0x1c2>
 800617a:	bf00      	nop
 800617c:	08006fec 	.word	0x08006fec
 8006180:	08006ff2 	.word	0x08006ff2
 8006184:	08006ff6 	.word	0x08006ff6
 8006188:	080040e9 	.word	0x080040e9
 800618c:	08005ed9 	.word	0x08005ed9

08006190 <_sbrk_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	2300      	movs	r3, #0
 8006194:	4d05      	ldr	r5, [pc, #20]	; (80061ac <_sbrk_r+0x1c>)
 8006196:	4604      	mov	r4, r0
 8006198:	4608      	mov	r0, r1
 800619a:	602b      	str	r3, [r5, #0]
 800619c:	f7fb f9f4 	bl	8001588 <_sbrk>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d102      	bne.n	80061aa <_sbrk_r+0x1a>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	b103      	cbz	r3, 80061aa <_sbrk_r+0x1a>
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	200002cc 	.word	0x200002cc

080061b0 <__assert_func>:
 80061b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061b2:	4614      	mov	r4, r2
 80061b4:	461a      	mov	r2, r3
 80061b6:	4b09      	ldr	r3, [pc, #36]	; (80061dc <__assert_func+0x2c>)
 80061b8:	4605      	mov	r5, r0
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68d8      	ldr	r0, [r3, #12]
 80061be:	b14c      	cbz	r4, 80061d4 <__assert_func+0x24>
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <__assert_func+0x30>)
 80061c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061c6:	9100      	str	r1, [sp, #0]
 80061c8:	462b      	mov	r3, r5
 80061ca:	4906      	ldr	r1, [pc, #24]	; (80061e4 <__assert_func+0x34>)
 80061cc:	f000 f80e 	bl	80061ec <fiprintf>
 80061d0:	f000 faaa 	bl	8006728 <abort>
 80061d4:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <__assert_func+0x38>)
 80061d6:	461c      	mov	r4, r3
 80061d8:	e7f3      	b.n	80061c2 <__assert_func+0x12>
 80061da:	bf00      	nop
 80061dc:	20000010 	.word	0x20000010
 80061e0:	08006ffd 	.word	0x08006ffd
 80061e4:	0800700a 	.word	0x0800700a
 80061e8:	08007038 	.word	0x08007038

080061ec <fiprintf>:
 80061ec:	b40e      	push	{r1, r2, r3}
 80061ee:	b503      	push	{r0, r1, lr}
 80061f0:	4601      	mov	r1, r0
 80061f2:	ab03      	add	r3, sp, #12
 80061f4:	4805      	ldr	r0, [pc, #20]	; (800620c <fiprintf+0x20>)
 80061f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061fa:	6800      	ldr	r0, [r0, #0]
 80061fc:	9301      	str	r3, [sp, #4]
 80061fe:	f000 f895 	bl	800632c <_vfiprintf_r>
 8006202:	b002      	add	sp, #8
 8006204:	f85d eb04 	ldr.w	lr, [sp], #4
 8006208:	b003      	add	sp, #12
 800620a:	4770      	bx	lr
 800620c:	20000010 	.word	0x20000010

08006210 <__ascii_mbtowc>:
 8006210:	b082      	sub	sp, #8
 8006212:	b901      	cbnz	r1, 8006216 <__ascii_mbtowc+0x6>
 8006214:	a901      	add	r1, sp, #4
 8006216:	b142      	cbz	r2, 800622a <__ascii_mbtowc+0x1a>
 8006218:	b14b      	cbz	r3, 800622e <__ascii_mbtowc+0x1e>
 800621a:	7813      	ldrb	r3, [r2, #0]
 800621c:	600b      	str	r3, [r1, #0]
 800621e:	7812      	ldrb	r2, [r2, #0]
 8006220:	1e10      	subs	r0, r2, #0
 8006222:	bf18      	it	ne
 8006224:	2001      	movne	r0, #1
 8006226:	b002      	add	sp, #8
 8006228:	4770      	bx	lr
 800622a:	4610      	mov	r0, r2
 800622c:	e7fb      	b.n	8006226 <__ascii_mbtowc+0x16>
 800622e:	f06f 0001 	mvn.w	r0, #1
 8006232:	e7f8      	b.n	8006226 <__ascii_mbtowc+0x16>

08006234 <memmove>:
 8006234:	4288      	cmp	r0, r1
 8006236:	b510      	push	{r4, lr}
 8006238:	eb01 0402 	add.w	r4, r1, r2
 800623c:	d902      	bls.n	8006244 <memmove+0x10>
 800623e:	4284      	cmp	r4, r0
 8006240:	4623      	mov	r3, r4
 8006242:	d807      	bhi.n	8006254 <memmove+0x20>
 8006244:	1e43      	subs	r3, r0, #1
 8006246:	42a1      	cmp	r1, r4
 8006248:	d008      	beq.n	800625c <memmove+0x28>
 800624a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800624e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006252:	e7f8      	b.n	8006246 <memmove+0x12>
 8006254:	4601      	mov	r1, r0
 8006256:	4402      	add	r2, r0
 8006258:	428a      	cmp	r2, r1
 800625a:	d100      	bne.n	800625e <memmove+0x2a>
 800625c:	bd10      	pop	{r4, pc}
 800625e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006266:	e7f7      	b.n	8006258 <memmove+0x24>

08006268 <__malloc_lock>:
 8006268:	4801      	ldr	r0, [pc, #4]	; (8006270 <__malloc_lock+0x8>)
 800626a:	f000 bc19 	b.w	8006aa0 <__retarget_lock_acquire_recursive>
 800626e:	bf00      	nop
 8006270:	200002d0 	.word	0x200002d0

08006274 <__malloc_unlock>:
 8006274:	4801      	ldr	r0, [pc, #4]	; (800627c <__malloc_unlock+0x8>)
 8006276:	f000 bc14 	b.w	8006aa2 <__retarget_lock_release_recursive>
 800627a:	bf00      	nop
 800627c:	200002d0 	.word	0x200002d0

08006280 <_realloc_r>:
 8006280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006284:	4680      	mov	r8, r0
 8006286:	4614      	mov	r4, r2
 8006288:	460e      	mov	r6, r1
 800628a:	b921      	cbnz	r1, 8006296 <_realloc_r+0x16>
 800628c:	4611      	mov	r1, r2
 800628e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006292:	f7ff bdad 	b.w	8005df0 <_malloc_r>
 8006296:	b92a      	cbnz	r2, 80062a4 <_realloc_r+0x24>
 8006298:	f7ff fd42 	bl	8005d20 <_free_r>
 800629c:	4625      	mov	r5, r4
 800629e:	4628      	mov	r0, r5
 80062a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a4:	f000 fc64 	bl	8006b70 <_malloc_usable_size_r>
 80062a8:	4284      	cmp	r4, r0
 80062aa:	4607      	mov	r7, r0
 80062ac:	d802      	bhi.n	80062b4 <_realloc_r+0x34>
 80062ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062b2:	d812      	bhi.n	80062da <_realloc_r+0x5a>
 80062b4:	4621      	mov	r1, r4
 80062b6:	4640      	mov	r0, r8
 80062b8:	f7ff fd9a 	bl	8005df0 <_malloc_r>
 80062bc:	4605      	mov	r5, r0
 80062be:	2800      	cmp	r0, #0
 80062c0:	d0ed      	beq.n	800629e <_realloc_r+0x1e>
 80062c2:	42bc      	cmp	r4, r7
 80062c4:	4622      	mov	r2, r4
 80062c6:	4631      	mov	r1, r6
 80062c8:	bf28      	it	cs
 80062ca:	463a      	movcs	r2, r7
 80062cc:	f7ff f984 	bl	80055d8 <memcpy>
 80062d0:	4631      	mov	r1, r6
 80062d2:	4640      	mov	r0, r8
 80062d4:	f7ff fd24 	bl	8005d20 <_free_r>
 80062d8:	e7e1      	b.n	800629e <_realloc_r+0x1e>
 80062da:	4635      	mov	r5, r6
 80062dc:	e7df      	b.n	800629e <_realloc_r+0x1e>

080062de <__sfputc_r>:
 80062de:	6893      	ldr	r3, [r2, #8]
 80062e0:	b410      	push	{r4}
 80062e2:	3b01      	subs	r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	6093      	str	r3, [r2, #8]
 80062e8:	da07      	bge.n	80062fa <__sfputc_r+0x1c>
 80062ea:	6994      	ldr	r4, [r2, #24]
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	db01      	blt.n	80062f4 <__sfputc_r+0x16>
 80062f0:	290a      	cmp	r1, #10
 80062f2:	d102      	bne.n	80062fa <__sfputc_r+0x1c>
 80062f4:	bc10      	pop	{r4}
 80062f6:	f000 b949 	b.w	800658c <__swbuf_r>
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	1c58      	adds	r0, r3, #1
 80062fe:	6010      	str	r0, [r2, #0]
 8006300:	7019      	strb	r1, [r3, #0]
 8006302:	4608      	mov	r0, r1
 8006304:	bc10      	pop	{r4}
 8006306:	4770      	bx	lr

08006308 <__sfputs_r>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	4606      	mov	r6, r0
 800630c:	460f      	mov	r7, r1
 800630e:	4614      	mov	r4, r2
 8006310:	18d5      	adds	r5, r2, r3
 8006312:	42ac      	cmp	r4, r5
 8006314:	d101      	bne.n	800631a <__sfputs_r+0x12>
 8006316:	2000      	movs	r0, #0
 8006318:	e007      	b.n	800632a <__sfputs_r+0x22>
 800631a:	463a      	mov	r2, r7
 800631c:	4630      	mov	r0, r6
 800631e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006322:	f7ff ffdc 	bl	80062de <__sfputc_r>
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	d1f3      	bne.n	8006312 <__sfputs_r+0xa>
 800632a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800632c <_vfiprintf_r>:
 800632c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006330:	460d      	mov	r5, r1
 8006332:	4614      	mov	r4, r2
 8006334:	4698      	mov	r8, r3
 8006336:	4606      	mov	r6, r0
 8006338:	b09d      	sub	sp, #116	; 0x74
 800633a:	b118      	cbz	r0, 8006344 <_vfiprintf_r+0x18>
 800633c:	6983      	ldr	r3, [r0, #24]
 800633e:	b90b      	cbnz	r3, 8006344 <_vfiprintf_r+0x18>
 8006340:	f000 fb10 	bl	8006964 <__sinit>
 8006344:	4b89      	ldr	r3, [pc, #548]	; (800656c <_vfiprintf_r+0x240>)
 8006346:	429d      	cmp	r5, r3
 8006348:	d11b      	bne.n	8006382 <_vfiprintf_r+0x56>
 800634a:	6875      	ldr	r5, [r6, #4]
 800634c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800634e:	07d9      	lsls	r1, r3, #31
 8006350:	d405      	bmi.n	800635e <_vfiprintf_r+0x32>
 8006352:	89ab      	ldrh	r3, [r5, #12]
 8006354:	059a      	lsls	r2, r3, #22
 8006356:	d402      	bmi.n	800635e <_vfiprintf_r+0x32>
 8006358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800635a:	f000 fba1 	bl	8006aa0 <__retarget_lock_acquire_recursive>
 800635e:	89ab      	ldrh	r3, [r5, #12]
 8006360:	071b      	lsls	r3, r3, #28
 8006362:	d501      	bpl.n	8006368 <_vfiprintf_r+0x3c>
 8006364:	692b      	ldr	r3, [r5, #16]
 8006366:	b9eb      	cbnz	r3, 80063a4 <_vfiprintf_r+0x78>
 8006368:	4629      	mov	r1, r5
 800636a:	4630      	mov	r0, r6
 800636c:	f000 f96e 	bl	800664c <__swsetup_r>
 8006370:	b1c0      	cbz	r0, 80063a4 <_vfiprintf_r+0x78>
 8006372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006374:	07dc      	lsls	r4, r3, #31
 8006376:	d50e      	bpl.n	8006396 <_vfiprintf_r+0x6a>
 8006378:	f04f 30ff 	mov.w	r0, #4294967295
 800637c:	b01d      	add	sp, #116	; 0x74
 800637e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006382:	4b7b      	ldr	r3, [pc, #492]	; (8006570 <_vfiprintf_r+0x244>)
 8006384:	429d      	cmp	r5, r3
 8006386:	d101      	bne.n	800638c <_vfiprintf_r+0x60>
 8006388:	68b5      	ldr	r5, [r6, #8]
 800638a:	e7df      	b.n	800634c <_vfiprintf_r+0x20>
 800638c:	4b79      	ldr	r3, [pc, #484]	; (8006574 <_vfiprintf_r+0x248>)
 800638e:	429d      	cmp	r5, r3
 8006390:	bf08      	it	eq
 8006392:	68f5      	ldreq	r5, [r6, #12]
 8006394:	e7da      	b.n	800634c <_vfiprintf_r+0x20>
 8006396:	89ab      	ldrh	r3, [r5, #12]
 8006398:	0598      	lsls	r0, r3, #22
 800639a:	d4ed      	bmi.n	8006378 <_vfiprintf_r+0x4c>
 800639c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800639e:	f000 fb80 	bl	8006aa2 <__retarget_lock_release_recursive>
 80063a2:	e7e9      	b.n	8006378 <_vfiprintf_r+0x4c>
 80063a4:	2300      	movs	r3, #0
 80063a6:	9309      	str	r3, [sp, #36]	; 0x24
 80063a8:	2320      	movs	r3, #32
 80063aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063ae:	2330      	movs	r3, #48	; 0x30
 80063b0:	f04f 0901 	mov.w	r9, #1
 80063b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80063b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006578 <_vfiprintf_r+0x24c>
 80063bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063c0:	4623      	mov	r3, r4
 80063c2:	469a      	mov	sl, r3
 80063c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063c8:	b10a      	cbz	r2, 80063ce <_vfiprintf_r+0xa2>
 80063ca:	2a25      	cmp	r2, #37	; 0x25
 80063cc:	d1f9      	bne.n	80063c2 <_vfiprintf_r+0x96>
 80063ce:	ebba 0b04 	subs.w	fp, sl, r4
 80063d2:	d00b      	beq.n	80063ec <_vfiprintf_r+0xc0>
 80063d4:	465b      	mov	r3, fp
 80063d6:	4622      	mov	r2, r4
 80063d8:	4629      	mov	r1, r5
 80063da:	4630      	mov	r0, r6
 80063dc:	f7ff ff94 	bl	8006308 <__sfputs_r>
 80063e0:	3001      	adds	r0, #1
 80063e2:	f000 80aa 	beq.w	800653a <_vfiprintf_r+0x20e>
 80063e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063e8:	445a      	add	r2, fp
 80063ea:	9209      	str	r2, [sp, #36]	; 0x24
 80063ec:	f89a 3000 	ldrb.w	r3, [sl]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 80a2 	beq.w	800653a <_vfiprintf_r+0x20e>
 80063f6:	2300      	movs	r3, #0
 80063f8:	f04f 32ff 	mov.w	r2, #4294967295
 80063fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006400:	f10a 0a01 	add.w	sl, sl, #1
 8006404:	9304      	str	r3, [sp, #16]
 8006406:	9307      	str	r3, [sp, #28]
 8006408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800640c:	931a      	str	r3, [sp, #104]	; 0x68
 800640e:	4654      	mov	r4, sl
 8006410:	2205      	movs	r2, #5
 8006412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006416:	4858      	ldr	r0, [pc, #352]	; (8006578 <_vfiprintf_r+0x24c>)
 8006418:	f7ff f8d0 	bl	80055bc <memchr>
 800641c:	9a04      	ldr	r2, [sp, #16]
 800641e:	b9d8      	cbnz	r0, 8006458 <_vfiprintf_r+0x12c>
 8006420:	06d1      	lsls	r1, r2, #27
 8006422:	bf44      	itt	mi
 8006424:	2320      	movmi	r3, #32
 8006426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800642a:	0713      	lsls	r3, r2, #28
 800642c:	bf44      	itt	mi
 800642e:	232b      	movmi	r3, #43	; 0x2b
 8006430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006434:	f89a 3000 	ldrb.w	r3, [sl]
 8006438:	2b2a      	cmp	r3, #42	; 0x2a
 800643a:	d015      	beq.n	8006468 <_vfiprintf_r+0x13c>
 800643c:	4654      	mov	r4, sl
 800643e:	2000      	movs	r0, #0
 8006440:	f04f 0c0a 	mov.w	ip, #10
 8006444:	9a07      	ldr	r2, [sp, #28]
 8006446:	4621      	mov	r1, r4
 8006448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800644c:	3b30      	subs	r3, #48	; 0x30
 800644e:	2b09      	cmp	r3, #9
 8006450:	d94e      	bls.n	80064f0 <_vfiprintf_r+0x1c4>
 8006452:	b1b0      	cbz	r0, 8006482 <_vfiprintf_r+0x156>
 8006454:	9207      	str	r2, [sp, #28]
 8006456:	e014      	b.n	8006482 <_vfiprintf_r+0x156>
 8006458:	eba0 0308 	sub.w	r3, r0, r8
 800645c:	fa09 f303 	lsl.w	r3, r9, r3
 8006460:	4313      	orrs	r3, r2
 8006462:	46a2      	mov	sl, r4
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	e7d2      	b.n	800640e <_vfiprintf_r+0xe2>
 8006468:	9b03      	ldr	r3, [sp, #12]
 800646a:	1d19      	adds	r1, r3, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	9103      	str	r1, [sp, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	bfbb      	ittet	lt
 8006474:	425b      	neglt	r3, r3
 8006476:	f042 0202 	orrlt.w	r2, r2, #2
 800647a:	9307      	strge	r3, [sp, #28]
 800647c:	9307      	strlt	r3, [sp, #28]
 800647e:	bfb8      	it	lt
 8006480:	9204      	strlt	r2, [sp, #16]
 8006482:	7823      	ldrb	r3, [r4, #0]
 8006484:	2b2e      	cmp	r3, #46	; 0x2e
 8006486:	d10c      	bne.n	80064a2 <_vfiprintf_r+0x176>
 8006488:	7863      	ldrb	r3, [r4, #1]
 800648a:	2b2a      	cmp	r3, #42	; 0x2a
 800648c:	d135      	bne.n	80064fa <_vfiprintf_r+0x1ce>
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	3402      	adds	r4, #2
 8006492:	1d1a      	adds	r2, r3, #4
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	9203      	str	r2, [sp, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	bfb8      	it	lt
 800649c:	f04f 33ff 	movlt.w	r3, #4294967295
 80064a0:	9305      	str	r3, [sp, #20]
 80064a2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800657c <_vfiprintf_r+0x250>
 80064a6:	2203      	movs	r2, #3
 80064a8:	4650      	mov	r0, sl
 80064aa:	7821      	ldrb	r1, [r4, #0]
 80064ac:	f7ff f886 	bl	80055bc <memchr>
 80064b0:	b140      	cbz	r0, 80064c4 <_vfiprintf_r+0x198>
 80064b2:	2340      	movs	r3, #64	; 0x40
 80064b4:	eba0 000a 	sub.w	r0, r0, sl
 80064b8:	fa03 f000 	lsl.w	r0, r3, r0
 80064bc:	9b04      	ldr	r3, [sp, #16]
 80064be:	3401      	adds	r4, #1
 80064c0:	4303      	orrs	r3, r0
 80064c2:	9304      	str	r3, [sp, #16]
 80064c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c8:	2206      	movs	r2, #6
 80064ca:	482d      	ldr	r0, [pc, #180]	; (8006580 <_vfiprintf_r+0x254>)
 80064cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064d0:	f7ff f874 	bl	80055bc <memchr>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d03f      	beq.n	8006558 <_vfiprintf_r+0x22c>
 80064d8:	4b2a      	ldr	r3, [pc, #168]	; (8006584 <_vfiprintf_r+0x258>)
 80064da:	bb1b      	cbnz	r3, 8006524 <_vfiprintf_r+0x1f8>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	3307      	adds	r3, #7
 80064e0:	f023 0307 	bic.w	r3, r3, #7
 80064e4:	3308      	adds	r3, #8
 80064e6:	9303      	str	r3, [sp, #12]
 80064e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ea:	443b      	add	r3, r7
 80064ec:	9309      	str	r3, [sp, #36]	; 0x24
 80064ee:	e767      	b.n	80063c0 <_vfiprintf_r+0x94>
 80064f0:	460c      	mov	r4, r1
 80064f2:	2001      	movs	r0, #1
 80064f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064f8:	e7a5      	b.n	8006446 <_vfiprintf_r+0x11a>
 80064fa:	2300      	movs	r3, #0
 80064fc:	f04f 0c0a 	mov.w	ip, #10
 8006500:	4619      	mov	r1, r3
 8006502:	3401      	adds	r4, #1
 8006504:	9305      	str	r3, [sp, #20]
 8006506:	4620      	mov	r0, r4
 8006508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800650c:	3a30      	subs	r2, #48	; 0x30
 800650e:	2a09      	cmp	r2, #9
 8006510:	d903      	bls.n	800651a <_vfiprintf_r+0x1ee>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0c5      	beq.n	80064a2 <_vfiprintf_r+0x176>
 8006516:	9105      	str	r1, [sp, #20]
 8006518:	e7c3      	b.n	80064a2 <_vfiprintf_r+0x176>
 800651a:	4604      	mov	r4, r0
 800651c:	2301      	movs	r3, #1
 800651e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006522:	e7f0      	b.n	8006506 <_vfiprintf_r+0x1da>
 8006524:	ab03      	add	r3, sp, #12
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	462a      	mov	r2, r5
 800652a:	4630      	mov	r0, r6
 800652c:	4b16      	ldr	r3, [pc, #88]	; (8006588 <_vfiprintf_r+0x25c>)
 800652e:	a904      	add	r1, sp, #16
 8006530:	f7fd fdda 	bl	80040e8 <_printf_float>
 8006534:	4607      	mov	r7, r0
 8006536:	1c78      	adds	r0, r7, #1
 8006538:	d1d6      	bne.n	80064e8 <_vfiprintf_r+0x1bc>
 800653a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800653c:	07d9      	lsls	r1, r3, #31
 800653e:	d405      	bmi.n	800654c <_vfiprintf_r+0x220>
 8006540:	89ab      	ldrh	r3, [r5, #12]
 8006542:	059a      	lsls	r2, r3, #22
 8006544:	d402      	bmi.n	800654c <_vfiprintf_r+0x220>
 8006546:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006548:	f000 faab 	bl	8006aa2 <__retarget_lock_release_recursive>
 800654c:	89ab      	ldrh	r3, [r5, #12]
 800654e:	065b      	lsls	r3, r3, #25
 8006550:	f53f af12 	bmi.w	8006378 <_vfiprintf_r+0x4c>
 8006554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006556:	e711      	b.n	800637c <_vfiprintf_r+0x50>
 8006558:	ab03      	add	r3, sp, #12
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	462a      	mov	r2, r5
 800655e:	4630      	mov	r0, r6
 8006560:	4b09      	ldr	r3, [pc, #36]	; (8006588 <_vfiprintf_r+0x25c>)
 8006562:	a904      	add	r1, sp, #16
 8006564:	f7fe f85c 	bl	8004620 <_printf_i>
 8006568:	e7e4      	b.n	8006534 <_vfiprintf_r+0x208>
 800656a:	bf00      	nop
 800656c:	08007164 	.word	0x08007164
 8006570:	08007184 	.word	0x08007184
 8006574:	08007144 	.word	0x08007144
 8006578:	08006fec 	.word	0x08006fec
 800657c:	08006ff2 	.word	0x08006ff2
 8006580:	08006ff6 	.word	0x08006ff6
 8006584:	080040e9 	.word	0x080040e9
 8006588:	08006309 	.word	0x08006309

0800658c <__swbuf_r>:
 800658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658e:	460e      	mov	r6, r1
 8006590:	4614      	mov	r4, r2
 8006592:	4605      	mov	r5, r0
 8006594:	b118      	cbz	r0, 800659e <__swbuf_r+0x12>
 8006596:	6983      	ldr	r3, [r0, #24]
 8006598:	b90b      	cbnz	r3, 800659e <__swbuf_r+0x12>
 800659a:	f000 f9e3 	bl	8006964 <__sinit>
 800659e:	4b21      	ldr	r3, [pc, #132]	; (8006624 <__swbuf_r+0x98>)
 80065a0:	429c      	cmp	r4, r3
 80065a2:	d12b      	bne.n	80065fc <__swbuf_r+0x70>
 80065a4:	686c      	ldr	r4, [r5, #4]
 80065a6:	69a3      	ldr	r3, [r4, #24]
 80065a8:	60a3      	str	r3, [r4, #8]
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	071a      	lsls	r2, r3, #28
 80065ae:	d52f      	bpl.n	8006610 <__swbuf_r+0x84>
 80065b0:	6923      	ldr	r3, [r4, #16]
 80065b2:	b36b      	cbz	r3, 8006610 <__swbuf_r+0x84>
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	b2f6      	uxtb	r6, r6
 80065ba:	1ac0      	subs	r0, r0, r3
 80065bc:	6963      	ldr	r3, [r4, #20]
 80065be:	4637      	mov	r7, r6
 80065c0:	4283      	cmp	r3, r0
 80065c2:	dc04      	bgt.n	80065ce <__swbuf_r+0x42>
 80065c4:	4621      	mov	r1, r4
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 f938 	bl	800683c <_fflush_r>
 80065cc:	bb30      	cbnz	r0, 800661c <__swbuf_r+0x90>
 80065ce:	68a3      	ldr	r3, [r4, #8]
 80065d0:	3001      	adds	r0, #1
 80065d2:	3b01      	subs	r3, #1
 80065d4:	60a3      	str	r3, [r4, #8]
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	6022      	str	r2, [r4, #0]
 80065dc:	701e      	strb	r6, [r3, #0]
 80065de:	6963      	ldr	r3, [r4, #20]
 80065e0:	4283      	cmp	r3, r0
 80065e2:	d004      	beq.n	80065ee <__swbuf_r+0x62>
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	07db      	lsls	r3, r3, #31
 80065e8:	d506      	bpl.n	80065f8 <__swbuf_r+0x6c>
 80065ea:	2e0a      	cmp	r6, #10
 80065ec:	d104      	bne.n	80065f8 <__swbuf_r+0x6c>
 80065ee:	4621      	mov	r1, r4
 80065f0:	4628      	mov	r0, r5
 80065f2:	f000 f923 	bl	800683c <_fflush_r>
 80065f6:	b988      	cbnz	r0, 800661c <__swbuf_r+0x90>
 80065f8:	4638      	mov	r0, r7
 80065fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065fc:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <__swbuf_r+0x9c>)
 80065fe:	429c      	cmp	r4, r3
 8006600:	d101      	bne.n	8006606 <__swbuf_r+0x7a>
 8006602:	68ac      	ldr	r4, [r5, #8]
 8006604:	e7cf      	b.n	80065a6 <__swbuf_r+0x1a>
 8006606:	4b09      	ldr	r3, [pc, #36]	; (800662c <__swbuf_r+0xa0>)
 8006608:	429c      	cmp	r4, r3
 800660a:	bf08      	it	eq
 800660c:	68ec      	ldreq	r4, [r5, #12]
 800660e:	e7ca      	b.n	80065a6 <__swbuf_r+0x1a>
 8006610:	4621      	mov	r1, r4
 8006612:	4628      	mov	r0, r5
 8006614:	f000 f81a 	bl	800664c <__swsetup_r>
 8006618:	2800      	cmp	r0, #0
 800661a:	d0cb      	beq.n	80065b4 <__swbuf_r+0x28>
 800661c:	f04f 37ff 	mov.w	r7, #4294967295
 8006620:	e7ea      	b.n	80065f8 <__swbuf_r+0x6c>
 8006622:	bf00      	nop
 8006624:	08007164 	.word	0x08007164
 8006628:	08007184 	.word	0x08007184
 800662c:	08007144 	.word	0x08007144

08006630 <__ascii_wctomb>:
 8006630:	4603      	mov	r3, r0
 8006632:	4608      	mov	r0, r1
 8006634:	b141      	cbz	r1, 8006648 <__ascii_wctomb+0x18>
 8006636:	2aff      	cmp	r2, #255	; 0xff
 8006638:	d904      	bls.n	8006644 <__ascii_wctomb+0x14>
 800663a:	228a      	movs	r2, #138	; 0x8a
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	4770      	bx	lr
 8006644:	2001      	movs	r0, #1
 8006646:	700a      	strb	r2, [r1, #0]
 8006648:	4770      	bx	lr
	...

0800664c <__swsetup_r>:
 800664c:	4b32      	ldr	r3, [pc, #200]	; (8006718 <__swsetup_r+0xcc>)
 800664e:	b570      	push	{r4, r5, r6, lr}
 8006650:	681d      	ldr	r5, [r3, #0]
 8006652:	4606      	mov	r6, r0
 8006654:	460c      	mov	r4, r1
 8006656:	b125      	cbz	r5, 8006662 <__swsetup_r+0x16>
 8006658:	69ab      	ldr	r3, [r5, #24]
 800665a:	b913      	cbnz	r3, 8006662 <__swsetup_r+0x16>
 800665c:	4628      	mov	r0, r5
 800665e:	f000 f981 	bl	8006964 <__sinit>
 8006662:	4b2e      	ldr	r3, [pc, #184]	; (800671c <__swsetup_r+0xd0>)
 8006664:	429c      	cmp	r4, r3
 8006666:	d10f      	bne.n	8006688 <__swsetup_r+0x3c>
 8006668:	686c      	ldr	r4, [r5, #4]
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006670:	0719      	lsls	r1, r3, #28
 8006672:	d42c      	bmi.n	80066ce <__swsetup_r+0x82>
 8006674:	06dd      	lsls	r5, r3, #27
 8006676:	d411      	bmi.n	800669c <__swsetup_r+0x50>
 8006678:	2309      	movs	r3, #9
 800667a:	6033      	str	r3, [r6, #0]
 800667c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006680:	f04f 30ff 	mov.w	r0, #4294967295
 8006684:	81a3      	strh	r3, [r4, #12]
 8006686:	e03e      	b.n	8006706 <__swsetup_r+0xba>
 8006688:	4b25      	ldr	r3, [pc, #148]	; (8006720 <__swsetup_r+0xd4>)
 800668a:	429c      	cmp	r4, r3
 800668c:	d101      	bne.n	8006692 <__swsetup_r+0x46>
 800668e:	68ac      	ldr	r4, [r5, #8]
 8006690:	e7eb      	b.n	800666a <__swsetup_r+0x1e>
 8006692:	4b24      	ldr	r3, [pc, #144]	; (8006724 <__swsetup_r+0xd8>)
 8006694:	429c      	cmp	r4, r3
 8006696:	bf08      	it	eq
 8006698:	68ec      	ldreq	r4, [r5, #12]
 800669a:	e7e6      	b.n	800666a <__swsetup_r+0x1e>
 800669c:	0758      	lsls	r0, r3, #29
 800669e:	d512      	bpl.n	80066c6 <__swsetup_r+0x7a>
 80066a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066a2:	b141      	cbz	r1, 80066b6 <__swsetup_r+0x6a>
 80066a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066a8:	4299      	cmp	r1, r3
 80066aa:	d002      	beq.n	80066b2 <__swsetup_r+0x66>
 80066ac:	4630      	mov	r0, r6
 80066ae:	f7ff fb37 	bl	8005d20 <_free_r>
 80066b2:	2300      	movs	r3, #0
 80066b4:	6363      	str	r3, [r4, #52]	; 0x34
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066bc:	81a3      	strh	r3, [r4, #12]
 80066be:	2300      	movs	r3, #0
 80066c0:	6063      	str	r3, [r4, #4]
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	f043 0308 	orr.w	r3, r3, #8
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	b94b      	cbnz	r3, 80066e6 <__swsetup_r+0x9a>
 80066d2:	89a3      	ldrh	r3, [r4, #12]
 80066d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066dc:	d003      	beq.n	80066e6 <__swsetup_r+0x9a>
 80066de:	4621      	mov	r1, r4
 80066e0:	4630      	mov	r0, r6
 80066e2:	f000 fa05 	bl	8006af0 <__smakebuf_r>
 80066e6:	89a0      	ldrh	r0, [r4, #12]
 80066e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066ec:	f010 0301 	ands.w	r3, r0, #1
 80066f0:	d00a      	beq.n	8006708 <__swsetup_r+0xbc>
 80066f2:	2300      	movs	r3, #0
 80066f4:	60a3      	str	r3, [r4, #8]
 80066f6:	6963      	ldr	r3, [r4, #20]
 80066f8:	425b      	negs	r3, r3
 80066fa:	61a3      	str	r3, [r4, #24]
 80066fc:	6923      	ldr	r3, [r4, #16]
 80066fe:	b943      	cbnz	r3, 8006712 <__swsetup_r+0xc6>
 8006700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006704:	d1ba      	bne.n	800667c <__swsetup_r+0x30>
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	0781      	lsls	r1, r0, #30
 800670a:	bf58      	it	pl
 800670c:	6963      	ldrpl	r3, [r4, #20]
 800670e:	60a3      	str	r3, [r4, #8]
 8006710:	e7f4      	b.n	80066fc <__swsetup_r+0xb0>
 8006712:	2000      	movs	r0, #0
 8006714:	e7f7      	b.n	8006706 <__swsetup_r+0xba>
 8006716:	bf00      	nop
 8006718:	20000010 	.word	0x20000010
 800671c:	08007164 	.word	0x08007164
 8006720:	08007184 	.word	0x08007184
 8006724:	08007144 	.word	0x08007144

08006728 <abort>:
 8006728:	2006      	movs	r0, #6
 800672a:	b508      	push	{r3, lr}
 800672c:	f000 fa50 	bl	8006bd0 <raise>
 8006730:	2001      	movs	r0, #1
 8006732:	f7fa feb6 	bl	80014a2 <_exit>
	...

08006738 <__sflush_r>:
 8006738:	898a      	ldrh	r2, [r1, #12]
 800673a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673c:	4605      	mov	r5, r0
 800673e:	0710      	lsls	r0, r2, #28
 8006740:	460c      	mov	r4, r1
 8006742:	d457      	bmi.n	80067f4 <__sflush_r+0xbc>
 8006744:	684b      	ldr	r3, [r1, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	dc04      	bgt.n	8006754 <__sflush_r+0x1c>
 800674a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	dc01      	bgt.n	8006754 <__sflush_r+0x1c>
 8006750:	2000      	movs	r0, #0
 8006752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006756:	2e00      	cmp	r6, #0
 8006758:	d0fa      	beq.n	8006750 <__sflush_r+0x18>
 800675a:	2300      	movs	r3, #0
 800675c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006760:	682f      	ldr	r7, [r5, #0]
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	d032      	beq.n	80067cc <__sflush_r+0x94>
 8006766:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	075a      	lsls	r2, r3, #29
 800676c:	d505      	bpl.n	800677a <__sflush_r+0x42>
 800676e:	6863      	ldr	r3, [r4, #4]
 8006770:	1ac0      	subs	r0, r0, r3
 8006772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006774:	b10b      	cbz	r3, 800677a <__sflush_r+0x42>
 8006776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006778:	1ac0      	subs	r0, r0, r3
 800677a:	2300      	movs	r3, #0
 800677c:	4602      	mov	r2, r0
 800677e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006780:	4628      	mov	r0, r5
 8006782:	6a21      	ldr	r1, [r4, #32]
 8006784:	47b0      	blx	r6
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	d106      	bne.n	800679a <__sflush_r+0x62>
 800678c:	6829      	ldr	r1, [r5, #0]
 800678e:	291d      	cmp	r1, #29
 8006790:	d82c      	bhi.n	80067ec <__sflush_r+0xb4>
 8006792:	4a29      	ldr	r2, [pc, #164]	; (8006838 <__sflush_r+0x100>)
 8006794:	40ca      	lsrs	r2, r1
 8006796:	07d6      	lsls	r6, r2, #31
 8006798:	d528      	bpl.n	80067ec <__sflush_r+0xb4>
 800679a:	2200      	movs	r2, #0
 800679c:	6062      	str	r2, [r4, #4]
 800679e:	6922      	ldr	r2, [r4, #16]
 80067a0:	04d9      	lsls	r1, r3, #19
 80067a2:	6022      	str	r2, [r4, #0]
 80067a4:	d504      	bpl.n	80067b0 <__sflush_r+0x78>
 80067a6:	1c42      	adds	r2, r0, #1
 80067a8:	d101      	bne.n	80067ae <__sflush_r+0x76>
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	b903      	cbnz	r3, 80067b0 <__sflush_r+0x78>
 80067ae:	6560      	str	r0, [r4, #84]	; 0x54
 80067b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067b2:	602f      	str	r7, [r5, #0]
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d0cb      	beq.n	8006750 <__sflush_r+0x18>
 80067b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067bc:	4299      	cmp	r1, r3
 80067be:	d002      	beq.n	80067c6 <__sflush_r+0x8e>
 80067c0:	4628      	mov	r0, r5
 80067c2:	f7ff faad 	bl	8005d20 <_free_r>
 80067c6:	2000      	movs	r0, #0
 80067c8:	6360      	str	r0, [r4, #52]	; 0x34
 80067ca:	e7c2      	b.n	8006752 <__sflush_r+0x1a>
 80067cc:	6a21      	ldr	r1, [r4, #32]
 80067ce:	2301      	movs	r3, #1
 80067d0:	4628      	mov	r0, r5
 80067d2:	47b0      	blx	r6
 80067d4:	1c41      	adds	r1, r0, #1
 80067d6:	d1c7      	bne.n	8006768 <__sflush_r+0x30>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0c4      	beq.n	8006768 <__sflush_r+0x30>
 80067de:	2b1d      	cmp	r3, #29
 80067e0:	d001      	beq.n	80067e6 <__sflush_r+0xae>
 80067e2:	2b16      	cmp	r3, #22
 80067e4:	d101      	bne.n	80067ea <__sflush_r+0xb2>
 80067e6:	602f      	str	r7, [r5, #0]
 80067e8:	e7b2      	b.n	8006750 <__sflush_r+0x18>
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f0:	81a3      	strh	r3, [r4, #12]
 80067f2:	e7ae      	b.n	8006752 <__sflush_r+0x1a>
 80067f4:	690f      	ldr	r7, [r1, #16]
 80067f6:	2f00      	cmp	r7, #0
 80067f8:	d0aa      	beq.n	8006750 <__sflush_r+0x18>
 80067fa:	0793      	lsls	r3, r2, #30
 80067fc:	bf18      	it	ne
 80067fe:	2300      	movne	r3, #0
 8006800:	680e      	ldr	r6, [r1, #0]
 8006802:	bf08      	it	eq
 8006804:	694b      	ldreq	r3, [r1, #20]
 8006806:	1bf6      	subs	r6, r6, r7
 8006808:	600f      	str	r7, [r1, #0]
 800680a:	608b      	str	r3, [r1, #8]
 800680c:	2e00      	cmp	r6, #0
 800680e:	dd9f      	ble.n	8006750 <__sflush_r+0x18>
 8006810:	4633      	mov	r3, r6
 8006812:	463a      	mov	r2, r7
 8006814:	4628      	mov	r0, r5
 8006816:	6a21      	ldr	r1, [r4, #32]
 8006818:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800681c:	47e0      	blx	ip
 800681e:	2800      	cmp	r0, #0
 8006820:	dc06      	bgt.n	8006830 <__sflush_r+0xf8>
 8006822:	89a3      	ldrh	r3, [r4, #12]
 8006824:	f04f 30ff 	mov.w	r0, #4294967295
 8006828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	e790      	b.n	8006752 <__sflush_r+0x1a>
 8006830:	4407      	add	r7, r0
 8006832:	1a36      	subs	r6, r6, r0
 8006834:	e7ea      	b.n	800680c <__sflush_r+0xd4>
 8006836:	bf00      	nop
 8006838:	20400001 	.word	0x20400001

0800683c <_fflush_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	690b      	ldr	r3, [r1, #16]
 8006840:	4605      	mov	r5, r0
 8006842:	460c      	mov	r4, r1
 8006844:	b913      	cbnz	r3, 800684c <_fflush_r+0x10>
 8006846:	2500      	movs	r5, #0
 8006848:	4628      	mov	r0, r5
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	b118      	cbz	r0, 8006856 <_fflush_r+0x1a>
 800684e:	6983      	ldr	r3, [r0, #24]
 8006850:	b90b      	cbnz	r3, 8006856 <_fflush_r+0x1a>
 8006852:	f000 f887 	bl	8006964 <__sinit>
 8006856:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <_fflush_r+0x6c>)
 8006858:	429c      	cmp	r4, r3
 800685a:	d11b      	bne.n	8006894 <_fflush_r+0x58>
 800685c:	686c      	ldr	r4, [r5, #4]
 800685e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0ef      	beq.n	8006846 <_fflush_r+0xa>
 8006866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006868:	07d0      	lsls	r0, r2, #31
 800686a:	d404      	bmi.n	8006876 <_fflush_r+0x3a>
 800686c:	0599      	lsls	r1, r3, #22
 800686e:	d402      	bmi.n	8006876 <_fflush_r+0x3a>
 8006870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006872:	f000 f915 	bl	8006aa0 <__retarget_lock_acquire_recursive>
 8006876:	4628      	mov	r0, r5
 8006878:	4621      	mov	r1, r4
 800687a:	f7ff ff5d 	bl	8006738 <__sflush_r>
 800687e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006880:	4605      	mov	r5, r0
 8006882:	07da      	lsls	r2, r3, #31
 8006884:	d4e0      	bmi.n	8006848 <_fflush_r+0xc>
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	059b      	lsls	r3, r3, #22
 800688a:	d4dd      	bmi.n	8006848 <_fflush_r+0xc>
 800688c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800688e:	f000 f908 	bl	8006aa2 <__retarget_lock_release_recursive>
 8006892:	e7d9      	b.n	8006848 <_fflush_r+0xc>
 8006894:	4b05      	ldr	r3, [pc, #20]	; (80068ac <_fflush_r+0x70>)
 8006896:	429c      	cmp	r4, r3
 8006898:	d101      	bne.n	800689e <_fflush_r+0x62>
 800689a:	68ac      	ldr	r4, [r5, #8]
 800689c:	e7df      	b.n	800685e <_fflush_r+0x22>
 800689e:	4b04      	ldr	r3, [pc, #16]	; (80068b0 <_fflush_r+0x74>)
 80068a0:	429c      	cmp	r4, r3
 80068a2:	bf08      	it	eq
 80068a4:	68ec      	ldreq	r4, [r5, #12]
 80068a6:	e7da      	b.n	800685e <_fflush_r+0x22>
 80068a8:	08007164 	.word	0x08007164
 80068ac:	08007184 	.word	0x08007184
 80068b0:	08007144 	.word	0x08007144

080068b4 <std>:
 80068b4:	2300      	movs	r3, #0
 80068b6:	b510      	push	{r4, lr}
 80068b8:	4604      	mov	r4, r0
 80068ba:	e9c0 3300 	strd	r3, r3, [r0]
 80068be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068c2:	6083      	str	r3, [r0, #8]
 80068c4:	8181      	strh	r1, [r0, #12]
 80068c6:	6643      	str	r3, [r0, #100]	; 0x64
 80068c8:	81c2      	strh	r2, [r0, #14]
 80068ca:	6183      	str	r3, [r0, #24]
 80068cc:	4619      	mov	r1, r3
 80068ce:	2208      	movs	r2, #8
 80068d0:	305c      	adds	r0, #92	; 0x5c
 80068d2:	f7fd fb63 	bl	8003f9c <memset>
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <std+0x38>)
 80068d8:	6224      	str	r4, [r4, #32]
 80068da:	6263      	str	r3, [r4, #36]	; 0x24
 80068dc:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <std+0x3c>)
 80068de:	62a3      	str	r3, [r4, #40]	; 0x28
 80068e0:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <std+0x40>)
 80068e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068e4:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <std+0x44>)
 80068e6:	6323      	str	r3, [r4, #48]	; 0x30
 80068e8:	bd10      	pop	{r4, pc}
 80068ea:	bf00      	nop
 80068ec:	08006c09 	.word	0x08006c09
 80068f0:	08006c2b 	.word	0x08006c2b
 80068f4:	08006c63 	.word	0x08006c63
 80068f8:	08006c87 	.word	0x08006c87

080068fc <_cleanup_r>:
 80068fc:	4901      	ldr	r1, [pc, #4]	; (8006904 <_cleanup_r+0x8>)
 80068fe:	f000 b8af 	b.w	8006a60 <_fwalk_reent>
 8006902:	bf00      	nop
 8006904:	0800683d 	.word	0x0800683d

08006908 <__sfmoreglue>:
 8006908:	2268      	movs	r2, #104	; 0x68
 800690a:	b570      	push	{r4, r5, r6, lr}
 800690c:	1e4d      	subs	r5, r1, #1
 800690e:	4355      	muls	r5, r2
 8006910:	460e      	mov	r6, r1
 8006912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006916:	f7ff fa6b 	bl	8005df0 <_malloc_r>
 800691a:	4604      	mov	r4, r0
 800691c:	b140      	cbz	r0, 8006930 <__sfmoreglue+0x28>
 800691e:	2100      	movs	r1, #0
 8006920:	e9c0 1600 	strd	r1, r6, [r0]
 8006924:	300c      	adds	r0, #12
 8006926:	60a0      	str	r0, [r4, #8]
 8006928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800692c:	f7fd fb36 	bl	8003f9c <memset>
 8006930:	4620      	mov	r0, r4
 8006932:	bd70      	pop	{r4, r5, r6, pc}

08006934 <__sfp_lock_acquire>:
 8006934:	4801      	ldr	r0, [pc, #4]	; (800693c <__sfp_lock_acquire+0x8>)
 8006936:	f000 b8b3 	b.w	8006aa0 <__retarget_lock_acquire_recursive>
 800693a:	bf00      	nop
 800693c:	200002d1 	.word	0x200002d1

08006940 <__sfp_lock_release>:
 8006940:	4801      	ldr	r0, [pc, #4]	; (8006948 <__sfp_lock_release+0x8>)
 8006942:	f000 b8ae 	b.w	8006aa2 <__retarget_lock_release_recursive>
 8006946:	bf00      	nop
 8006948:	200002d1 	.word	0x200002d1

0800694c <__sinit_lock_acquire>:
 800694c:	4801      	ldr	r0, [pc, #4]	; (8006954 <__sinit_lock_acquire+0x8>)
 800694e:	f000 b8a7 	b.w	8006aa0 <__retarget_lock_acquire_recursive>
 8006952:	bf00      	nop
 8006954:	200002d2 	.word	0x200002d2

08006958 <__sinit_lock_release>:
 8006958:	4801      	ldr	r0, [pc, #4]	; (8006960 <__sinit_lock_release+0x8>)
 800695a:	f000 b8a2 	b.w	8006aa2 <__retarget_lock_release_recursive>
 800695e:	bf00      	nop
 8006960:	200002d2 	.word	0x200002d2

08006964 <__sinit>:
 8006964:	b510      	push	{r4, lr}
 8006966:	4604      	mov	r4, r0
 8006968:	f7ff fff0 	bl	800694c <__sinit_lock_acquire>
 800696c:	69a3      	ldr	r3, [r4, #24]
 800696e:	b11b      	cbz	r3, 8006978 <__sinit+0x14>
 8006970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006974:	f7ff bff0 	b.w	8006958 <__sinit_lock_release>
 8006978:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800697c:	6523      	str	r3, [r4, #80]	; 0x50
 800697e:	4b13      	ldr	r3, [pc, #76]	; (80069cc <__sinit+0x68>)
 8006980:	4a13      	ldr	r2, [pc, #76]	; (80069d0 <__sinit+0x6c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	62a2      	str	r2, [r4, #40]	; 0x28
 8006986:	42a3      	cmp	r3, r4
 8006988:	bf08      	it	eq
 800698a:	2301      	moveq	r3, #1
 800698c:	4620      	mov	r0, r4
 800698e:	bf08      	it	eq
 8006990:	61a3      	streq	r3, [r4, #24]
 8006992:	f000 f81f 	bl	80069d4 <__sfp>
 8006996:	6060      	str	r0, [r4, #4]
 8006998:	4620      	mov	r0, r4
 800699a:	f000 f81b 	bl	80069d4 <__sfp>
 800699e:	60a0      	str	r0, [r4, #8]
 80069a0:	4620      	mov	r0, r4
 80069a2:	f000 f817 	bl	80069d4 <__sfp>
 80069a6:	2200      	movs	r2, #0
 80069a8:	2104      	movs	r1, #4
 80069aa:	60e0      	str	r0, [r4, #12]
 80069ac:	6860      	ldr	r0, [r4, #4]
 80069ae:	f7ff ff81 	bl	80068b4 <std>
 80069b2:	2201      	movs	r2, #1
 80069b4:	2109      	movs	r1, #9
 80069b6:	68a0      	ldr	r0, [r4, #8]
 80069b8:	f7ff ff7c 	bl	80068b4 <std>
 80069bc:	2202      	movs	r2, #2
 80069be:	2112      	movs	r1, #18
 80069c0:	68e0      	ldr	r0, [r4, #12]
 80069c2:	f7ff ff77 	bl	80068b4 <std>
 80069c6:	2301      	movs	r3, #1
 80069c8:	61a3      	str	r3, [r4, #24]
 80069ca:	e7d1      	b.n	8006970 <__sinit+0xc>
 80069cc:	08006dc8 	.word	0x08006dc8
 80069d0:	080068fd 	.word	0x080068fd

080069d4 <__sfp>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	4607      	mov	r7, r0
 80069d8:	f7ff ffac 	bl	8006934 <__sfp_lock_acquire>
 80069dc:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <__sfp+0x84>)
 80069de:	681e      	ldr	r6, [r3, #0]
 80069e0:	69b3      	ldr	r3, [r6, #24]
 80069e2:	b913      	cbnz	r3, 80069ea <__sfp+0x16>
 80069e4:	4630      	mov	r0, r6
 80069e6:	f7ff ffbd 	bl	8006964 <__sinit>
 80069ea:	3648      	adds	r6, #72	; 0x48
 80069ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069f0:	3b01      	subs	r3, #1
 80069f2:	d503      	bpl.n	80069fc <__sfp+0x28>
 80069f4:	6833      	ldr	r3, [r6, #0]
 80069f6:	b30b      	cbz	r3, 8006a3c <__sfp+0x68>
 80069f8:	6836      	ldr	r6, [r6, #0]
 80069fa:	e7f7      	b.n	80069ec <__sfp+0x18>
 80069fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a00:	b9d5      	cbnz	r5, 8006a38 <__sfp+0x64>
 8006a02:	4b16      	ldr	r3, [pc, #88]	; (8006a5c <__sfp+0x88>)
 8006a04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a08:	60e3      	str	r3, [r4, #12]
 8006a0a:	6665      	str	r5, [r4, #100]	; 0x64
 8006a0c:	f000 f847 	bl	8006a9e <__retarget_lock_init_recursive>
 8006a10:	f7ff ff96 	bl	8006940 <__sfp_lock_release>
 8006a14:	2208      	movs	r2, #8
 8006a16:	4629      	mov	r1, r5
 8006a18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a20:	6025      	str	r5, [r4, #0]
 8006a22:	61a5      	str	r5, [r4, #24]
 8006a24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a28:	f7fd fab8 	bl	8003f9c <memset>
 8006a2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a34:	4620      	mov	r0, r4
 8006a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a38:	3468      	adds	r4, #104	; 0x68
 8006a3a:	e7d9      	b.n	80069f0 <__sfp+0x1c>
 8006a3c:	2104      	movs	r1, #4
 8006a3e:	4638      	mov	r0, r7
 8006a40:	f7ff ff62 	bl	8006908 <__sfmoreglue>
 8006a44:	4604      	mov	r4, r0
 8006a46:	6030      	str	r0, [r6, #0]
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d1d5      	bne.n	80069f8 <__sfp+0x24>
 8006a4c:	f7ff ff78 	bl	8006940 <__sfp_lock_release>
 8006a50:	230c      	movs	r3, #12
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	e7ee      	b.n	8006a34 <__sfp+0x60>
 8006a56:	bf00      	nop
 8006a58:	08006dc8 	.word	0x08006dc8
 8006a5c:	ffff0001 	.word	0xffff0001

08006a60 <_fwalk_reent>:
 8006a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a64:	4606      	mov	r6, r0
 8006a66:	4688      	mov	r8, r1
 8006a68:	2700      	movs	r7, #0
 8006a6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a72:	f1b9 0901 	subs.w	r9, r9, #1
 8006a76:	d505      	bpl.n	8006a84 <_fwalk_reent+0x24>
 8006a78:	6824      	ldr	r4, [r4, #0]
 8006a7a:	2c00      	cmp	r4, #0
 8006a7c:	d1f7      	bne.n	8006a6e <_fwalk_reent+0xe>
 8006a7e:	4638      	mov	r0, r7
 8006a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a84:	89ab      	ldrh	r3, [r5, #12]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d907      	bls.n	8006a9a <_fwalk_reent+0x3a>
 8006a8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	d003      	beq.n	8006a9a <_fwalk_reent+0x3a>
 8006a92:	4629      	mov	r1, r5
 8006a94:	4630      	mov	r0, r6
 8006a96:	47c0      	blx	r8
 8006a98:	4307      	orrs	r7, r0
 8006a9a:	3568      	adds	r5, #104	; 0x68
 8006a9c:	e7e9      	b.n	8006a72 <_fwalk_reent+0x12>

08006a9e <__retarget_lock_init_recursive>:
 8006a9e:	4770      	bx	lr

08006aa0 <__retarget_lock_acquire_recursive>:
 8006aa0:	4770      	bx	lr

08006aa2 <__retarget_lock_release_recursive>:
 8006aa2:	4770      	bx	lr

08006aa4 <__swhatbuf_r>:
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	460e      	mov	r6, r1
 8006aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aac:	4614      	mov	r4, r2
 8006aae:	2900      	cmp	r1, #0
 8006ab0:	461d      	mov	r5, r3
 8006ab2:	b096      	sub	sp, #88	; 0x58
 8006ab4:	da08      	bge.n	8006ac8 <__swhatbuf_r+0x24>
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006abc:	602a      	str	r2, [r5, #0]
 8006abe:	061a      	lsls	r2, r3, #24
 8006ac0:	d410      	bmi.n	8006ae4 <__swhatbuf_r+0x40>
 8006ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ac6:	e00e      	b.n	8006ae6 <__swhatbuf_r+0x42>
 8006ac8:	466a      	mov	r2, sp
 8006aca:	f000 f903 	bl	8006cd4 <_fstat_r>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	dbf1      	blt.n	8006ab6 <__swhatbuf_r+0x12>
 8006ad2:	9a01      	ldr	r2, [sp, #4]
 8006ad4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ad8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006adc:	425a      	negs	r2, r3
 8006ade:	415a      	adcs	r2, r3
 8006ae0:	602a      	str	r2, [r5, #0]
 8006ae2:	e7ee      	b.n	8006ac2 <__swhatbuf_r+0x1e>
 8006ae4:	2340      	movs	r3, #64	; 0x40
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	b016      	add	sp, #88	; 0x58
 8006aec:	bd70      	pop	{r4, r5, r6, pc}
	...

08006af0 <__smakebuf_r>:
 8006af0:	898b      	ldrh	r3, [r1, #12]
 8006af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006af4:	079d      	lsls	r5, r3, #30
 8006af6:	4606      	mov	r6, r0
 8006af8:	460c      	mov	r4, r1
 8006afa:	d507      	bpl.n	8006b0c <__smakebuf_r+0x1c>
 8006afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	6123      	str	r3, [r4, #16]
 8006b04:	2301      	movs	r3, #1
 8006b06:	6163      	str	r3, [r4, #20]
 8006b08:	b002      	add	sp, #8
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
 8006b0c:	466a      	mov	r2, sp
 8006b0e:	ab01      	add	r3, sp, #4
 8006b10:	f7ff ffc8 	bl	8006aa4 <__swhatbuf_r>
 8006b14:	9900      	ldr	r1, [sp, #0]
 8006b16:	4605      	mov	r5, r0
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f7ff f969 	bl	8005df0 <_malloc_r>
 8006b1e:	b948      	cbnz	r0, 8006b34 <__smakebuf_r+0x44>
 8006b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b24:	059a      	lsls	r2, r3, #22
 8006b26:	d4ef      	bmi.n	8006b08 <__smakebuf_r+0x18>
 8006b28:	f023 0303 	bic.w	r3, r3, #3
 8006b2c:	f043 0302 	orr.w	r3, r3, #2
 8006b30:	81a3      	strh	r3, [r4, #12]
 8006b32:	e7e3      	b.n	8006afc <__smakebuf_r+0xc>
 8006b34:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <__smakebuf_r+0x7c>)
 8006b36:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	6020      	str	r0, [r4, #0]
 8006b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b40:	81a3      	strh	r3, [r4, #12]
 8006b42:	9b00      	ldr	r3, [sp, #0]
 8006b44:	6120      	str	r0, [r4, #16]
 8006b46:	6163      	str	r3, [r4, #20]
 8006b48:	9b01      	ldr	r3, [sp, #4]
 8006b4a:	b15b      	cbz	r3, 8006b64 <__smakebuf_r+0x74>
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b52:	f000 f8d1 	bl	8006cf8 <_isatty_r>
 8006b56:	b128      	cbz	r0, 8006b64 <__smakebuf_r+0x74>
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	f023 0303 	bic.w	r3, r3, #3
 8006b5e:	f043 0301 	orr.w	r3, r3, #1
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	89a0      	ldrh	r0, [r4, #12]
 8006b66:	4305      	orrs	r5, r0
 8006b68:	81a5      	strh	r5, [r4, #12]
 8006b6a:	e7cd      	b.n	8006b08 <__smakebuf_r+0x18>
 8006b6c:	080068fd 	.word	0x080068fd

08006b70 <_malloc_usable_size_r>:
 8006b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b74:	1f18      	subs	r0, r3, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bfbc      	itt	lt
 8006b7a:	580b      	ldrlt	r3, [r1, r0]
 8006b7c:	18c0      	addlt	r0, r0, r3
 8006b7e:	4770      	bx	lr

08006b80 <_raise_r>:
 8006b80:	291f      	cmp	r1, #31
 8006b82:	b538      	push	{r3, r4, r5, lr}
 8006b84:	4604      	mov	r4, r0
 8006b86:	460d      	mov	r5, r1
 8006b88:	d904      	bls.n	8006b94 <_raise_r+0x14>
 8006b8a:	2316      	movs	r3, #22
 8006b8c:	6003      	str	r3, [r0, #0]
 8006b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b92:	bd38      	pop	{r3, r4, r5, pc}
 8006b94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b96:	b112      	cbz	r2, 8006b9e <_raise_r+0x1e>
 8006b98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b9c:	b94b      	cbnz	r3, 8006bb2 <_raise_r+0x32>
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f000 f830 	bl	8006c04 <_getpid_r>
 8006ba4:	462a      	mov	r2, r5
 8006ba6:	4601      	mov	r1, r0
 8006ba8:	4620      	mov	r0, r4
 8006baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bae:	f000 b817 	b.w	8006be0 <_kill_r>
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d00a      	beq.n	8006bcc <_raise_r+0x4c>
 8006bb6:	1c59      	adds	r1, r3, #1
 8006bb8:	d103      	bne.n	8006bc2 <_raise_r+0x42>
 8006bba:	2316      	movs	r3, #22
 8006bbc:	6003      	str	r3, [r0, #0]
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	e7e7      	b.n	8006b92 <_raise_r+0x12>
 8006bc2:	2400      	movs	r4, #0
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006bca:	4798      	blx	r3
 8006bcc:	2000      	movs	r0, #0
 8006bce:	e7e0      	b.n	8006b92 <_raise_r+0x12>

08006bd0 <raise>:
 8006bd0:	4b02      	ldr	r3, [pc, #8]	; (8006bdc <raise+0xc>)
 8006bd2:	4601      	mov	r1, r0
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	f7ff bfd3 	b.w	8006b80 <_raise_r>
 8006bda:	bf00      	nop
 8006bdc:	20000010 	.word	0x20000010

08006be0 <_kill_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	2300      	movs	r3, #0
 8006be4:	4d06      	ldr	r5, [pc, #24]	; (8006c00 <_kill_r+0x20>)
 8006be6:	4604      	mov	r4, r0
 8006be8:	4608      	mov	r0, r1
 8006bea:	4611      	mov	r1, r2
 8006bec:	602b      	str	r3, [r5, #0]
 8006bee:	f7fa fc48 	bl	8001482 <_kill>
 8006bf2:	1c43      	adds	r3, r0, #1
 8006bf4:	d102      	bne.n	8006bfc <_kill_r+0x1c>
 8006bf6:	682b      	ldr	r3, [r5, #0]
 8006bf8:	b103      	cbz	r3, 8006bfc <_kill_r+0x1c>
 8006bfa:	6023      	str	r3, [r4, #0]
 8006bfc:	bd38      	pop	{r3, r4, r5, pc}
 8006bfe:	bf00      	nop
 8006c00:	200002cc 	.word	0x200002cc

08006c04 <_getpid_r>:
 8006c04:	f7fa bc36 	b.w	8001474 <_getpid>

08006c08 <__sread>:
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c10:	f000 f894 	bl	8006d3c <_read_r>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	bfab      	itete	ge
 8006c18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c1a:	89a3      	ldrhlt	r3, [r4, #12]
 8006c1c:	181b      	addge	r3, r3, r0
 8006c1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c22:	bfac      	ite	ge
 8006c24:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c26:	81a3      	strhlt	r3, [r4, #12]
 8006c28:	bd10      	pop	{r4, pc}

08006c2a <__swrite>:
 8006c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2e:	461f      	mov	r7, r3
 8006c30:	898b      	ldrh	r3, [r1, #12]
 8006c32:	4605      	mov	r5, r0
 8006c34:	05db      	lsls	r3, r3, #23
 8006c36:	460c      	mov	r4, r1
 8006c38:	4616      	mov	r6, r2
 8006c3a:	d505      	bpl.n	8006c48 <__swrite+0x1e>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c44:	f000 f868 	bl	8006d18 <_lseek_r>
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	4632      	mov	r2, r6
 8006c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c50:	81a3      	strh	r3, [r4, #12]
 8006c52:	4628      	mov	r0, r5
 8006c54:	463b      	mov	r3, r7
 8006c56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5e:	f000 b817 	b.w	8006c90 <_write_r>

08006c62 <__sseek>:
 8006c62:	b510      	push	{r4, lr}
 8006c64:	460c      	mov	r4, r1
 8006c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c6a:	f000 f855 	bl	8006d18 <_lseek_r>
 8006c6e:	1c43      	adds	r3, r0, #1
 8006c70:	89a3      	ldrh	r3, [r4, #12]
 8006c72:	bf15      	itete	ne
 8006c74:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c7e:	81a3      	strheq	r3, [r4, #12]
 8006c80:	bf18      	it	ne
 8006c82:	81a3      	strhne	r3, [r4, #12]
 8006c84:	bd10      	pop	{r4, pc}

08006c86 <__sclose>:
 8006c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c8a:	f000 b813 	b.w	8006cb4 <_close_r>
	...

08006c90 <_write_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	4611      	mov	r1, r2
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4d05      	ldr	r5, [pc, #20]	; (8006cb0 <_write_r+0x20>)
 8006c9c:	602a      	str	r2, [r5, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f7fa fc26 	bl	80014f0 <_write>
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	d102      	bne.n	8006cae <_write_r+0x1e>
 8006ca8:	682b      	ldr	r3, [r5, #0]
 8006caa:	b103      	cbz	r3, 8006cae <_write_r+0x1e>
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	bd38      	pop	{r3, r4, r5, pc}
 8006cb0:	200002cc 	.word	0x200002cc

08006cb4 <_close_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	4d05      	ldr	r5, [pc, #20]	; (8006cd0 <_close_r+0x1c>)
 8006cba:	4604      	mov	r4, r0
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	602b      	str	r3, [r5, #0]
 8006cc0:	f7fa fc32 	bl	8001528 <_close>
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	d102      	bne.n	8006cce <_close_r+0x1a>
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	b103      	cbz	r3, 8006cce <_close_r+0x1a>
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	200002cc 	.word	0x200002cc

08006cd4 <_fstat_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	4d06      	ldr	r5, [pc, #24]	; (8006cf4 <_fstat_r+0x20>)
 8006cda:	4604      	mov	r4, r0
 8006cdc:	4608      	mov	r0, r1
 8006cde:	4611      	mov	r1, r2
 8006ce0:	602b      	str	r3, [r5, #0]
 8006ce2:	f7fa fc2c 	bl	800153e <_fstat>
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	d102      	bne.n	8006cf0 <_fstat_r+0x1c>
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	b103      	cbz	r3, 8006cf0 <_fstat_r+0x1c>
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	bd38      	pop	{r3, r4, r5, pc}
 8006cf2:	bf00      	nop
 8006cf4:	200002cc 	.word	0x200002cc

08006cf8 <_isatty_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	4d05      	ldr	r5, [pc, #20]	; (8006d14 <_isatty_r+0x1c>)
 8006cfe:	4604      	mov	r4, r0
 8006d00:	4608      	mov	r0, r1
 8006d02:	602b      	str	r3, [r5, #0]
 8006d04:	f7fa fc2a 	bl	800155c <_isatty>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d102      	bne.n	8006d12 <_isatty_r+0x1a>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	b103      	cbz	r3, 8006d12 <_isatty_r+0x1a>
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	200002cc 	.word	0x200002cc

08006d18 <_lseek_r>:
 8006d18:	b538      	push	{r3, r4, r5, lr}
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	4611      	mov	r1, r2
 8006d20:	2200      	movs	r2, #0
 8006d22:	4d05      	ldr	r5, [pc, #20]	; (8006d38 <_lseek_r+0x20>)
 8006d24:	602a      	str	r2, [r5, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	f7fa fc22 	bl	8001570 <_lseek>
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d102      	bne.n	8006d36 <_lseek_r+0x1e>
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	b103      	cbz	r3, 8006d36 <_lseek_r+0x1e>
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	bd38      	pop	{r3, r4, r5, pc}
 8006d38:	200002cc 	.word	0x200002cc

08006d3c <_read_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4608      	mov	r0, r1
 8006d42:	4611      	mov	r1, r2
 8006d44:	2200      	movs	r2, #0
 8006d46:	4d05      	ldr	r5, [pc, #20]	; (8006d5c <_read_r+0x20>)
 8006d48:	602a      	str	r2, [r5, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f7fa fbb3 	bl	80014b6 <_read>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d102      	bne.n	8006d5a <_read_r+0x1e>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	b103      	cbz	r3, 8006d5a <_read_r+0x1e>
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
 8006d5c:	200002cc 	.word	0x200002cc

08006d60 <_init>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr

08006d6c <_fini>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	bf00      	nop
 8006d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d72:	bc08      	pop	{r3}
 8006d74:	469e      	mov	lr, r3
 8006d76:	4770      	bx	lr
